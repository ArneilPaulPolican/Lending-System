<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>System Tables</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>

    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-table fa-fw"></i> System Tables <small>List of master tables</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li class="active">
                                System Tables
                            </li>
                        </ol>
                    </div>
                </div>

                <ul id="myTab" class="nav nav-tabs">
                    <li class="active">
                        <a href="#Deductions" data-toggle="tab" id="DeductionsTab">
                            Deductions
                        </a>
                    </li>
                    <li>
                        <a href="#Requirements" data-toggle="tab" id="RequirementsTab">
                            Requirements
                        </a>
                    </li>
                    <li>
                        <a href="#Terms" data-toggle="tab" id="TermsTab">
                            Terms
                        </a>
                    </li>
                    @*<li>
                            <a href="#Penalties" data-toggle="tab" id="PenaltiesTab">
                                Penalties
                            </a>
                        </li>*@
                    <li>
                        <a href="#Interests" data-toggle="tab" id="InterestsTab">
                            Interests
                        </a>
                    </li>
                </ul>
                <br />
                <div id="myTabContent" class="tab-content">
                    <div class="tab-pane fade in active" id="Deductions">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%">
                                    <tr>
                                        <td>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="searchDeductions" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>
                                        <td align="right">
                                            <button class="btn btn-primary" id="btnAddDeductions" onclick="btnAddDeductionsOnclick()">
                                                <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="DeductionsListFlexGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="Requirements">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%">
                                    <tr>
                                        <td>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="searchRequirements" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>
                                        <td align="right">
                                            <button class="btn btn-primary" id="btnAddRequirements" onclick="btnAddRequirementsOnclick()">
                                                <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="RequirementsListFlexGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridRequirements">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridRequirements">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridRequirements">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridRequirements"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridRequirements">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridRequirements">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="Terms">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%">
                                    <tr>
                                        <td>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="searchTerms" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>
                                        <td align="right">
                                            <button class="btn btn-primary" id="btnAddTerms" onclick="btnAddTermsOnclick()">
                                                <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="TermsListFlexGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridTerms">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridTerms">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridTerms">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridTerms"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridTerms">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridTerms">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="Penalties">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%">
                                    <tr>
                                        <td>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="searchPenalties" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>
                                        <td align="right">
                                            <button class="btn btn-primary" id="btnAddPenalties" onclick="btnAddPenaltiesOnclick()">
                                                <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="PenaltiesListFlexGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridPenalties">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridPenalties">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridPenalties">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridPenalties"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridPenalties">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridPenalties">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="Interests">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table style="width: 100%">
                                    <tr>
                                        <td>
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="searchInterests" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td>&nbsp;&nbsp;&nbsp;</td>
                                        <td align="right">
                                            <button class="btn btn-primary" id="btnAddInterests" onclick="btnAddInterestsOnclick()">
                                                <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                            </button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="InterestsListFlexGrid" class="grid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridInterests">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridInterests">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridInterests">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridInterests"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridInterests">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridInterests">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User security stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Deductions Detail Modal -->
    <div class="modal fade" id="DeductionsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Deduction Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Deduction</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requiredDeductions" id="deductionName" placeholder="Deduction" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Description</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredDeductions" rows="5" id="deductionDescription" placeholder="Description"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Rate</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon"> % </span>
                                    <input type="text" class="form-control numberField requiredDeductions" id="deductionPercentageRate" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Amount</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredDeductions" id="deductionAmount" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveDeductions" onclick="saveDeductionsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseDeductions" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Deductions modal -->
    <div class="modal fade" id="deleteConfirmationDeductionsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Loan Type</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this LoanType?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteDeductions" onclick="btnConfirmDeleteDeductionsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteDeductionsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Requirements Detail Modal -->
    <div class="modal fade" id="RequirementsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Requirement Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Requirement</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requiredRequirements" id="requirementName" placeholder="Requirement" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Description</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredRequirements" rows="5" id="requirementDescription" placeholder="Description"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveRequirements" onclick="saveRequirementsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseRequirements" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Requirements modal -->
    <div class="modal fade" id="deleteConfirmationRequirementsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Requirements</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Requirement?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteRequirements" onclick="btnConfirmDeleteRequirementsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteRequirementsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Terms Detail Modal -->
    <div class="modal fade" id="TermsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Term Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Term</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requiredTerms" id="termName" placeholder="LoanType" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Description</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredTerms" rows="5" id="termDescription" placeholder="Description"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Days</label>
                            <div class="col-sm-8">
                                <div id="cboNoOfDays"></div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveTerms" onclick="saveTermsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseTerms" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Terms modal -->
    <div class="modal fade" id="deleteConfirmationTermsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Term</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Term?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteTerms" onclick="btnConfirmDeleteTermsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteTermsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Penalties Detail Modal -->
    <div class="modal fade" id="PenaltiesEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Penalty Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Penalty Name</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requiredPenalties" id="penaltyName" placeholder="LoanType" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Description</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredPenalties" rows="5" id="penaltyDescription" placeholder="Description"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Amount</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredPenalties" id="penaltyAmount" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSavePenalties" onclick="savePenaltiesOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnClosePenalties" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Penalties modal -->
    <div class="modal fade" id="deleteConfirmationPenaltiesModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Penalty</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Penalty?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeletePenalties" onclick="btnConfirmDeletePenaltiesOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeletePenaltiesModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Interests Detail Modal -->
    <div class="modal fade" id="InterestsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Interest Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Interest Name</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requiredInterests" id="interestName" placeholder="LoanType" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Description</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredInterests" rows="5" id="interestDescription" placeholder="Description"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Rate</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon">%</span>
                                    <input type="text" class="form-control numberField requiredInterests" id="interestRate" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveInterests" onclick="saveInterestsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseInterests" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Interests modal -->
    <div class="modal fade" id="deleteConfirmationInterestsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Interest</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Interest?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteInterests" onclick="btnConfirmDeleteInterestsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteInterestsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var deductionsCollectionView;
        var deductionsFlexGrid;
        var deductionId = 0;
        var requirementsCollectionView;
        var requirementsFlexGrid;
        var requirementId = 0;
        var cboArea;
        var termsCollectionView;
        var termsFlexGrid;
        var termId = 0;
        var penaltiesCollectionView;
        var penaltiesFlexGrid;
        var penaltyId = 0;
        var interestsCollectionView;
        var interestsFlexGrid;
        var interestId = 0;

        // get Requirements
        function getRequirementsList() {
            var requirements = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/requirements/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (requirementsListResult) {
                    if (requirementsListResult.length > 0) {
                        for (i = 0; i < requirementsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            requirements.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editRequirementsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteRequirementsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: requirementsListResult[i]["Id"],
                                Requirement: requirementsListResult[i]["Requirement"],
                                Description: requirementsListResult[i]["Description"],
                                CreatedByUserId: requirementsListResult[i]["CreatedByUserId"],
                                CreatedByUser: requirementsListResult[i]["CreatedByUser"],
                                CreatedDateTime: requirementsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: requirementsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: requirementsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: requirementsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return requirements;
        }

        // add new   Requirements
        function btnAddRequirementsOnclick() {
            $("#RequirementsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredRequirements').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveRequirements").prop("disabled", false);
            $("#btnCloseRequirements").prop("disabled", false);

            requirementId = 0;
            document.getElementById("requirementName").value = "NA";
            document.getElementById("requirementDescription").value = "NA";
        }

        // edit   Requirements
        function editRequirementsOnclick() {
            $("#RequirementsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredRequirements').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveRequirements").prop("disabled", false);
            $("#btnCloseRequirements").prop("disabled", false);

            requirementsCollectionView.editItem(requirementsCollectionView.currentItem);
            var requirementCurrentEditItem = requirementsCollectionView.currentEditItem;

            requirementId = requirementCurrentEditItem.Id;
            document.getElementById("requirementName").value = requirementCurrentEditItem.Requirement;
            document.getElementById("requirementDescription").value = requirementCurrentEditItem.Description;
        }

        // form input validation
        function inputValidationForRequirements() {
            var isValid = true;
            $('.requiredRequirements').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save   Requirements
        function saveRequirementsOnclick() {
            if (inputValidationForRequirements()) {
                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveRequirements").prop("disabled", true);
                $("#btnCloseRequirements").prop("disabled", true);

                var RequirementsObject = new Object();
                RequirementsObject.Requirement = document.getElementById('requirementName').value;
                RequirementsObject.Description = document.getElementById('requirementDescription').value;
                var RequirementsData = JSON.stringify(RequirementsObject);

                if (requirementId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/Requirements/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: RequirementsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#RequirementsEditDetailModal").modal("hide");

                                requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
                                requirementsCollectionView.canFilter = true;
                                requirementsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchRequirements').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    requirementsCollectionView.refresh();
                                });

                                requirementsCollectionView.filter = function (item) {
                                    return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                requirementsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanRequirements();
                                });

                                requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateRequirementsStampSecurity();
                                });

                                // Flex Grid
                                requirementsFlexGrid.itemsSource = requirementsCollectionView;
                                requirementsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#RequirementsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveRequirements").prop("disabled", false);
                                $("#btnCloseRequirements").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/Requirements/update/' + requirementId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: RequirementsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#RequirementsEditDetailModal").modal("hide");

                                requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
                                requirementsCollectionView.canFilter = true;
                                requirementsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchRequirements').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    requirementsCollectionView.refresh();
                                });

                                requirementsCollectionView.filter = function (item) {
                                    return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                requirementsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanRequirements();
                                });

                                requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateRequirementsStampSecurity();
                                });

                                // Flex Grid
                                requirementsFlexGrid.itemsSource = requirementsCollectionView;
                                requirementsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#RequirementsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveRequirements").prop("disabled", false);
                                $("#btnCloseRequirements").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#RequirementsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveRequirements").prop("disabled", false);
                                $("#btnCloseRequirements").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete   Requirements
        function deleteRequirementsOnclick() {
            $("#deleteConfirmationRequirementsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteRequirements").innerHTML = "Delete";
            $("#btnConfirmDeleteRequirements").prop("disabled", false);
            $("#btnCloseDeleteRequirementsModal").prop("disabled", false);
        }
        function btnConfirmDeleteRequirementsOnclick() {
            document.getElementById("btnConfirmDeleteRequirements").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteRequirements").prop("disabled", true);
            $("#btnCloseDeleteRequirementsModal").prop("disabled", true);

            requirementsCollectionView.editItem(requirementsCollectionView.currentItem);
            var id = requirementsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/Requirements/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationRequirementsModal').modal('hide');

                        requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
                        requirementsCollectionView.canFilter = true;
                        requirementsCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchRequirements').keyup(function () {
                            filterText = this.value.toLowerCase();
                            requirementsCollectionView.refresh();
                        });

                        requirementsCollectionView.filter = function (item) {
                            return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        requirementsCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsLoanRequirements();
                        });

                        requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateRequirementsStampSecurity();
                        });
                        // Flex Grid
                        requirementsFlexGrid.itemsSource = requirementsCollectionView;
                        requirementsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationRequirementsModal').modal('hide');
                        $("#btnConfirmDeleteRequirements").prop("disabled", false);
                        $("#btnCloseDeleteRequirementsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationRequirementsModal').modal('hide');
                        $("#btnConfirmDeleteRequirements").prop("disabled", false);
                        $("#btnCloseDeleteRequirementsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateRequirementsStampSecurity() {
            var item = requirementsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsLoanRequirements() {
            if (requirementsCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridRequirements').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridRequirements').style.display = 'block';
            btnCurrentPageGridRequirements.innerHTML = (requirementsCollectionView.pageIndex + 1) + ' / ' + requirementsCollectionView.pageCount;
        }

        //   Requirements flexgrid
        function createRequirementFlexGrid() {
            NProgress.start();
            toastrModification();

            requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
            requirementsCollectionView.canFilter = true;
            requirementsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchRequirements').keyup(function () {
                filterText = this.value.toLowerCase();
                requirementsCollectionView.refresh();
            });

            requirementsCollectionView.filter = function (item) {
                return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            requirementsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanRequirements();
            });

            requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateRequirementsStampSecurity();
            });

            // Flex Grid
            requirementsFlexGrid = new wijmo.grid.FlexGrid('#RequirementsListFlexGrid');
            requirementsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Requirement",
                                "binding": "Requirement",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: requirementsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            requirementsFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridRequirements = document.getElementById('btnMoveToFirstPageGridRequirements');
            btnPreviousPageGridRequirements = document.getElementById('btnMoveToPreviousPageGridRequirements');
            btnNextPageGridRequirements = document.getElementById('btnMoveToNextPageGridRequirements');
            btnLastPageGridRequirements = document.getElementById('btnMoveToLastPageGridRequirements');
            btnCurrentPageGridRequirements = document.getElementById('btnCurrentPageGridRequirements');

            updateNavigateButtonsLoanRequirements();

            btnFirstPageGridRequirements.addEventListener('click', function () {
                requirementsCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanRequirements();
            });
            btnPreviousPageGridRequirements.addEventListener('click', function () {
                requirementsCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanRequirements();
            });
            btnNextPageGridRequirements.addEventListener('click', function () {
                requirementsCollectionView.moveToNextPage();
                updateNavigateButtonsLoanRequirements();
            });
            btnLastPageGridRequirements.addEventListener('click', function () {
                requirementsCollectionView.moveToLastPage();
                updateNavigateButtonsLoanRequirements();
            });
        }

        //   Requirements tab
        $('#RequirementsTab').click(function () {
            NProgress.start();
            $("#Requirements").show();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#Deductions").hide();
            $("#Terms").hide();
            $("#Penalties").hide();
            $("#Interests").hide();

            createRequirementFlexGrid();
            window.createRequirementFlexGrid = function () {
                return true;
            }

            requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
            requirementsCollectionView.canFilter = true;
            requirementsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchRequirements').keyup(function () {
                filterText = this.value.toLowerCase();
                requirementsCollectionView.refresh();
            });

            requirementsCollectionView.filter = function (item) {
                return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            requirementsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanRequirements();
            });

            requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateRequirementsStampSecurity();
            });

            // Flex Grid
            requirementsFlexGrid.itemsSource = requirementsCollectionView;
            requirementsFlexGrid.trackChanges = true;
        });

        // get deduction
        function getDeductionsList() {
            var deductions = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/deductions/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (deductionListResult) {
                    if (deductionListResult.length > 0) {
                        for (i = 0; i < deductionListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            deductions.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editDeductionsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteDeductionsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: deductionListResult[i]["Id"],
                                Deduction: deductionListResult[i]["Deduction"],
                                Description: deductionListResult[i]["Description"],
                                IsPercentage: deductionListResult[i]["IsPercentage"],
                                PercentageRate: deductionListResult[i]["PercentageRate"],
                                DeductionAmount: deductionListResult[i]["DeductionAmount"],
                                CreatedByUserId: deductionListResult[i]["CreatedByUserId"],
                                CreatedByUser: deductionListResult[i]["CreatedByUser"],
                                CreatedDateTime: deductionListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: deductionListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: deductionListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: deductionListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return deductions;
        }

        // add new deduction
        function btnAddDeductionsOnclick() {
            $("#DeductionsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredDeductions').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveDeductions").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveDeductions").prop("disabled", false);
            $("#btnCloseDeductions").prop("disabled", false);
            document.getElementById("deductionPercentageRate").disabled = true;
            document.getElementById("deductionAmount").disabled = false;

            deductionId = 0;
            document.getElementById("deductionName").value = "NA";
            document.getElementById("deductionDescription").value = "NA";
            document.getElementById("deductionPercentageRate").value = 0;
            document.getElementById("deductionAmount").value = 0;
        }

        // edit deduction
        function editDeductionsOnclick() {
            $("#DeductionsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredDeductions').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveDeductions").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveDeductions").prop("disabled", false);
            $("#btnCloseDeductions").prop("disabled", false);

            deductionsCollectionView.editItem(deductionsCollectionView.currentItem);
            var deductionTypeCurrentEditItem = deductionsCollectionView.currentEditItem;

            deductionId = deductionTypeCurrentEditItem.Id;
            document.getElementById("deductionName").value = deductionTypeCurrentEditItem.Deduction;
            document.getElementById("deductionDescription").value = deductionTypeCurrentEditItem.Description;
            document.getElementById("deductionPercentageRate").value = deductionTypeCurrentEditItem.PercentageRate.toLocaleString();
            document.getElementById("deductionAmount").value = deductionTypeCurrentEditItem.DeductionAmount.toLocaleString();
        }

        // form input validation
        function inputValidationForDeductions() {
            var isValid = true;
            $('.requiredDeductions').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Loan Types
        function saveDeductionsOnclick() {
            if (inputValidationForDeductions()) {
                document.getElementById("btnSaveDeductions").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveDeductions").prop("disabled", true);
                $("#btnCloseDeductions").prop("disabled", true);

                var DeductionsObject = new Object();
                DeductionsObject.Deduction = document.getElementById('deductionName').value;
                DeductionsObject.Description = document.getElementById('deductionDescription').value;
                DeductionsObject.PercentageRate = document.getElementById('deductionPercentageRate').value;
                DeductionsObject.DeductionAmount = document.getElementById('deductionAmount').value;
                var DeductionsData = JSON.stringify(DeductionsObject);

                if (deductionId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/Deductions/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: DeductionsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#DeductionsEditDetailModal").modal("hide");

                                deductionsCollectionView = new wijmo.collections.CollectionView(getDeductionsList());
                                deductionsCollectionView.canFilter = true;
                                deductionsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchDeductions').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    deductionsCollectionView.refresh();
                                });

                                deductionsCollectionView.filter = function (item) {
                                    return !filterText || (item.Deduction.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                deductionsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanDeductions();
                                });

                                deductionsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateDeductionsStampSecurity();
                                });

                                // Flex Grid
                                deductionsFlexGrid.itemsSource = deductionsCollectionView;
                                deductionsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#DeductionsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveDeductions").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveDeductions").prop("disabled", false);
                                $("#btnCloseDeductions").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/Deductions/update/' + deductionId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: DeductionsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#DeductionsEditDetailModal").modal("hide");

                                deductionsCollectionView = new wijmo.collections.CollectionView(getDeductionsList());
                                deductionsCollectionView.canFilter = true;
                                deductionsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchDeductions').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    deductionsCollectionView.refresh();
                                });

                                deductionsCollectionView.filter = function (item) {
                                    return !filterText || (item.Deduction.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                deductionsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanDeductions();
                                });

                                deductionsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateDeductionsStampSecurity();
                                });

                                // Flex Grid
                                deductionsFlexGrid.itemsSource = deductionsCollectionView;
                                deductionsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#DeductionsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveDeductions").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveDeductions").prop("disabled", false);
                                $("#btnCloseDeductions").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#DeductionsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveDeductions").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveDeductions").prop("disabled", false);
                                $("#btnCloseDeductions").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Loan Types
        function deleteDeductionsOnclick() {
            $("#deleteConfirmationDeductionsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteDeductions").innerHTML = "Delete";
            $("#btnConfirmDeleteDeductions").prop("disabled", false);
            $("#btnCloseDeleteDeductionsModal").prop("disabled", false);
        }
        function btnConfirmDeleteDeductionsOnclick() {
            document.getElementById("btnConfirmDeleteDeductions").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteDeductions").prop("disabled", true);
            $("#btnCloseDeleteDeductionsModal").prop("disabled", true);

            deductionsCollectionView.editItem(deductionsCollectionView.currentItem);
            var id = deductionsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/Deductions/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationDeductionsModal').modal('hide');

                        deductionsCollectionView = new wijmo.collections.CollectionView(getDeductionsList());
                        deductionsCollectionView.canFilter = true;
                        deductionsCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchDeductions').keyup(function () {
                            filterText = this.value.toLowerCase();
                            deductionsCollectionView.refresh();
                        });

                        deductionsCollectionView.filter = function (item) {
                            return !filterText || (item.Deduction.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        deductionsCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsLoanDeductions();
                        });

                        deductionsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateDeductionsStampSecurity();
                        });

                        // Flex Grid
                        deductionsFlexGrid.itemsSource = deductionsCollectionView;
                        deductionsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationDeductionsModal').modal('hide');
                        $("#btnConfirmDeleteDeductions").prop("disabled", false);
                        $("#btnCloseDeleteDeductionsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationDeductionsModal').modal('hide');
                        $("#btnConfirmDeleteDeductions").prop("disabled", false);
                        $("#btnCloseDeleteDeductionsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateDeductionsStampSecurity() {
            var item = deductionsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsLoanDeductions() {
            if (deductionsCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            btnCurrentPageGrid.innerHTML = (deductionsCollectionView.pageIndex + 1) + ' / ' + deductionsCollectionView.pageCount;
        }

        //  Loan Types flexgrid
        function createLoanTypeFlexGrid() {
            NProgress.start();
            toastrModification();

            deductionsCollectionView = new wijmo.collections.CollectionView(getDeductionsList());
            deductionsCollectionView.canFilter = true;
            deductionsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchDeductions').keyup(function () {
                filterText = this.value.toLowerCase();
                deductionsCollectionView.refresh();
            });

            deductionsCollectionView.filter = function (item) {
                return !filterText || (item.Deduction.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            deductionsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanDeductions();
            });

            deductionsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateDeductionsStampSecurity();
            });

            // Flex Grid
            deductionsFlexGrid = new wijmo.grid.FlexGrid('#DeductionsListFlexGrid');
            deductionsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Deduction",
                                "binding": "Deduction",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Percentage Rate",
                                "binding": "PercentageRate",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Deduction Amount",
                                "binding": "DeductionAmount",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: deductionsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            deductionsFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtonsLoanDeductions();

            btnFirstPageGrid.addEventListener('click', function () {
                deductionsCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanDeductions();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                deductionsCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanDeductions();
            });
            btnNextPageGrid.addEventListener('click', function () {
                deductionsCollectionView.moveToNextPage();
                updateNavigateButtonsLoanDeductions();
            });
            btnLastPageGrid.addEventListener('click', function () {
                deductionsCollectionView.moveToLastPage();
                updateNavigateButtonsLoanDeductions();
            });
        }

        // Loan Types tab
        $('#DeductionsTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#Deductions").show();
            $("#Terms").hide();
            $("#Penalties").hide();
            $("#Interests").hide();

            deductionsCollectionView = new wijmo.collections.CollectionView(getDeductionsList());
            deductionsCollectionView.canFilter = true;
            deductionsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchDeductions').keyup(function () {
                filterText = this.value.toLowerCase();
                deductionsCollectionView.refresh();
            });

            deductionsCollectionView.filter = function (item) {
                return !filterText || (item.LoanType.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            deductionsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanDeductions();
            });

            deductionsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateDeductionsStampSecurity();
            });

            // Flex Grid
            deductionsFlexGrid.itemsSource = deductionsCollectionView;
            deductionsFlexGrid.trackChanges = true;
        });

        // get Terms
        function getTermsList() {
            var terms = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/term/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (termsListResult) {
                    if (termsListResult.length > 0) {
                        for (i = 0; i < termsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            terms.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editTermsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteTermsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: termsListResult[i]["Id"],
                                Term: termsListResult[i]["Term"],
                                Description: termsListResult[i]["Description"],
                                NoOfDays: termsListResult[i]["NoOfDays"],
                                PaymentNoOfDays: termsListResult[i]["PaymentNoOfDays"],
                                CreatedByUserId: termsListResult[i]["CreatedByUserId"],
                                CreatedByUser: termsListResult[i]["CreatedByUser"],
                                CreatedDateTime: termsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: termsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: termsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: termsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return terms;
        }

        var cboNoOfDays;

        // allowance days
        function createCboPaymentNoOfDays() {
            var days = new Array();

            for (var i = 0; i <= 365; i++) {
                days[i] = i;
            }

            cboNoOfDays.dispose();
            cboNoOfDays = new wijmo.input.ComboBox('#cboNoOfDays', {
                itemsSource: days
            });
        }

        // add new Terms
        function btnAddTermsOnclick() {
            $("#TermsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredTerms').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveTerms").prop("disabled", false);
            $("#btnCloseTerms").prop("disabled", false);

            termId = 0;
            document.getElementById("termName").value = "NA";
            document.getElementById("termDescription").value = "NA";
            cboNoOfDays.selectedValue = "0";
        }

        // edit Terms
        function editTermsOnclick() {
            $("#TermsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredTerms').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveTerms").prop("disabled", false);
            $("#btnCloseTerms").prop("disabled", false);

            termsCollectionView.editItem(termsCollectionView.currentItem);
            var termCurrentEditItem = termsCollectionView.currentEditItem;

            termId = termCurrentEditItem.Id;
            document.getElementById("termName").value = termCurrentEditItem.Term;
            document.getElementById("termDescription").value = termCurrentEditItem.Description;
            cboNoOfDays.selectedValue = termCurrentEditItem.NoOfDays;
        }

        // form input validation
        function inputValidationForTerms() {
            var isValid = true;
            $('.requiredTerms').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Terms
        function saveTermsOnclick() {
            if (inputValidationForTerms()) {
                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveTerms").prop("disabled", true);
                $("#btnCloseTerms").prop("disabled", true);

                var termsObject = new Object();
                termsObject.Term = document.getElementById('termName').value;
                termsObject.Description = document.getElementById('termDescription').value;
                termsObject.NoOfDays = cboNoOfDays.selectedValue;
                var termData = JSON.stringify(termsObject);

                if (termId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/term/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#TermsEditDetailModal").modal("hide");

                                termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
                                termsCollectionView.canFilter = true;
                                termsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchTerms').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    termsCollectionView.refresh();
                                });

                                termsCollectionView.filter = function (item) {
                                    return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                termsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanTerms();
                                });

                                termsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateTermsStampSecurity();
                                });

                                // Flex Grid
                                termsFlexGrid.itemsSource = termsCollectionView;
                                termsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#TermsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveTerms").prop("disabled", false);
                                $("#btnCloseTerms").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/term/update/' + termId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#TermsEditDetailModal").modal("hide");

                                termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
                                termsCollectionView.canFilter = true;
                                termsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchTerms').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    termsCollectionView.refresh();
                                });

                                termsCollectionView.filter = function (item) {
                                    return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                termsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanTerms();
                                });

                                termsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateTermsStampSecurity();
                                });

                                // Flex Grid
                                termsFlexGrid.itemsSource = termsCollectionView;
                                termsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#TermsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveTerms").prop("disabled", false);
                                $("#btnCloseTerms").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#TermsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveTerms").prop("disabled", false);
                                $("#btnCloseTerms").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Terms
        function deleteTermsOnclick() {
            $("#deleteConfirmationTermsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteTerms").innerHTML = "Delete";
            $("#btnConfirmDeleteTerms").prop("disabled", false);
            $("#btnCloseDeleteTermsModal").prop("disabled", false);
        }
        function btnConfirmDeleteTermsOnclick() {
            document.getElementById("btnConfirmDeleteTerms").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteTerms").prop("disabled", true);
            $("#btnCloseDeleteTermsModal").prop("disabled", true);

            termsCollectionView.editItem(termsCollectionView.currentItem);
            var id = termsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/term/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationTermsModal').modal('hide');

                        termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
                        termsCollectionView.canFilter = true;
                        termsCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchTerms').keyup(function () {
                            filterText = this.value.toLowerCase();
                            termsCollectionView.refresh();
                        });

                        termsCollectionView.filter = function (item) {
                            return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        termsCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsLoanTerms();
                        });

                        termsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateTermsStampSecurity();
                        });

                        // Flex Grid
                        termsFlexGrid.itemsSource = termsCollectionView;
                        termsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationTermsModal').modal('hide');
                        $("#btnConfirmDeleteTerms").prop("disabled", false);
                        $("#btnCloseDeleteTermsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationTermsModal').modal('hide');
                        $("#btnConfirmDeleteTerms").prop("disabled", false);
                        $("#btnCloseDeleteTermsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateTermsStampSecurity() {
            var item = termsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsLoanTerms() {
            if (deductionsCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridTerms').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridTerms').style.display = 'block';
            btnCurrentPageGridTerms.innerHTML = (deductionsCollectionView.pageIndex + 1) + ' / ' + deductionsCollectionView.pageCount;
        }

        //  Terms flexgrid
        function createTermFlexGrid() {
            NProgress.start();
            toastrModification();

            termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
            termsCollectionView.canFilter = true;
            termsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchTerms').keyup(function () {
                filterText = this.value.toLowerCase();
                termsCollectionView.refresh();
            });

            termsCollectionView.filter = function (item) {
                return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            termsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanTerms();
            });

            termsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateTermsStampSecurity();
            });

            // Flex Grid
            termsFlexGrid = new wijmo.grid.FlexGrid('#TermsListFlexGrid');
            termsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Term",
                                "binding": "Term",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Days",
                                "binding": "NoOfDays",
                                "allowSorting": true,
                                "width": "1.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: termsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            termsFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridTerms = document.getElementById('btnMoveToFirstPageGridTerms');
            btnPreviousPageGridTerms = document.getElementById('btnMoveToPreviousPageGridTerms');
            btnNextPageGridTerms = document.getElementById('btnMoveToNextPageGridTerms');
            btnLastPageGridTerms = document.getElementById('btnMoveToLastPageGridTerms');
            btnCurrentPageGridTerms = document.getElementById('btnCurrentPageGridTerms');

            updateNavigateButtonsLoanTerms();

            btnFirstPageGridTerms.addEventListener('click', function () {
                termsCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanTerms();
            });
            btnPreviousPageGridTerms.addEventListener('click', function () {
                termsCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanTerms();
            });
            btnNextPageGridTerms.addEventListener('click', function () {
                termsCollectionView.moveToNextPage();
                updateNavigateButtonsLoanTerms();
            });
            btnLastPageGridTerms.addEventListener('click', function () {
                termsCollectionView.moveToLastPage();
                updateNavigateButtonsLoanTerms();
            });
        }

        // Expense Types tab
        $('#TermsTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#Deductions").hide();
            $("#Terms").show();
            $("#Penalties").hide();
            $("#Interests").hide();

            createTermFlexGrid();
            window.createTermFlexGrid = function () {
                return true;
            }

            termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
            termsCollectionView.canFilter = true;
            termsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchTerms').keyup(function () {
                filterText = this.value.toLowerCase();
                termsCollectionView.refresh();
            });

            termsCollectionView.filter = function (item) {
                return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            termsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanTerms();
            });

            termsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateTermsStampSecurity();
            });

            // Flex Grid
            termsFlexGrid.itemsSource = termsCollectionView;
            termsFlexGrid.trackChanges = true;
        });

        // get Penalties
        function getPenaltiesList() {
            var penalties = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/penalty/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (penaltiesListResult) {
                    if (penaltiesListResult.length > 0) {
                        for (i = 0; i < penaltiesListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            penalties.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editPenaltiesOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deletePenaltiesOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: penaltiesListResult[i]["Id"],
                                Penalty: penaltiesListResult[i]["Penalty"],
                                Description: penaltiesListResult[i]["Description"],
                                PenaltyAmount: penaltiesListResult[i]["PenaltyAmount"],
                                CreatedByUserId: penaltiesListResult[i]["CreatedByUserId"],
                                CreatedByUser: penaltiesListResult[i]["CreatedByUser"],
                                CreatedDateTime: penaltiesListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: penaltiesListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: penaltiesListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: penaltiesListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return penalties;
        }

        // add new Penalties
        function btnAddPenaltiesOnclick() {
            $("#PenaltiesEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredPenalties').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSavePenalties").prop("disabled", false);
            $("#btnClosePenalties").prop("disabled", false);

            penaltyId = 0;
            document.getElementById("penaltyName").value = "NA";
            document.getElementById("penaltyDescription").value = "NA";
            document.getElementById("penaltyAmount").value = 0;
        }

        // edit Penalties
        function editPenaltiesOnclick() {
            $("#PenaltiesEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredPenalties').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSavePenalties").prop("disabled", false);
            $("#btnClosePenalties").prop("disabled", false);

            penaltiesCollectionView.editItem(penaltiesCollectionView.currentItem);
            var penaltyCurrentEditItem = penaltiesCollectionView.currentEditItem;

            penaltyId = penaltyCurrentEditItem.Id;
            document.getElementById("penaltyName").value = penaltyCurrentEditItem.Penalty;
            document.getElementById("penaltyDescription").value = penaltyCurrentEditItem.Description;
            document.getElementById("penaltyAmount").value = penaltyCurrentEditItem.PenaltyAmount.toLocaleString();
        }

        // form input validation
        function inputValidationForPenalties() {
            var isValid = true;
            $('.requiredPenalties').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Penalties
        function savePenaltiesOnclick() {
            if (inputValidationForPenalties()) {
                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSavePenalties").prop("disabled", true);
                $("#btnClosePenalties").prop("disabled", true);

                var penaltiesObject = new Object();
                penaltiesObject.Penalty = document.getElementById('penaltyName').value;
                penaltiesObject.Description = document.getElementById('penaltyDescription').value;
                penaltiesObject.PenaltyAmount = document.getElementById('penaltyAmount').value;
                var penaltyData = JSON.stringify(penaltiesObject);
                if (penaltyId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/penalty/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: penaltyData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
                                penaltiesCollectionView.canFilter = true;
                                penaltiesCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchPenalties').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    penaltiesCollectionView.refresh();
                                });

                                penaltiesCollectionView.filter = function (item) {
                                    return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                penaltiesCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanPenalties();
                                });

                                penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updatePenaltiesStampSecurity();
                                });

                                // Flex Grid
                                penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
                                penaltiesFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSavePenalties").prop("disabled", false);
                                $("#btnClosePenalties").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/penalty/update/' + penaltyId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: penaltyData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
                                penaltiesCollectionView.canFilter = true;
                                penaltiesCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchPenalties').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    penaltiesCollectionView.refresh();
                                });

                                penaltiesCollectionView.filter = function (item) {
                                    return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                penaltiesCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsLoanPenalties();
                                });

                                penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updatePenaltiesStampSecurity();
                                });

                                // Flex Grid
                                penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
                                penaltiesFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSavePenalties").prop("disabled", false);
                                $("#btnClosePenalties").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSavePenalties").prop("disabled", false);
                                $("#btnClosePenalties").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Penalties
        function deletePenaltiesOnclick() {
            $("#deleteConfirmationPenaltiesModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeletePenalties").innerHTML = "Delete";
            $("#btnConfirmDeletePenalties").prop("disabled", false);
            $("#btnCloseDeletePenaltiesModal").prop("disabled", false);
        }
        function btnConfirmDeletePenaltiesOnclick() {
            document.getElementById("btnConfirmDeletePenalties").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeletePenalties").prop("disabled", true);
            $("#btnCloseDeletePenaltiesModal").prop("disabled", true);

            penaltiesCollectionView.editItem(penaltiesCollectionView.currentItem);
            var id = penaltiesCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/penalty/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationPenaltiesModal').modal('hide');

                        penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
                        penaltiesCollectionView.canFilter = true;
                        penaltiesCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchPenalties').keyup(function () {
                            filterText = this.value.toLowerCase();
                            penaltiesCollectionView.refresh();
                        });

                        penaltiesCollectionView.filter = function (item) {
                            return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        penaltiesCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsLoanPenalties();
                        });

                        penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                            updatePenaltiesStampSecurity();
                        });

                        // Flex Grid
                        penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
                        penaltiesFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationPenaltiesModal').modal('hide');
                        $("#btnConfirmDeletePenalties").prop("disabled", false);
                        $("#btnCloseDeletePenaltiesModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationPenaltiesModal').modal('hide');
                        $("#btnConfirmDeletePenalties").prop("disabled", false);
                        $("#btnCloseDeletePenaltiesModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updatePenaltiesStampSecurity() {
            var item = penaltiesCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsLoanPenalties() {
            if (penaltiesCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridPenalties').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridPenalties').style.display = 'block';
            btnCurrentPageGridPenalties.innerHTML = (penaltiesCollectionView.pageIndex + 1) + ' / ' + penaltiesCollectionView.pageCount;
        }

        //  Penalties flexgrid
        function createPenaltyFlexGrid() {
            NProgress.start();
            toastrModification();

            penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
            penaltiesCollectionView.canFilter = true;
            penaltiesCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchPenalties').keyup(function () {
                filterText = this.value.toLowerCase();
                penaltiesCollectionView.refresh();
            });

            penaltiesCollectionView.filter = function (item) {
                return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            penaltiesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanPenalties();
            });

            penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                updatePenaltiesStampSecurity();
            });

            // Flex Grid
            penaltiesFlexGrid = new wijmo.grid.FlexGrid('#PenaltiesListFlexGrid');
            penaltiesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Penalty",
                                "binding": "Penalty",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "Pen. Amount",
                                "binding": "PenaltyAmount",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: penaltiesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            penaltiesFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridPenalties = document.getElementById('btnMoveToFirstPageGridPenalties');
            btnPreviousPageGridPenalties = document.getElementById('btnMoveToPreviousPageGridPenalties');
            btnNextPageGridPenalties = document.getElementById('btnMoveToNextPageGridPenalties');
            btnLastPageGridPenalties = document.getElementById('btnMoveToLastPageGridPenalties');
            btnCurrentPageGridPenalties = document.getElementById('btnCurrentPageGridPenalties');

            updateNavigateButtonsLoanPenalties();

            btnFirstPageGridPenalties.addEventListener('click', function () {
                penaltiesCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanPenalties();
            });
            btnPreviousPageGridPenalties.addEventListener('click', function () {
                penaltiesCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanPenalties();
            });
            btnNextPageGridPenalties.addEventListener('click', function () {
                penaltiesCollectionView.moveToNextPage();
                updateNavigateButtonsLoanPenalties();
            });
            btnLastPageGridPenalties.addEventListener('click', function () {
                penaltiesCollectionView.moveToLastPage();
                updateNavigateButtonsLoanPenalties();
            });
        }

        // Penalty Types tab
        $('#PenaltiesTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#Deductions").hide();
            $("#Terms").hide();
            $("#Penalties").show();
            $("#Interests").hide();

            createPenaltyFlexGrid();
            window.createPenaltyFlexGrid = function () {
                return true;
            }

            penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
            penaltiesCollectionView.canFilter = true;
            penaltiesCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchPenalties').keyup(function () {
                filterText = this.value.toLowerCase();
                penaltiesCollectionView.refresh();
            });

            penaltiesCollectionView.filter = function (item) {
                return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            penaltiesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanPenalties();
            });

            penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                updatePenaltiesStampSecurity();
            });

            // Flex Grid
            penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
            penaltiesFlexGrid.trackChanges = true;
        });

        // get Interests
        function getInterestsList() {
            var interests = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/interest/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (interestsListResult) {
                    if (interestsListResult.length > 0) {
                        for (i = 0; i < interestsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            interests.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editInterestsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteInterestsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: interestsListResult[i]["Id"],
                                Interest: interestsListResult[i]["Interest"],
                                Description: interestsListResult[i]["Description"],
                                Rate: interestsListResult[i]["Rate"],
                                NoOfDays: interestsListResult[i]["NoOfDays"],
                                CreatedByUserId: interestsListResult[i]["CreatedByUserId"],
                                CreatedByUser: interestsListResult[i]["CreatedByUser"],
                                CreatedDateTime: interestsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: interestsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: interestsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: interestsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return interests;
        }

        // add new Interests
        function btnAddInterestsOnclick() {
            $("#InterestsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredInterests').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveInterests").prop("disabled", false);
            $("#btnCloseInterests").prop("disabled", false);

            interestId = 0;
            document.getElementById("interestName").value = "NA";
            document.getElementById("interestDescription").value = "NA";
            document.getElementById("interestRate").value = 0;
        }

        // edit Interests
        function editInterestsOnclick() {
            $("#InterestsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredInterests').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveInterests").prop("disabled", false);
            $("#btnCloseInterests").prop("disabled", false);

            interestsCollectionView.editItem(interestsCollectionView.currentItem);
            var interestCurrentEditItem = interestsCollectionView.currentEditItem;

            interestId = interestCurrentEditItem.Id;
            document.getElementById("interestName").value = interestCurrentEditItem.Interest;
            document.getElementById("interestDescription").value = interestCurrentEditItem.Description;
            document.getElementById("interestRate").value = interestCurrentEditItem.Rate.toLocaleString();
        }

        // form input validation
        function inputValidationForInterests() {
            var isValid = true;
            $('.requiredInterests').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Interests
        function saveInterestsOnclick() {
            if (inputValidationForInterests()) {
                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveInterests").prop("disabled", true);
                $("#btnCloseInterests").prop("disabled", true);

                var interestsObject = new Object();
                interestsObject.Interest = document.getElementById('interestName').value;
                interestsObject.Description = document.getElementById('interestDescription').value;
                interestsObject.Rate = document.getElementById('interestRate').value;
                var interestData = JSON.stringify(interestsObject);

                if (interestId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/interest/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: interestData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#InterestsEditDetailModal").modal("hide");

                                interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
                                interestsCollectionView.canFilter = true;
                                interestsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchInterests').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    interestsCollectionView.refresh();
                                });

                                interestsCollectionView.filter = function (item) {
                                    return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                interestsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsInterests();
                                });

                                interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateInterestsStampSecurity();
                                });

                                // Flex Grid
                                interestsFlexGrid.itemsSource = interestsCollectionView;
                                interestsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#InterestsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveInterests").prop("disabled", false);
                                $("#btnCloseInterests").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/interest/update/' + interestId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: interestData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#InterestsEditDetailModal").modal("hide");

                                interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
                                interestsCollectionView.canFilter = true;
                                interestsCollectionView.pageSize = 15;

                                var filterText = '';
                                $('#searchInterests').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    interestsCollectionView.refresh();
                                });

                                interestsCollectionView.filter = function (item) {
                                    return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                interestsCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsInterests();
                                });

                                interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateInterestsStampSecurity();
                                });

                                // Flex Grid
                                interestsFlexGrid.itemsSource = interestsCollectionView;
                                interestsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#InterestsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveInterests").prop("disabled", false);
                                $("#btnCloseInterests").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#InterestsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveInterests").prop("disabled", false);
                                $("#btnCloseInterests").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Interests
        function deleteInterestsOnclick() {
            $("#deleteConfirmationInterestsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteInterests").innerHTML = "Delete";
            $("#btnConfirmDeleteInterests").prop("disabled", false);
            $("#btnCloseDeleteInterestsModal").prop("disabled", false);
        }
        function btnConfirmDeleteInterestsOnclick() {
            document.getElementById("btnConfirmDeleteInterests").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteInterests").prop("disabled", true);
            $("#btnCloseDeleteInterestsModal").prop("disabled", true);

            interestsCollectionView.editItem(interestsCollectionView.currentItem);
            var id = interestsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/interest/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationInterestsModal').modal('hide');

                        interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
                        interestsCollectionView.canFilter = true;
                        interestsCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchInterests').keyup(function () {
                            filterText = this.value.toLowerCase();
                            interestsCollectionView.refresh();
                        });

                        interestsCollectionView.filter = function (item) {
                            return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        interestsCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsInterests();
                        });

                        interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateInterestsStampSecurity();
                        });

                        // Flex Grid
                        interestsFlexGrid.itemsSource = interestsCollectionView;
                        interestsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationInterestsModal').modal('hide');
                        $("#btnConfirmDeleteInterests").prop("disabled", false);
                        $("#btnCloseDeleteInterestsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationInterestsModal').modal('hide');
                        $("#btnConfirmDeleteInterests").prop("disabled", false);
                        $("#btnCloseDeleteInterestsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateInterestsStampSecurity() {
            var item = interestsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsInterests() {
            if (interestsCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridInterests').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridInterests').style.display = 'block';
            btnCurrentPageGridInterests.innerHTML = (interestsCollectionView.pageIndex + 1) + ' / ' + interestsCollectionView.pageCount;
        }

        //  Interests flexgrid
        function createInterestFlexGrid() {
            NProgress.start();
            toastrModification();

            interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
            interestsCollectionView.canFilter = true;
            interestsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchInterests').keyup(function () {
                filterText = this.value.toLowerCase();
                interestsCollectionView.refresh();
            });

            interestsCollectionView.filter = function (item) {
                return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            interestsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInterests();
            });

            interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateInterestsStampSecurity();
            });

            // Flex Grid
            interestsFlexGrid = new wijmo.grid.FlexGrid('#InterestsListFlexGrid');
            interestsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Interest",
                                "binding": "Interest",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "Rate",
                                "binding": "Rate",
                                "allowSorting": true,
                                "width": "1.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: interestsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            interestsFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridInterests = document.getElementById('btnMoveToFirstPageGridInterests');
            btnPreviousPageGridInterests = document.getElementById('btnMoveToPreviousPageGridInterests');
            btnNextPageGridInterests = document.getElementById('btnMoveToNextPageGridInterests');
            btnLastPageGridInterests = document.getElementById('btnMoveToLastPageGridInterests');
            btnCurrentPageGridInterests = document.getElementById('btnCurrentPageGridInterests');

            updateNavigateButtonsInterests();

            btnFirstPageGridInterests.addEventListener('click', function () {
                interestsCollectionView.moveToFirstPage();
                updateNavigateButtonsInterests();
            });
            btnPreviousPageGridInterests.addEventListener('click', function () {
                interestsCollectionView.moveToPreviousPage();
                updateNavigateButtonsInterests();
            });
            btnNextPageGridInterests.addEventListener('click', function () {
                interestsCollectionView.moveToNextPage();
                updateNavigateButtonsInterests();
            });
            btnLastPageGridInterests.addEventListener('click', function () {
                interestsCollectionView.moveToLastPage();
                updateNavigateButtonsInterests();
            });
        }

        // Interest Types tab
        $('#InterestsTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#Deductions").hide();
            $("#Terms").hide();
            $("#Interests").show();
            $("#Penalties").hide();

            createInterestFlexGrid();
            window.createInterestFlexGrid = function () {
                return true;
            }

            interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
            interestsCollectionView.canFilter = true;
            interestsCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchInterests').keyup(function () {
                filterText = this.value.toLowerCase();
                interestsCollectionView.refresh();
            });

            interestsCollectionView.filter = function (item) {
                return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            interestsCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsInterests();
            });

            interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateInterestsStampSecurity();
            });

            // Flex Grid
            interestsFlexGrid.itemsSource = interestsCollectionView;
            interestsFlexGrid.trackChanges = true;
        });

        // ready function
        window.onload = function () {
            NProgress.start();
            toastrModification();
            createLoanTypeFlexGrid();

            cboNoOfDays = new wijmo.input.ComboBox('#cboNoOfDays');

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }

            createCboPaymentNoOfDays();
        }

        //$('#deductionIsPercentage').change(function () {
        //    if ($(this).is(":checked")) {
        //        document.getElementById("deductionPercentageRate").disabled = false;
        //        document.getElementById("deductionAmount").disabled = true;
        //        document.getElementById("deductionAmount").value = 0;
        //    } else {
        //        document.getElementById("deductionPercentageRate").disabled = true;
        //        document.getElementById("deductionAmount").disabled = false;
        //        document.getElementById("deductionPercentageRate").value = 0;
        //    }
        //});
    </script>
</body>
</html>