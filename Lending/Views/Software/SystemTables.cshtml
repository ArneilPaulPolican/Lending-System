<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>System Tables</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Header -->
    @Html.Partial("HomeHeader")

    <section class="software-section">
        <div class="container">
            @Html.Partial("SoftwareMenu")
            <br /><br />
            <div class="panel panel-default">
                <div class="panel-heading">
                    <table style="width: 100%">
                        <tr>
                            <td>
                                <h4><i class="fa fa-table fa-fw"></i> System Tables</h4>
                            </td>
                            <td align="right">
                                <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software'">
                                    <i class="fa fa-close fa-fw"></i> Close
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-body">
                    <ul id="myTab" class="nav nav-tabs">
                        <li class="active">
                            <a href="#LoanTypes" data-toggle="tab" id="LoanTypesTab">
                                Loan Types
                            </a>
                        </li>
                        <li>
                            <a href="#Requirements" data-toggle="tab" id="RequirementsTab">
                                Requirements
                            </a>
                        </li>
                        <li>
                            <a href="#Terms" data-toggle="tab" id="TermsTab">
                                Terms
                            </a>
                        </li>
                        <li>
                            <a href="#Penalties" data-toggle="tab" id="PenaltiesTab">
                                Penalties
                            </a>
                        </li>
                        <li>
                            <a href="#Interests" data-toggle="tab" id="InterestsTab">
                                Interests & Rates
                            </a>
                        </li>
                        <li>
                            <a href="#ExpenseTypes" data-toggle="tab" id="expenseTypesTab">
                                Expense Types
                            </a>
                        </li>
                        <li>
                            <a href="#Accounts" data-toggle="tab" id="accountTab">
                                Accounts
                            </a>
                        </li>
                    </ul>
                    <br />
                    <div id="myTabContent" class="tab-content">
                        <div class="tab-pane fade in active" id="LoanTypes">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchLoanTypes" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddLoanTypes" onclick="btnAddLoanTypesOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="LoanTypesListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="Requirements">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchRequirements" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddRequirements" onclick="btnAddRequirementsOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="RequirementsListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="Terms">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchTerms" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddTerms" onclick="btnAddTermsOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="TermsListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="Penalties">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchPenalties" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddPenalties" onclick="btnAddPenaltiesOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="PenaltiesListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>

                        <div class="tab-pane fade" id="Interests">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchInterests" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddInterests" onclick="btnAddInterestsOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="InterestsListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>

                        <div class="tab-pane fade" id="ExpenseTypes">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchExpenseTypes" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddExpenseTypes" onclick="btnAddExpenseTypesOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="ExpenseTypesListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="Accounts">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                <div class="input-group">
                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                    <input type="text" id="searchAccounts" class="form-control" placeholder="Search" />
                                                </div>
                                            </td>
                                            <td>&nbsp;&nbsp;&nbsp;</td>
                                            <td align="right">
                                                <button class="btn btn-primary" id="btnAddAccounts" onclick="btnAddAccountsOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="AccountsListFlexGrid" class="grid"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    User security stamp
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <p>Created by:</p>
                            <div style="padding-left: 10px;">
                                <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                <br />
                                <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                            </div>
                            <br />
                        </div>
                        <div class="col-md-6">
                            <p>Updated by:</p>
                            <div style="padding-left: 10px;">
                                <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                <br />
                                <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                            </div>
                            <br />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Footer -->
    @Html.Partial("HomeFooter")

    <!-- LoanTypes Detail Modal -->
    <div class="modal fade" id="LoanTypesEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Loan Type Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>LoanType</label><br />
                        <input type="text" class="form-control requiredLoanTypes" id="loanTypeName" placeholder="LoanType" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea class="form-control requiredLoanTypes" rows="5" id="loanTypeDescription" placeholder="Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveLoanTypes" onclick="saveLoanTypesOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseLoanTypes" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation LoanTypes modal -->
    <div class="modal fade" id="deleteConfirmationLoanTypesModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Loan Type</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this LoanType?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteLoanTypes" onclick="btnConfirmDeleteLoanTypesOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteLoanTypesModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Requirements Detail Modal -->
    <div class="modal fade" id="RequirementsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Requirement Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Requirement</label><br />
                        <input type="text" class="form-control requiredRequirements" id="requirementName" placeholder="Requirement" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea class="form-control requiredRequirements" rows="5" id="requirementDescription" placeholder="Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveRequirements" onclick="saveRequirementsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseRequirements" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Requirements modal -->
    <div class="modal fade" id="deleteConfirmationRequirementsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Requirements</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Requirement?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteRequirements" onclick="btnConfirmDeleteRequirementsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteRequirementsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Accounts Detail Modal -->
    <div class="modal fade" id="AccountsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Account Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Account</label><br />
                        <input type="text" class="form-control requiredAccounts" id="accountName" placeholder="Requirement" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea class="form-control requiredAccounts" rows="5" id="accountDescription" placeholder="Description"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Transaction Type</label><br />
                        <div id="transactionType"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveAccounts" onclick="saveAccountsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseAccounts" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation  Accounts modal -->
    <div class="modal fade" id="deleteConfirmationAccountsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Accounts</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Account?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteAccounts" onclick="btnConfirmDeleteAccountsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteAccountsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Expense Type Detail Modal -->
    <div class="modal fade" id="expenseTypeEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Expense Type Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>ExpenseType</label><br />
                        <input type="text" class="form-control requiredExpenseTypes" id="expenseTypeName" placeholder="Expense Type" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea type="text" rows="5" class="form-control requiredExpenseTypes" id="expenseTypeDescription" placeholder="Description"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveExpenseTypes" onclick="saveExpenseTypesOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseExpenseTypes" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Expense Type modal -->
    <div class="modal fade" id="deleteConfirmationExpenseTypesModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Expense Type</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Expense Type?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteExpenseTypes" onclick="btnConfirmDeleteExpenseTypesOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteExpenseTypesModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Terms Detail Modal -->
    <div class="modal fade" id="TermsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Term Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Term</label><br />
                        <input type="text" class="form-control requiredTerms" id="termName" placeholder="LoanType" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea class="form-control requiredTerms" rows="5" id="termDescription" placeholder="Description"></textarea>
                    </div>
                    <div class="form-group">
                        <label>Number of Days</label><br />
                        <input type="text" class="form-control numberField requiredTerms" id="termNoOfDays" placeholder="0.00" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveTerms" onclick="saveTermsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseTerms" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Terms modal -->
    <div class="modal fade" id="deleteConfirmationTermsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Term</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Term?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteTerms" onclick="btnConfirmDeleteTermsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteTermsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Penalties Detail Modal -->
    <div class="modal fade" id="PenaltiesEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Penalty Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Penalty Name</label><br />
                        <input type="text" class="form-control requiredPenalties" id="penaltyName" placeholder="LoanType" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea class="form-control requiredPenalties" rows="5" id="penaltyDescription" placeholder="Description"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Every Absent Pen. Amount</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredPenalties" id="penaltyAmount" placeholder="0.00" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label>No. of Absent Limit</label><br />
                                <input type="text" class="form-control numberField requiredPenalties" id="penaltyNoOfAbsentLimit" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Pen. Amount over No. of Absent Limit</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredPenalties" id="penaltyAmontOverNoOfAbsentLimit" placeholder="0.00" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label>Loan Amount</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredPenalties" id="penaltyLoanAmount" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSavePenalties" onclick="savePenaltiesOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnClosePenalties" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Penalties modal -->
    <div class="modal fade" id="deleteConfirmationPenaltiesModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Penalty</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Penalty?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeletePenalties" onclick="btnConfirmDeletePenaltiesOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeletePenaltiesModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Interests Detail Modal -->
    <div class="modal fade" id="InterestsEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Interest Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Interest Name</label><br />
                        <input type="text" class="form-control requiredInterests" id="interestName" placeholder="LoanType" />
                    </div>
                    <div class="form-group">
                        <label>Description</label><br />
                        <textarea class="form-control requiredInterests" rows="5" id="interestDescription" placeholder="Description"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Rate</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredInterests" id="interestRate" placeholder="0.00" />
                                </div>
                            </div>
                            <div class="form-group">
                                <label>No. of Days Limit</label><br />
                                <input type="text" class="form-control numberField requiredInterests" id="interestNoOfDays" placeholder="0.00" />
                            </div>
                        </div>
                        <div class="col-md-6"></div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveInterests" onclick="saveInterestsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseInterests" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Interests modal -->
    <div class="modal fade" id="deleteConfirmationInterestsModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Interest</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Interest?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteInterests" onclick="btnConfirmDeleteInterestsOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteInterestsModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var loanTypesCollectionView;
        var loanTypesFlexGrid;
        var loanTypeId = 0;
        var requirementsCollectionView;
        var requirementsFlexGrid;
        var requirementId = 0;
        var accountsCollectionView;
        var accountsFlexGrid;
        var accountId = 0;
        var cboArea;
        var expenseTypesCollectionView;
        var expenseTypesFlexGrid;
        var termsCollectionView;
        var termsFlexGrid;
        var termId = 0;
        var penaltiesCollectionView;
        var penaltiesFlexGrid;
        var penaltyId = 0;
        var interestsCollectionView;
        var interestsFlexGrid;
        var interestId = 0;

        // get Accounts
        function getAccountsList() {
            var Accounts = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/account/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (AccountsListResult) {
                    if (AccountsListResult.length > 0) {
                        for (i = 0; i < AccountsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            Accounts.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editAccountsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteAccountsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: AccountsListResult[i]["Id"],
                                Account: AccountsListResult[i]["Account"],
                                Description: AccountsListResult[i]["Description"],
                                AccountTransactionTypeId: AccountsListResult[i]["AccountTransactionTypeId"],
                                AccountTransactionType: AccountsListResult[i]["AccountTransactionType"],
                                CreatedByUserId: AccountsListResult[i]["CreatedByUserId"],
                                CreatedByUser: AccountsListResult[i]["CreatedByUser"],
                                CreatedDateTime: AccountsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: AccountsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: AccountsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: AccountsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return Accounts;
        }

        var cboTransactionType;

        // get transaction
        function getTransactionType() {
            var transactionTypeArray = new Array();
            $.ajax({
                url: '/api/transactionType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (transactionTypeResults) {
                    var disabled = true;
                    if (transactionTypeResults.length > 0) {
                        for (i = 0; i < transactionTypeResults.length; i++) {
                            transactionTypeArray.push({
                                Id: transactionTypeResults[i]["Id"],
                                TransactionType: transactionTypeResults[i]["TransactionType"],
                            });
                        }

                        disabled = false;
                    }

                    cboTransactionType.dispose();
                    cboTransactionType = new wijmo.input.ComboBox('#transactionType', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: transactionTypeArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "TransactionType",
                        selectedValuePath: "TransactionType"
                    });
                }
            });
        }

        // add new Accounts
        function btnAddAccountsOnclick() {
            $("#AccountsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredAccounts').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            getTransactionType();

            document.getElementById("btnSaveAccounts").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveAccounts").prop("disabled", false);
            $("#btnCloseAccounts").prop("disabled", false);

            accountId = 0;
            document.getElementById("accountName").value = "NA";
            document.getElementById("accountDescription").value = "NA";
        }

        // edit   Accounts
        function editAccountsOnclick() {
            $("#AccountsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredAccounts').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveAccounts").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveAccounts").prop("disabled", false);
            $("#btnCloseAccounts").prop("disabled", false);

            accountsCollectionView.editItem(accountsCollectionView.currentItem);
            var accountCurrentEditItem = accountsCollectionView.currentEditItem;

            accountId = accountCurrentEditItem.Id;
            document.getElementById("accountName").value = accountCurrentEditItem.Account;
            document.getElementById("accountDescription").value = accountCurrentEditItem.Description;
            cboTransactionType.selectedValue = accountCurrentEditItem.AccountTransactionType;
        }

        // form input validation
        function inputValidationForAccounts() {
            var isValid = true;
            $('.requiredAccounts').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Accounts
        function saveAccountsOnclick() {
            if (inputValidationForAccounts()) {
                document.getElementById("btnSaveAccounts").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveAccounts").prop("disabled", true);
                $("#btnCloseAccounts").prop("disabled", true);

                var AccountsObject = new Object();
                AccountsObject.Account = document.getElementById('accountName').value;
                AccountsObject.Description = document.getElementById('accountDescription').value;
                AccountsObject.AccountTransactionTypeId = cboTransactionType.selectedItem["Id"];
                var AccountsData = JSON.stringify(AccountsObject);

                console.log(cboTransactionType.selectedItem["Id"]);

                if (accountId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/account/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: AccountsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#AccountsEditDetailModal").modal("hide");

                                accountsCollectionView = new wijmo.collections.CollectionView(getAccountsList());
                                accountsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchAccounts').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    accountsCollectionView.refresh();
                                });

                                accountsCollectionView.filter = function (item) {
                                    return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                accountsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateAccountsStampSecurity();
                                });

                                // Flex Grid
                                accountsFlexGrid.itemsSource = accountsCollectionView;
                                accountsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#AccountsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveAccounts").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveAccounts").prop("disabled", false);
                                $("#btnCloseAccounts").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/account/update/' + accountId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: AccountsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#AccountsEditDetailModal").modal("hide");

                                accountsCollectionView = new wijmo.collections.CollectionView(getAccountsList());
                                accountsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchAccounts').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    accountsCollectionView.refresh();
                                });

                                accountsCollectionView.filter = function (item) {
                                    return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                accountsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateAccountsStampSecurity();
                                });

                                // Flex Grid
                                accountsFlexGrid.itemsSource = accountsCollectionView;
                                accountsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#AccountsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveAccounts").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveAccounts").prop("disabled", false);
                                $("#btnCloseAccounts").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#AccountsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveAccounts").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveAccounts").prop("disabled", false);
                                $("#btnCloseAccounts").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete   Accounts
        function deleteAccountsOnclick() {
            $("#deleteConfirmationAccountsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteAccounts").innerHTML = "Delete";
            $("#btnConfirmDeleteAccounts").prop("disabled", false);
            $("#btnCloseDeleteAccountsModal").prop("disabled", false);
        }
        function btnConfirmDeleteAccountsOnclick() {
            document.getElementById("btnConfirmDeleteAccounts").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteAccounts").prop("disabled", true);
            $("#btnCloseDeleteAccountsModal").prop("disabled", true);

            accountsCollectionView.editItem(accountsCollectionView.currentItem);
            var id = accountsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/account/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationAccountsModal').modal('hide');

                        accountsCollectionView = new wijmo.collections.CollectionView(getAccountsList());
                        accountsCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchAccounts').keyup(function () {
                            filterText = this.value.toLowerCase();
                            accountsCollectionView.refresh();
                        });

                        accountsCollectionView.filter = function (item) {
                            return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        accountsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateAccountsStampSecurity();
                        });

                        // Flex Grid
                        accountsFlexGrid.itemsSource = accountsCollectionView;
                        accountsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationAccountsModal').modal('hide');
                        $("#btnConfirmDeleteAccounts").prop("disabled", false);
                        $("#btnCloseDeleteAccountsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationAccountsModal').modal('hide');
                        $("#btnConfirmDeleteAccounts").prop("disabled", false);
                        $("#btnCloseDeleteAccountsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateAccountsStampSecurity() {
            var item = accountsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        //   Accounts flexgrid
        function createAccountFlexGrid() {
            NProgress.start();
            toastrModification();

            accountsCollectionView = new wijmo.collections.CollectionView(getAccountsList());
            accountsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchAccounts').keyup(function () {
                filterText = this.value.toLowerCase();
                accountsCollectionView.refresh();
            });

            accountsCollectionView.filter = function (item) {
                return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            accountsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateAccountsStampSecurity();
            });

            // Flex Grid
            accountsFlexGrid = new wijmo.grid.FlexGrid('#AccountsListFlexGrid');
            accountsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Account",
                                "binding": "Account",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "Transaction",
                                "binding": "AccountTransactionType",
                                "allowSorting": true,
                                "width": "2*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: accountsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            accountsFlexGrid.trackChanges = true;
        }

        //   Accounts tab
        $('#accountTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").show();
            $("#ExpenseTypes").hide();
            $("#LoanTypes").hide();
            $("#Terms").hide();
            $("#Penalties").hide();
            $("#Interests").hide();

            createAccountFlexGrid();
            window.createAccountFlexGrid = function () {
                return true;
            }

            accountsCollectionView = new wijmo.collections.CollectionView(getAccountsList());
            accountsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchAccounts').keyup(function () {
                filterText = this.value.toLowerCase();
                accountsCollectionView.refresh();
            });

            accountsCollectionView.filter = function (item) {
                return !filterText || (item.Account.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            accountsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateAccountsStampSecurity();
            });

            // Flex Grid
            accountsFlexGrid.itemsSource = accountsCollectionView;
            accountsFlexGrid.trackChanges = true;
        });

        // get Expense Types
        function getExpenseTypesList() {
            var expenseTypes = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/expenseType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (expenseTypesListResult) {
                    if (expenseTypesListResult.length > 0) {
                        for (i = 0; i < expenseTypesListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            expenseTypes.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editExpenseTypesOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteExpenseTypesOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: expenseTypesListResult[i]["Id"],
                                ExpenseType: expenseTypesListResult[i]["ExpenseType"],
                                Description: expenseTypesListResult[i]["Description"],
                                CreatedByUserId: expenseTypesListResult[i]["CreatedByUserId"],
                                CreatedByUser: expenseTypesListResult[i]["CreatedByUser"],
                                CreatedDateTime: expenseTypesListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: expenseTypesListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: expenseTypesListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: expenseTypesListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return expenseTypes;
        }

        // add new Expense types
        function btnAddExpenseTypesOnclick() {
            $("#expenseTypeEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredExpenseTypes').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveExpenseTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveExpenseTypes").prop("disabled", false);
            $("#btnCloseExpenseTypes").prop("disabled", false);

            expenseTypeId = 0;
            document.getElementById("expenseTypeName").value = "NA";
            document.getElementById("expenseTypeDescription").value = "NA";
        }

        // edit Expense Types
        function editExpenseTypesOnclick() {
            $("#expenseTypeEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredExpenseTypes').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveExpenseTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveExpenseTypes").prop("disabled", false);
            $("#btnCloseExpenseTypes").prop("disabled", false);

            expenseTypesCollectionView.editItem(expenseTypesCollectionView.currentItem);
            var expenseTypeCurrentEditItem = expenseTypesCollectionView.currentEditItem;

            expenseTypeId = expenseTypeCurrentEditItem.Id;
            document.getElementById("expenseTypeName").value = expenseTypeCurrentEditItem.ExpenseType;
            document.getElementById("expenseTypeDescription").value = expenseTypeCurrentEditItem.Description;
        }

        // form input validation
        function inputValidationForExpenseTypes() {
            var isValid = true;
            $('.requiredExpenseTypes').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Expense Types
        function saveExpenseTypesOnclick() {
            if (inputValidationForExpenseTypes()) {
                document.getElementById("btnSaveExpenseTypes").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveExpenseTypes").prop("disabled", true);
                $("#btnCloseExpenseTypes").prop("disabled", true);

                var ExpenseTypesObject = new Object();
                ExpenseTypesObject.ExpenseType = document.getElementById('expenseTypeName').value;
                ExpenseTypesObject.Description = document.getElementById('expenseTypeDescription').value;
                var ExpenseTypesData = JSON.stringify(ExpenseTypesObject);

                if (expenseTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/expenseType/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: ExpenseTypesData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#expenseTypeEditDetailModal").modal("hide");

                                expenseTypesCollectionView = new wijmo.collections.CollectionView(getExpenseTypesList());
                                expenseTypesCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchExpenseTypes').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    expenseTypesCollectionView.refresh();
                                });

                                expenseTypesCollectionView.filter = function (item) {
                                    return !filterText || (item.ExpenseType.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                expenseTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateExpenseTypesStampSecurity();
                                });

                                // Flex Grid
                                expenseTypesFlexGrid.itemsSource = expenseTypesCollectionView;
                                expenseTypesFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#expenseTypeEditDetailModal").modal("hide");

                                document.getElementById("btnSaveExpenseTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveExpenseTypes").prop("disabled", false);
                                $("#btnCloseExpenseTypes").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/expenseType/update/' + expenseTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: ExpenseTypesData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#expenseTypeEditDetailModal").modal("hide");

                                expenseTypesCollectionView = new wijmo.collections.CollectionView(getExpenseTypesList());
                                expenseTypesCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchExpenseTypes').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    expenseTypesCollectionView.refresh();
                                });

                                expenseTypesCollectionView.filter = function (item) {
                                    return !filterText || (item.ExpenseType.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                expenseTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateExpenseTypesStampSecurity();
                                });

                                // Flex Grid
                                expenseTypesFlexGrid.itemsSource = expenseTypesCollectionView;
                                expenseTypesFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#expenseTypeEditDetailModal").modal("hide");

                                document.getElementById("btnSaveExpenseTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveExpenseTypes").prop("disabled", false);
                                $("#btnCloseExpenseTypes").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#expenseTypeEditDetailModal").modal("hide");

                                document.getElementById("btnSaveExpenseTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveExpenseTypes").prop("disabled", false);
                                $("#btnCloseExpenseTypes").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Expense Types
        function deleteExpenseTypesOnclick() {
            $("#deleteConfirmationExpenseTypesModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteExpenseTypes").innerHTML = "Delete";
            $("#btnConfirmDeleteExpenseTypes").prop("disabled", false);
            $("#btnCloseDeleteExpenseTypesModal").prop("disabled", false);
        }
        function btnConfirmDeleteExpenseTypesOnclick() {
            document.getElementById("btnConfirmDeleteExpenseTypes").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteExpenseTypes").prop("disabled", true);
            $("#btnCloseDeleteExpenseTypesModal").prop("disabled", true);

            expenseTypesCollectionView.editItem(expenseTypesCollectionView.currentItem);
            var id = expenseTypesCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/expenseType/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationExpenseTypesModal').modal('hide');

                        expenseTypesCollectionView = new wijmo.collections.CollectionView(getExpenseTypesList());
                        expenseTypesCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchExpenseTypes').keyup(function () {
                            filterText = this.value.toLowerCase();
                            expenseTypesCollectionView.refresh();
                        });

                        expenseTypesCollectionView.filter = function (item) {
                            return !filterText || (item.ExpenseType.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        expenseTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateExpenseTypesStampSecurity();
                        });

                        // Flex Grid
                        expenseTypesFlexGrid.itemsSource = expenseTypesCollectionView;
                        expenseTypesFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationExpenseTypesModal').modal('hide');
                        $("#btnConfirmDeleteExpenseTypes").prop("disabled", false);
                        $("#btnCloseDeleteExpenseTypesModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationExpenseTypesModal').modal('hide');
                        $("#btnConfirmDeleteExpenseTypes").prop("disabled", false);
                        $("#btnCloseDeleteExpenseTypesModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateExpenseTypesStampSecurity() {
            var item = expenseTypesCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Expense Types flexgrid
        function createExpenseTypeFlexGrid() {
            NProgress.start();
            toastrModification();

            expenseTypesCollectionView = new wijmo.collections.CollectionView(getExpenseTypesList());
            expenseTypesCollectionView.canFilter = true;

            var filterText = '';
            $('#searchExpenseTypes').keyup(function () {
                filterText = this.value.toLowerCase();
                expenseTypesCollectionView.refresh();
            });

            expenseTypesCollectionView.filter = function (item) {
                return !filterText || (item.ExpenseType.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            expenseTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                updateExpenseTypesStampSecurity();
            });

            // Flex Grid
            expenseTypesFlexGrid = new wijmo.grid.FlexGrid('#ExpenseTypesListFlexGrid');
            expenseTypesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "ExpenseType",
                                "binding": "ExpenseType",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: expenseTypesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            expenseTypesFlexGrid.trackChanges = true;
        }

        // Expense Types tab
        $('#expenseTypesTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").show();
            $("#LoanTypes").hide();
            $("#Terms").hide();
            $("#Penalties").hide();
            $("#Interests").hide();

            createExpenseTypeFlexGrid();
            window.createExpenseTypeFlexGrid = function () {
                return true;
            }

            expenseTypesCollectionView = new wijmo.collections.CollectionView(getExpenseTypesList());
            expenseTypesCollectionView.canFilter = true;

            var filterText = '';
            $('#searchExpenseTypes').keyup(function () {
                filterText = this.value.toLowerCase();
                expenseTypesCollectionView.refresh();
            });

            expenseTypesCollectionView.filter = function (item) {
                return !filterText || (item.ExpenseType.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            expenseTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                updateExpenseTypesStampSecurity();
            });

            // Flex Grid
            expenseTypesFlexGrid.itemsSource = expenseTypesCollectionView;
            expenseTypesFlexGrid.trackChanges = true;
        });

        // get Requirements
        function getRequirementsList() {
            var requirements = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/requirements/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (requirementsListResult) {
                    if (requirementsListResult.length > 0) {
                        for (i = 0; i < requirementsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            requirements.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editRequirementsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteRequirementsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: requirementsListResult[i]["Id"],
                                Requirement: requirementsListResult[i]["Requirement"],
                                Description: requirementsListResult[i]["Description"],
                                CreatedByUserId: requirementsListResult[i]["CreatedByUserId"],
                                CreatedByUser: requirementsListResult[i]["CreatedByUser"],
                                CreatedDateTime: requirementsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: requirementsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: requirementsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: requirementsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return requirements;
        }

        // add new   Requirements
        function btnAddRequirementsOnclick() {
            $("#RequirementsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredRequirements').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveRequirements").prop("disabled", false);
            $("#btnCloseRequirements").prop("disabled", false);

            requirementId = 0;
            document.getElementById("requirementName").value = "NA";
            document.getElementById("requirementDescription").value = "NA";
        }

        // edit   Requirements
        function editRequirementsOnclick() {
            $("#RequirementsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredRequirements').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveRequirements").prop("disabled", false);
            $("#btnCloseRequirements").prop("disabled", false);

            requirementsCollectionView.editItem(requirementsCollectionView.currentItem);
            var requirementCurrentEditItem = requirementsCollectionView.currentEditItem;

            requirementId = requirementCurrentEditItem.Id;
            document.getElementById("requirementName").value = requirementCurrentEditItem.Requirement;
            document.getElementById("requirementDescription").value = requirementCurrentEditItem.Description;
        }

        // form input validation
        function inputValidationForRequirements() {
            var isValid = true;
            $('.requiredRequirements').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save   Requirements
        function saveRequirementsOnclick() {
            if (inputValidationForRequirements()) {
                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveRequirements").prop("disabled", true);
                $("#btnCloseRequirements").prop("disabled", true);

                var RequirementsObject = new Object();
                RequirementsObject.Requirement = document.getElementById('requirementName').value;
                RequirementsObject.Description = document.getElementById('requirementDescription').value;
                var RequirementsData = JSON.stringify(RequirementsObject);

                if (requirementId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/Requirements/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: RequirementsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#RequirementsEditDetailModal").modal("hide");

                                requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
                                requirementsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchRequirements').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    requirementsCollectionView.refresh();
                                });

                                requirementsCollectionView.filter = function (item) {
                                    return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateRequirementsStampSecurity();
                                });

                                // Flex Grid
                                requirementsFlexGrid.itemsSource = requirementsCollectionView;
                                requirementsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#RequirementsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveRequirements").prop("disabled", false);
                                $("#btnCloseRequirements").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/Requirements/update/' + requirementId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: RequirementsData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#RequirementsEditDetailModal").modal("hide");

                                requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
                                requirementsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchRequirements').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    requirementsCollectionView.refresh();
                                });

                                requirementsCollectionView.filter = function (item) {
                                    return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateRequirementsStampSecurity();
                                });

                                // Flex Grid
                                requirementsFlexGrid.itemsSource = requirementsCollectionView;
                                requirementsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#RequirementsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveRequirements").prop("disabled", false);
                                $("#btnCloseRequirements").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#RequirementsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveRequirements").prop("disabled", false);
                                $("#btnCloseRequirements").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete   Requirements
        function deleteRequirementsOnclick() {
            $("#deleteConfirmationRequirementsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteRequirements").innerHTML = "Delete";
            $("#btnConfirmDeleteRequirements").prop("disabled", false);
            $("#btnCloseDeleteRequirementsModal").prop("disabled", false);
        }
        function btnConfirmDeleteRequirementsOnclick() {
            document.getElementById("btnConfirmDeleteRequirements").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteRequirements").prop("disabled", true);
            $("#btnCloseDeleteRequirementsModal").prop("disabled", true);

            requirementsCollectionView.editItem(requirementsCollectionView.currentItem);
            var id = requirementsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/Requirements/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationRequirementsModal').modal('hide');

                        requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
                        requirementsCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchRequirements').keyup(function () {
                            filterText = this.value.toLowerCase();
                            requirementsCollectionView.refresh();
                        });

                        requirementsCollectionView.filter = function (item) {
                            return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateRequirementsStampSecurity();
                        });

                        // Flex Grid
                        requirementsFlexGrid.itemsSource = requirementsCollectionView;
                        requirementsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationRequirementsModal').modal('hide');
                        $("#btnConfirmDeleteRequirements").prop("disabled", false);
                        $("#btnCloseDeleteRequirementsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationRequirementsModal').modal('hide');
                        $("#btnConfirmDeleteRequirements").prop("disabled", false);
                        $("#btnCloseDeleteRequirementsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateRequirementsStampSecurity() {
            var item = requirementsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        //   Requirements flexgrid
        function createRequirementFlexGrid() {
            NProgress.start();
            toastrModification();

            requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
            requirementsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchRequirements').keyup(function () {
                filterText = this.value.toLowerCase();
                requirementsCollectionView.refresh();
            });

            requirementsCollectionView.filter = function (item) {
                return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateRequirementsStampSecurity();
            });

            // Flex Grid
            requirementsFlexGrid = new wijmo.grid.FlexGrid('#RequirementsListFlexGrid');
            requirementsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Requirement",
                                "binding": "Requirement",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: requirementsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            requirementsFlexGrid.trackChanges = true;
        }

        //   Requirements tab
        $('#RequirementsTab').click(function () {
            NProgress.start();
            $("#Requirements").show();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#LoanTypes").hide();
            $("#Terms").hide();
            $("#Penalties").hide();
            $("#Interests").hide();

            createRequirementFlexGrid();
            window.createRequirementFlexGrid = function () {
                return true;
            }

            requirementsCollectionView = new wijmo.collections.CollectionView(getRequirementsList());
            requirementsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchRequirements').keyup(function () {
                filterText = this.value.toLowerCase();
                requirementsCollectionView.refresh();
            });

            requirementsCollectionView.filter = function (item) {
                return !filterText || (item.Requirement.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            requirementsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateRequirementsStampSecurity();
            });

            // Flex Grid
            requirementsFlexGrid.itemsSource = requirementsCollectionView;
            requirementsFlexGrid.trackChanges = true;
        });

        // get Loan Types
        function getLoanTypesList() {
            var loanTypes = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/loanTypes/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanTypesListResult) {
                    if (loanTypesListResult.length > 0) {
                        for (i = 0; i < loanTypesListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            loanTypes.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editLoanTypesOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteLoanTypesOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: loanTypesListResult[i]["Id"],
                                LoanType: loanTypesListResult[i]["LoanType"],
                                Description: loanTypesListResult[i]["Description"],
                                CreatedByUserId: loanTypesListResult[i]["CreatedByUserId"],
                                CreatedByUser: loanTypesListResult[i]["CreatedByUser"],
                                CreatedDateTime: loanTypesListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: loanTypesListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: loanTypesListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: loanTypesListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return loanTypes;
        }

        // add new Loan Types
        function btnAddLoanTypesOnclick() {
            $("#LoanTypesEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredLoanTypes').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveLoanTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveLoanTypes").prop("disabled", false);
            $("#btnCloseLoanTypes").prop("disabled", false);

            loanTypeId = 0;
            document.getElementById("loanTypeName").value = "NA";
            document.getElementById("loanTypeDescription").value = "NA";
        }

        // edit Loan Types
        function editLoanTypesOnclick() {
            $("#LoanTypesEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredLoanTypes').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveLoanTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveLoanTypes").prop("disabled", false);
            $("#btnCloseLoanTypes").prop("disabled", false);

            loanTypesCollectionView.editItem(loanTypesCollectionView.currentItem);
            var loanTypeCurrentEditItem = loanTypesCollectionView.currentEditItem;

            loanTypeId = loanTypeCurrentEditItem.Id;
            document.getElementById("loanTypeName").value = loanTypeCurrentEditItem.LoanType;
            document.getElementById("loanTypeDescription").value = loanTypeCurrentEditItem.Description;
        }

        // form input validation
        function inputValidationForLoanTypes() {
            var isValid = true;
            $('.requiredLoanTypes').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Loan Types
        function saveLoanTypesOnclick() {
            if (inputValidationForLoanTypes()) {
                document.getElementById("btnSaveLoanTypes").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveLoanTypes").prop("disabled", true);
                $("#btnCloseLoanTypes").prop("disabled", true);

                var LoanTypesObject = new Object();
                LoanTypesObject.LoanType = document.getElementById('loanTypeName').value;
                LoanTypesObject.Description = document.getElementById('loanTypeDescription').value;
                var LoanTypesData = JSON.stringify(LoanTypesObject);

                if (loanTypeId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/LoanTypes/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: LoanTypesData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#LoanTypesEditDetailModal").modal("hide");

                                loanTypesCollectionView = new wijmo.collections.CollectionView(getLoanTypesList());
                                loanTypesCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchLoanTypes').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    loanTypesCollectionView.refresh();
                                });

                                loanTypesCollectionView.filter = function (item) {
                                    return !filterText || (item.LoanType.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                loanTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateLoanTypesStampSecurity();
                                });

                                // Flex Grid
                                loanTypesFlexGrid.itemsSource = loanTypesCollectionView;
                                loanTypesFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#LoanTypesEditDetailModal").modal("hide");

                                document.getElementById("btnSaveLoanTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveLoanTypes").prop("disabled", false);
                                $("#btnCloseLoanTypes").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/LoanTypes/update/' + loanTypeId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: LoanTypesData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#LoanTypesEditDetailModal").modal("hide");

                                loanTypesCollectionView = new wijmo.collections.CollectionView(getLoanTypesList());
                                loanTypesCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchLoanTypes').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    loanTypesCollectionView.refresh();
                                });

                                loanTypesCollectionView.filter = function (item) {
                                    return !filterText || (item.LoanType.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                loanTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateLoanTypesStampSecurity();
                                });

                                // Flex Grid
                                loanTypesFlexGrid.itemsSource = loanTypesCollectionView;
                                loanTypesFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#LoanTypesEditDetailModal").modal("hide");

                                document.getElementById("btnSaveLoanTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveLoanTypes").prop("disabled", false);
                                $("#btnCloseLoanTypes").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#LoanTypesEditDetailModal").modal("hide");

                                document.getElementById("btnSaveLoanTypes").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveLoanTypes").prop("disabled", false);
                                $("#btnCloseLoanTypes").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Loan Types
        function deleteLoanTypesOnclick() {
            $("#deleteConfirmationLoanTypesModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteLoanTypes").innerHTML = "Delete";
            $("#btnConfirmDeleteLoanTypes").prop("disabled", false);
            $("#btnCloseDeleteLoanTypesModal").prop("disabled", false);
        }
        function btnConfirmDeleteLoanTypesOnclick() {
            document.getElementById("btnConfirmDeleteLoanTypes").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteLoanTypes").prop("disabled", true);
            $("#btnCloseDeleteLoanTypesModal").prop("disabled", true);

            loanTypesCollectionView.editItem(loanTypesCollectionView.currentItem);
            var id = loanTypesCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/LoanTypes/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationLoanTypesModal').modal('hide');

                        loanTypesCollectionView = new wijmo.collections.CollectionView(getLoanTypesList());
                        loanTypesCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchLoanTypes').keyup(function () {
                            filterText = this.value.toLowerCase();
                            loanTypesCollectionView.refresh();
                        });

                        loanTypesCollectionView.filter = function (item) {
                            return !filterText || (item.LoanType.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        loanTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateLoanTypesStampSecurity();
                        });

                        // Flex Grid
                        loanTypesFlexGrid.itemsSource = loanTypesCollectionView;
                        loanTypesFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationLoanTypesModal').modal('hide');
                        $("#btnConfirmDeleteLoanTypes").prop("disabled", false);
                        $("#btnCloseDeleteLoanTypesModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationLoanTypesModal').modal('hide');
                        $("#btnConfirmDeleteLoanTypes").prop("disabled", false);
                        $("#btnCloseDeleteLoanTypesModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateLoanTypesStampSecurity() {
            var item = loanTypesCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        //  Loan Types flexgrid
        function createLoanTypeFlexGrid() {
            NProgress.start();
            toastrModification();

            loanTypesCollectionView = new wijmo.collections.CollectionView(getLoanTypesList());
            loanTypesCollectionView.canFilter = true;

            var filterText = '';
            $('#searchLoanTypes').keyup(function () {
                filterText = this.value.toLowerCase();
                loanTypesCollectionView.refresh();
            });

            loanTypesCollectionView.filter = function (item) {
                return !filterText || (item.LoanType.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            loanTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                updateLoanTypesStampSecurity();
            });

            // Flex Grid
            loanTypesFlexGrid = new wijmo.grid.FlexGrid('#LoanTypesListFlexGrid');
            loanTypesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "LoanType",
                                "binding": "LoanType",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: loanTypesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            loanTypesFlexGrid.trackChanges = true;
        }

        // Loan Types tab
        $('#LoanTypesTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#LoanTypes").show();
            $("#Terms").hide();
            $("#Penalties").hide();
            $("#Interests").hide();

            loanTypesCollectionView = new wijmo.collections.CollectionView(getLoanTypesList());
            loanTypesCollectionView.canFilter = true;

            var filterText = '';
            $('#searchLoanTypes').keyup(function () {
                filterText = this.value.toLowerCase();
                loanTypesCollectionView.refresh();
            });

            loanTypesCollectionView.filter = function (item) {
                return !filterText || (item.LoanType.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            loanTypesCollectionView.currentChanged.addHandler(function (sender, args) {
                updateLoanTypesStampSecurity();
            });

            // Flex Grid
            loanTypesFlexGrid.itemsSource = loanTypesCollectionView;
            loanTypesFlexGrid.trackChanges = true;
        });

        // get Terms
        function getTermsList() {
            var terms = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/term/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (termsListResult) {
                    if (termsListResult.length > 0) {
                        for (i = 0; i < termsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            terms.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editTermsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteTermsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: termsListResult[i]["Id"],
                                Term: termsListResult[i]["Term"],
                                Description: termsListResult[i]["Description"],
                                NoOfDays: termsListResult[i]["NoOfDays"],
                                CreatedByUserId: termsListResult[i]["CreatedByUserId"],
                                CreatedByUser: termsListResult[i]["CreatedByUser"],
                                CreatedDateTime: termsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: termsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: termsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: termsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return terms;
        }

        // add new Terms
        function btnAddTermsOnclick() {
            $("#TermsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredTerms').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveTerms").prop("disabled", false);
            $("#btnCloseTerms").prop("disabled", false);

            termId = 0;
            document.getElementById("termName").value = "NA";
            document.getElementById("termDescription").value = "NA";
            document.getElementById("termNoOfDays").value = 0;
        }

        // edit Terms
        function editTermsOnclick() {
            $("#TermsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredTerms').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveTerms").prop("disabled", false);
            $("#btnCloseTerms").prop("disabled", false);

            termsCollectionView.editItem(termsCollectionView.currentItem);
            var termCurrentEditItem = termsCollectionView.currentEditItem;

            termId = termCurrentEditItem.Id;
            document.getElementById("termName").value = termCurrentEditItem.Term;
            document.getElementById("termDescription").value = termCurrentEditItem.Description;
            document.getElementById("termNoOfDays").value = termCurrentEditItem.NoOfDays;
        }

        // form input validation
        function inputValidationForTerms() {
            var isValid = true;
            $('.requiredTerms').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Terms
        function saveTermsOnclick() {
            if (inputValidationForTerms()) {
                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveTerms").prop("disabled", true);
                $("#btnCloseTerms").prop("disabled", true);

                var termsObject = new Object();
                termsObject.Term = document.getElementById('termName').value;
                termsObject.Description = document.getElementById('termDescription').value;
                termsObject.NoOfDays = document.getElementById('termNoOfDays').value;
                var termData = JSON.stringify(termsObject);

                if (termId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/term/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#TermsEditDetailModal").modal("hide");

                                termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
                                termsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchTerms').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    termsCollectionView.refresh();
                                });

                                termsCollectionView.filter = function (item) {
                                    return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                termsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateTermsStampSecurity();
                                });

                                // Flex Grid
                                termsFlexGrid.itemsSource = termsCollectionView;
                                termsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#TermsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveTerms").prop("disabled", false);
                                $("#btnCloseTerms").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/term/update/' + termId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: termData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#TermsEditDetailModal").modal("hide");

                                termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
                                termsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchTerms').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    termsCollectionView.refresh();
                                });

                                termsCollectionView.filter = function (item) {
                                    return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                termsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateTermsStampSecurity();
                                });

                                // Flex Grid
                                termsFlexGrid.itemsSource = termsCollectionView;
                                termsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#TermsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveTerms").prop("disabled", false);
                                $("#btnCloseTerms").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#TermsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveTerms").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveTerms").prop("disabled", false);
                                $("#btnCloseTerms").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Terms
        function deleteTermsOnclick() {
            $("#deleteConfirmationTermsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteTerms").innerHTML = "Delete";
            $("#btnConfirmDeleteTerms").prop("disabled", false);
            $("#btnCloseDeleteTermsModal").prop("disabled", false);
        }
        function btnConfirmDeleteTermsOnclick() {
            document.getElementById("btnConfirmDeleteTerms").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteTerms").prop("disabled", true);
            $("#btnCloseDeleteTermsModal").prop("disabled", true);

            termsCollectionView.editItem(termsCollectionView.currentItem);
            var id = termsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/term/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationTermsModal').modal('hide');

                        termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
                        termsCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchTerms').keyup(function () {
                            filterText = this.value.toLowerCase();
                            termsCollectionView.refresh();
                        });

                        termsCollectionView.filter = function (item) {
                            return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        termsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateTermsStampSecurity();
                        });

                        // Flex Grid
                        termsFlexGrid.itemsSource = termsCollectionView;
                        termsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationTermsModal').modal('hide');
                        $("#btnConfirmDeleteTerms").prop("disabled", false);
                        $("#btnCloseDeleteTermsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationTermsModal').modal('hide');
                        $("#btnConfirmDeleteTerms").prop("disabled", false);
                        $("#btnCloseDeleteTermsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateTermsStampSecurity() {
            var item = termsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        //  Terms flexgrid
        function createTermFlexGrid() {
            NProgress.start();
            toastrModification();

            termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
            termsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchTerms').keyup(function () {
                filterText = this.value.toLowerCase();
                termsCollectionView.refresh();
            });

            termsCollectionView.filter = function (item) {
                return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            termsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateTermsStampSecurity();
            });

            // Flex Grid
            termsFlexGrid = new wijmo.grid.FlexGrid('#TermsListFlexGrid');
            termsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Term",
                                "binding": "Term",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "3*"
                            },
                            {
                                "header": "No. of Days",
                                "binding": "NoOfDays",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: termsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            termsFlexGrid.trackChanges = true;
        }

        // Expense Types tab
        $('#TermsTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#LoanTypes").hide();
            $("#Terms").show();
            $("#Penalties").hide();
            $("#Interests").hide();

            createTermFlexGrid();
            window.createTermFlexGrid = function () {
                return true;
            }

            termsCollectionView = new wijmo.collections.CollectionView(getTermsList());
            termsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchTerms').keyup(function () {
                filterText = this.value.toLowerCase();
                termsCollectionView.refresh();
            });

            termsCollectionView.filter = function (item) {
                return !filterText || (item.Term.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            termsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateTermsStampSecurity();
            });

            // Flex Grid
            termsFlexGrid.itemsSource = termsCollectionView;
            termsFlexGrid.trackChanges = true;
        });

        // get Penalties
        function getPenaltiesList() {
            var penalties = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/penalty/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (penaltiesListResult) {
                    if (penaltiesListResult.length > 0) {
                        for (i = 0; i < penaltiesListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            penalties.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editPenaltiesOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deletePenaltiesOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: penaltiesListResult[i]["Id"],
                                Penalty: penaltiesListResult[i]["Penalty"],
                                Description: penaltiesListResult[i]["Description"],
                                PenaltyAmount: penaltiesListResult[i]["PenaltyAmount"],
                                NoOfAbsentLimit: penaltiesListResult[i]["NoOfAbsentLimit"],
                                PenaltyAmountOverNoOfAbsentLimit: penaltiesListResult[i]["PenaltyAmountOverNoOfAbsentLimit"],
                                LoanAmount: penaltiesListResult[i]["LoanAmount"],
                                CreatedByUserId: penaltiesListResult[i]["CreatedByUserId"],
                                CreatedByUser: penaltiesListResult[i]["CreatedByUser"],
                                CreatedDateTime: penaltiesListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: penaltiesListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: penaltiesListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: penaltiesListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return penalties;
        }

        // add new Penalties
        function btnAddPenaltiesOnclick() {
            $("#PenaltiesEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredPenalties').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSavePenalties").prop("disabled", false);
            $("#btnClosePenalties").prop("disabled", false);

            penaltyId = 0;
            document.getElementById("penaltyName").value = "NA";
            document.getElementById("penaltyDescription").value = "NA";
            document.getElementById("penaltyAmount").value = 0;
            document.getElementById("penaltyNoOfAbsentLimit").value = 0;
            document.getElementById("penaltyAmontOverNoOfAbsentLimit").value = 0;
            document.getElementById("penaltyLoanAmount").value = 0;
        }

        // edit Penalties
        function editPenaltiesOnclick() {
            $("#PenaltiesEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredPenalties').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSavePenalties").prop("disabled", false);
            $("#btnClosePenalties").prop("disabled", false);

            penaltiesCollectionView.editItem(penaltiesCollectionView.currentItem);
            var penaltyCurrentEditItem = penaltiesCollectionView.currentEditItem;

            penaltyId = penaltyCurrentEditItem.Id;
            document.getElementById("penaltyName").value = penaltyCurrentEditItem.Penalty;
            document.getElementById("penaltyDescription").value = penaltyCurrentEditItem.Description;
            document.getElementById("penaltyAmount").value = penaltyCurrentEditItem.PenaltyAmount;
            document.getElementById("penaltyNoOfAbsentLimit").value = penaltyCurrentEditItem.NoOfAbsentLimit;
            document.getElementById("penaltyAmontOverNoOfAbsentLimit").value = penaltyCurrentEditItem.PenaltyAmountOverNoOfAbsentLimit;
            document.getElementById("penaltyLoanAmount").value = penaltyCurrentEditItem.LoanAmount;
        }

        // form input validation
        function inputValidationForPenalties() {
            var isValid = true;
            $('.requiredPenalties').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Penalties
        function savePenaltiesOnclick() {
            if (inputValidationForPenalties()) {
                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSavePenalties").prop("disabled", true);
                $("#btnClosePenalties").prop("disabled", true);

                var penaltiesObject = new Object();
                penaltiesObject.Penalty = document.getElementById('penaltyName').value;
                penaltiesObject.Description = document.getElementById('penaltyDescription').value;
                penaltiesObject.PenaltyAmount = document.getElementById('penaltyAmount').value;
                penaltiesObject.NoOfAbsentLimit = document.getElementById('penaltyNoOfAbsentLimit').value;
                penaltiesObject.PenaltyAmountOverNoOfAbsentLimit = document.getElementById('penaltyAmontOverNoOfAbsentLimit').value;
                penaltiesObject.LoanAmount = document.getElementById('penaltyLoanAmount').value;
                var penaltyData = JSON.stringify(penaltiesObject);

                if (penaltyId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/penalty/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: penaltyData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
                                penaltiesCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchPenalties').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    penaltiesCollectionView.refresh();
                                });

                                penaltiesCollectionView.filter = function (item) {
                                    return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updatePenaltiesStampSecurity();
                                });

                                // Flex Grid
                                penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
                                penaltiesFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSavePenalties").prop("disabled", false);
                                $("#btnClosePenalties").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/penalty/update/' + penaltyId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: penaltyData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
                                penaltiesCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchPenalties').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    penaltiesCollectionView.refresh();
                                });

                                penaltiesCollectionView.filter = function (item) {
                                    return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updatePenaltiesStampSecurity();
                                });

                                // Flex Grid
                                penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
                                penaltiesFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSavePenalties").prop("disabled", false);
                                $("#btnClosePenalties").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#PenaltiesEditDetailModal").modal("hide");

                                document.getElementById("btnSavePenalties").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSavePenalties").prop("disabled", false);
                                $("#btnClosePenalties").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Penalties
        function deletePenaltiesOnclick() {
            $("#deleteConfirmationPenaltiesModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeletePenalties").innerHTML = "Delete";
            $("#btnConfirmDeletePenalties").prop("disabled", false);
            $("#btnCloseDeletePenaltiesModal").prop("disabled", false);
        }
        function btnConfirmDeletePenaltiesOnclick() {
            document.getElementById("btnConfirmDeletePenalties").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeletePenalties").prop("disabled", true);
            $("#btnCloseDeletePenaltiesModal").prop("disabled", true);

            penaltiesCollectionView.editItem(penaltiesCollectionView.currentItem);
            var id = penaltiesCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/penalty/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationPenaltiesModal').modal('hide');

                        penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
                        penaltiesCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchPenalties').keyup(function () {
                            filterText = this.value.toLowerCase();
                            penaltiesCollectionView.refresh();
                        });

                        penaltiesCollectionView.filter = function (item) {
                            return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                            updatePenaltiesStampSecurity();
                        });

                        // Flex Grid
                        penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
                        penaltiesFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationPenaltiesModal').modal('hide');
                        $("#btnConfirmDeletePenalties").prop("disabled", false);
                        $("#btnCloseDeletePenaltiesModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationPenaltiesModal').modal('hide');
                        $("#btnConfirmDeletePenalties").prop("disabled", false);
                        $("#btnCloseDeletePenaltiesModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updatePenaltiesStampSecurity() {
            var item = penaltiesCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        //  Penalties flexgrid
        function createPenaltyFlexGrid() {
            NProgress.start();
            toastrModification();

            penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
            penaltiesCollectionView.canFilter = true;

            var filterText = '';
            $('#searchPenalties').keyup(function () {
                filterText = this.value.toLowerCase();
                penaltiesCollectionView.refresh();
            });

            penaltiesCollectionView.filter = function (item) {
                return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                updatePenaltiesStampSecurity();
            });

            // Flex Grid
            penaltiesFlexGrid = new wijmo.grid.FlexGrid('#PenaltiesListFlexGrid');
            penaltiesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Penalty",
                                "binding": "Penalty",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "Pen. Amount",
                                "binding": "PenaltyAmount",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Absent",
                                "binding": "NoOfAbsentLimit",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Pen. Over AL",
                                "binding": "PenaltyAmountOverNoOfAbsentLimit",
                                "allowSorting": true,
                                "width": "1*"
                            },
                            {
                                "header": "Loan",
                                "binding": "LoanAmount",
                                "allowSorting": true,
                                "width": "1*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: penaltiesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            penaltiesFlexGrid.trackChanges = true;
        }

        // Penalty Types tab
        $('#PenaltiesTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#LoanTypes").hide();
            $("#Terms").hide();
            $("#Penalties").show();
            $("#Interests").hide();

            createPenaltyFlexGrid();
            window.createPenaltyFlexGrid = function () {
                return true;
            }

            penaltiesCollectionView = new wijmo.collections.CollectionView(getPenaltiesList());
            penaltiesCollectionView.canFilter = true;

            var filterText = '';
            $('#searchPenalties').keyup(function () {
                filterText = this.value.toLowerCase();
                penaltiesCollectionView.refresh();
            });

            penaltiesCollectionView.filter = function (item) {
                return !filterText || (item.Penalty.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            penaltiesCollectionView.currentChanged.addHandler(function (sender, args) {
                updatePenaltiesStampSecurity();
            });

            // Flex Grid
            penaltiesFlexGrid.itemsSource = penaltiesCollectionView;
            penaltiesFlexGrid.trackChanges = true;
        });

        // get Interests
        function getInterestsList() {
            var interests = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/interest/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (interestsListResult) {
                    if (interestsListResult.length > 0) {
                        for (i = 0; i < interestsListResult.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            interests.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editInterestsOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteInterestsOnclick()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: interestsListResult[i]["Id"],
                                Interest: interestsListResult[i]["Interest"],
                                Description: interestsListResult[i]["Description"],
                                Rate: interestsListResult[i]["Rate"],
                                NoOfDays: interestsListResult[i]["NoOfDays"],
                                CreatedByUserId: interestsListResult[i]["CreatedByUserId"],
                                CreatedByUser: interestsListResult[i]["CreatedByUser"],
                                CreatedDateTime: interestsListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: interestsListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: interestsListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: interestsListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return interests;
        }

        // add new Interests
        function btnAddInterestsOnclick() {
            $("#InterestsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredInterests').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveInterests").prop("disabled", false);
            $("#btnCloseInterests").prop("disabled", false);

            interestId = 0;
            document.getElementById("interestName").value = "NA";
            document.getElementById("interestDescription").value = "NA";
            document.getElementById("interestRate").value = 0;
            document.getElementById("interestNoOfDays").value = 0;
        }

        // edit Interests
        function editInterestsOnclick() {
            $("#InterestsEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredInterests').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveInterests").prop("disabled", false);
            $("#btnCloseInterests").prop("disabled", false);

            interestsCollectionView.editItem(interestsCollectionView.currentItem);
            var interestCurrentEditItem = interestsCollectionView.currentEditItem;

            interestId = interestCurrentEditItem.Id;
            document.getElementById("interestName").value = interestCurrentEditItem.Interest;
            document.getElementById("interestDescription").value = interestCurrentEditItem.Description;
            document.getElementById("interestRate").value = interestCurrentEditItem.Rate;
            document.getElementById("interestNoOfDays").value = interestCurrentEditItem.NoOfDays;
        }

        // form input validation
        function inputValidationForInterests() {
            var isValid = true;
            $('.requiredInterests').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Interests
        function saveInterestsOnclick() {
            if (inputValidationForInterests()) {
                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveInterests").prop("disabled", true);
                $("#btnCloseInterests").prop("disabled", true);

                var interestsObject = new Object();
                interestsObject.Interest = document.getElementById('interestName').value;
                interestsObject.Description = document.getElementById('interestDescription').value;
                interestsObject.Rate = document.getElementById('interestRate').value;
                interestsObject.NoOfDays = document.getElementById('interestNoOfDays').value;
                var interestData = JSON.stringify(interestsObject);

                if (interestId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/interest/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: interestData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#InterestsEditDetailModal").modal("hide");

                                interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
                                interestsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchInterests').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    interestsCollectionView.refresh();
                                });

                                interestsCollectionView.filter = function (item) {
                                    return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateInterestsStampSecurity();
                                });

                                // Flex Grid
                                interestsFlexGrid.itemsSource = interestsCollectionView;
                                interestsFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#InterestsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveInterests").prop("disabled", false);
                                $("#btnCloseInterests").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/interest/update/' + interestId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: interestData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#InterestsEditDetailModal").modal("hide");

                                interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
                                interestsCollectionView.canFilter = true;

                                var filterText = '';
                                $('#searchInterests').keyup(function () {
                                    filterText = this.value.toLowerCase();
                                    interestsCollectionView.refresh();
                                });

                                interestsCollectionView.filter = function (item) {
                                    return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                                       || (item.Description.toLowerCase().indexOf(filterText) > -1);
                                }

                                interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                                    updateInterestsStampSecurity();
                                });

                                // Flex Grid
                                interestsFlexGrid.itemsSource = interestsCollectionView;
                                interestsFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#InterestsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveInterests").prop("disabled", false);
                                $("#btnCloseInterests").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#InterestsEditDetailModal").modal("hide");

                                document.getElementById("btnSaveInterests").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveInterests").prop("disabled", false);
                                $("#btnCloseInterests").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Interests
        function deleteInterestsOnclick() {
            $("#deleteConfirmationInterestsModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteInterests").innerHTML = "Delete";
            $("#btnConfirmDeleteInterests").prop("disabled", false);
            $("#btnCloseDeleteInterestsModal").prop("disabled", false);
        }
        function btnConfirmDeleteInterestsOnclick() {
            document.getElementById("btnConfirmDeleteInterests").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteInterests").prop("disabled", true);
            $("#btnCloseDeleteInterestsModal").prop("disabled", true);

            interestsCollectionView.editItem(interestsCollectionView.currentItem);
            var id = interestsCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/interest/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationInterestsModal').modal('hide');

                        interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
                        interestsCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchInterests').keyup(function () {
                            filterText = this.value.toLowerCase();
                            interestsCollectionView.refresh();
                        });

                        interestsCollectionView.filter = function (item) {
                            return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Description.toLowerCase().indexOf(filterText) > -1);
                        }

                        interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateInterestsStampSecurity();
                        });

                        // Flex Grid
                        interestsFlexGrid.itemsSource = interestsCollectionView;
                        interestsFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationInterestsModal').modal('hide');
                        $("#btnConfirmDeleteInterests").prop("disabled", false);
                        $("#btnCloseDeleteInterestsModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationInterestsModal').modal('hide');
                        $("#btnConfirmDeleteInterests").prop("disabled", false);
                        $("#btnCloseDeleteInterestsModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateInterestsStampSecurity() {
            var item = interestsCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        //  Interests flexgrid
        function createInterestFlexGrid() {
            NProgress.start();
            toastrModification();

            interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
            interestsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchInterests').keyup(function () {
                filterText = this.value.toLowerCase();
                interestsCollectionView.refresh();
            });

            interestsCollectionView.filter = function (item) {
                return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateInterestsStampSecurity();
            });

            // Flex Grid
            interestsFlexGrid = new wijmo.grid.FlexGrid('#InterestsListFlexGrid');
            interestsFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Interest",
                                "binding": "Interest",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Description",
                                "binding": "Description",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "Rate",
                                "binding": "Rate",
                                "allowSorting": true,
                                "width": "1.5*"
                            },
                            {
                                "header": "No. of Days",
                                "binding": "NoOfDays",
                                "allowSorting": true,
                                "width": "1*"
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: interestsCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            interestsFlexGrid.trackChanges = true;
        }

        // Interest Types tab
        $('#InterestsTab').click(function () {
            NProgress.start();
            $("#Requirements").hide();
            $("#Accounts").hide();
            $("#ExpenseTypes").hide();
            $("#LoanTypes").hide();
            $("#Terms").hide();
            $("#Interests").show();
            $("#Penalties").hide();

            createInterestFlexGrid();
            window.createInterestFlexGrid = function () {
                return true;
            }

            interestsCollectionView = new wijmo.collections.CollectionView(getInterestsList());
            interestsCollectionView.canFilter = true;

            var filterText = '';
            $('#searchInterests').keyup(function () {
                filterText = this.value.toLowerCase();
                interestsCollectionView.refresh();
            });

            interestsCollectionView.filter = function (item) {
                return !filterText || (item.Interest.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Description.toLowerCase().indexOf(filterText) > -1);
            }

            interestsCollectionView.currentChanged.addHandler(function (sender, args) {
                updateInterestsStampSecurity();
            });

            // Flex Grid
            interestsFlexGrid.itemsSource = interestsCollectionView;
            interestsFlexGrid.trackChanges = true;
        });

        // ready function
        window.onload = function () {
            NProgress.start();
            toastrModification();
            createLoanTypeFlexGrid();

            cboTransactionType = new wijmo.input.ComboBox('#transactionType');
            getTransactionType();

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }
        }
    </script>
</body>
</html>