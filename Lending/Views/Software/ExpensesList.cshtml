<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Expenses List</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>

    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-credit-card fa-fw"></i>  Expenses <small>List of Expenses</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li class="active">
                                Expenses
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                        <input type="text" id="searchExpenses" class="form-control" placeholder="Search" />
                                    </div>
                                </td>
                                <td>&nbsp;&nbsp;&nbsp;</td>
                                <td align="right">
                                    <button class="btn btn-primary" id="btnAddExpenses" onclick="btnAddExpensesOnclick()">
                                        <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table border="0">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> Start Expense Date</span>
                                        <div id="cboExpensesDate"></div>
                                    </div>
                                </td>
                                <td>
                                    &nbsp;
                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> End Expense Date</span>
                                        <div id="cboExpensesEndDate"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="expensesListFlexGrid" class="grid"></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span> First
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span> Previous
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span> Next
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span> Last
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User security stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation expenses modal -->
    <div class="modal fade" id="deleteConfirmationExpensesModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Expenses</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Expenses?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteExpenses" onclick="btnConfirmDeleteExpensesOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteExpensesModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var cboExpensesDate;
        var expensesCollectionView;
        var expensesFlexGrid;
        var isExpensesDateClicked = false;
        var cboExpensesEndDate;
        var isExpensesEndDateClicked = false;

        //var date = new Date(), y = date.getFullYear(), m = date.getMonth();
        //var firstDay = new Date(y, m, 1);
        //var lastDay = new Date(y, m + 1, 0);

        var date = new Date();
        var y = date.getFullYear();
        var fm = date.getMonth() - 1;
        var m = date.getMonth();
        var firstDay = new Date(y, fm, 1);
        var lastDay = new Date(y, m + 1, 0);

        // create cbo date for expenses date
        function createCboExpensesDate() {
            cboExpensesDate.dispose();
            cboExpensesDate = new wijmo.input.InputDate('#cboExpensesDate', {
                format: 'MM-dd-yyyy',
                value: new Date(firstDay),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();
                    expensesCollectionView = new wijmo.collections.CollectionView(getExpensesList());
                    expensesCollectionView.canFilter = true;
                    expensesCollectionView.pageSize = 15;

                    var filterText = '';
                    $('#searchExpenses').keyup(function () {
                        filterText = this.value.toLowerCase();
                        expensesCollectionView.refresh();
                    });

                    expensesCollectionView.filter = function (item) {
                        return !filterText || (item.ExpensesNumber.toLowerCase().indexOf(filterText) > -1)
                                           || (item.Payee.toLowerCase().indexOf(filterText) > -1);
                    }

                    expensesCollectionView.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtons();
                    });

                    expensesCollectionView.currentChanged.addHandler(function (sender, args) {
                        updateStampSecurity();
                    });

                    // Flex Grid
                    expensesFlexGrid.itemsSource = expensesCollectionView;
                    expensesFlexGrid.trackChanges = true;
                }
            });
        }

        function createCboExpensesEndDate() {
            cboExpensesEndDate.dispose();
            cboExpensesEndDate = new wijmo.input.InputDate('#cboExpensesEndDate', {
                format: 'MM-dd-yyyy',
                value: new Date(lastDay),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();
                    expensesCollectionView = new wijmo.collections.CollectionView(getExpensesList());
                    expensesCollectionView.canFilter = true;
                    expensesCollectionView.pageSize = 15;

                    var filterText = '';
                    $('#searchExpenses').keyup(function () {
                        filterText = this.value.toLowerCase();
                        expensesCollectionView.refresh();
                    });

                    expensesCollectionView.filter = function (item) {
                        return !filterText || (item.ExpensesNumber.toLowerCase().indexOf(filterText) > -1)
                                           || (item.Payee.toLowerCase().indexOf(filterText) > -1);
                    }

                    expensesCollectionView.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtons();
                    });

                    expensesCollectionView.currentChanged.addHandler(function (sender, args) {
                        updateStampSecurity();
                    });

                    // Flex Grid
                    expensesFlexGrid.itemsSource = expensesCollectionView;
                    expensesFlexGrid.trackChanges = true;
                }
            });
        }

        // get expenses list
        function getExpensesList() {
            var expensesListArray = new wijmo.collections.ObservableArray;
            var startDate = [cboExpensesDate.value.getMonth() + 1, cboExpensesDate.value.getDate(), cboExpensesDate.value.getFullYear()].join('-');
            var endDate = [cboExpensesEndDate.value.getMonth() + 1, cboExpensesEndDate.value.getDate(), cboExpensesEndDate.value.getFullYear()].join('-');
            $.ajax({
                url: '/api/expenses/listByExpensesDate/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (expensesListResult) {
                    if (expensesListResult.length > 0) {
                        for (i = 0; i < expensesListResult.length; i++) {
                            var isLocked = false;
                            if (expensesListResult[i]["IsLocked"]) {
                                isLocked = true;
                            }

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            expensesListArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditExpensesOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteExpensesOnclick(" + isLocked + ")'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: expensesListResult[i]["Id"],
                                ExpenseNumber: expensesListResult[i]["ExpenseNumber"],
                                ExpenseDate: expensesListResult[i]["ExpenseDate"],
                                AssignedStaffId: expensesListResult[i]["AssignedStaffId"],
                                AssignedStaff: expensesListResult[i]["AssignedStaff"],
                                Particulars: expensesListResult[i]["Particulars"],
                                IsCollectionExpense: expensesListResult[i]["IsCollectionExpense"],
                                ExpenseAmount: expensesListResult[i]["ExpenseAmount"],
                                PreparedByUserId: expensesListResult[i]["PreparedByUserId"],
                                PreparedByUser: expensesListResult[i]["PreparedByUser"],
                                IsLocked: expensesListResult[i]["IsLocked"],
                                CreatedByUserId: expensesListResult[i]["CreatedByUserId"],
                                CreatedByUser: expensesListResult[i]["CreatedByUser"],
                                CreatedDateTime: expensesListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: expensesListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: expensesListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: expensesListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return expensesListArray;
        }

        // add new expenses
        function btnAddExpensesOnclick() {
            document.getElementById("btnAddExpenses").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Adding";
            $("#btnAddExpenses").prop("disabled", true);

            $.ajax({
                type: "POST",
                url: '/api/expenses/add',
                contentType: "application/json; charset=utf-8",
                success: function (id) {
                    if (id > 0) {
                        window.location = '/Software/ExpenseDetail?id=' + id;
                    } else {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // edit expenses
        function btnEditExpensesOnclick() {
            expensesCollectionView.editItem(expensesCollectionView.currentItem);
            var id = expensesCollectionView.currentEditItem.Id;
            window.location = '/Software/ExpenseDetail?id=' + id;
        }

        // delete expenses
        function btnDeleteExpensesOnclick(isLocked) {
            if (isLocked) {
                toastr.info("Record Locked");
            } else {
                $("#deleteConfirmationExpensesModal").modal({
                    "show": true,
                    "backdrop": "static"
                });

                document.getElementById("btnConfirmDeleteExpenses").innerHTML = "Delete";
                $("#btnConfirmDeleteExpenses").prop("disabled", false);
                $("#btnCloseDeleteExpensesModal").prop("disabled", false);
            }
        }
        function btnConfirmDeleteExpensesOnclick() {
            document.getElementById("btnConfirmDeleteExpenses").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteExpenses").prop("disabled", true);
            $("#btnCloseDeleteExpensesModal").prop("disabled", true);

            expensesCollectionView.editItem(expensesCollectionView.currentItem);
            var id = expensesCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/expenses/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationExpensesModal').modal('hide');

                        expensesCollectionView = new wijmo.collections.CollectionView(getExpensesList());
                        expensesCollectionView.canFilter = true;
                        expensesCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchExpenses').keyup(function () {
                            filterText = this.value.toLowerCase();
                            expensesCollectionView.refresh();
                        });

                        expensesCollectionView.filter = function (item) {
                            return !filterText || (item.ExpensesNumber.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Payee.toLowerCase().indexOf(filterText) > -1);
                        }

                        expensesCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtons();
                        });

                        expensesCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateStampSecurity();
                        });

                        // Flex Grid
                        expensesFlexGrid.itemsSource = expensesCollectionView;
                        expensesFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#deleteConfirmationExpensesModal').modal('hide');
                        document.getElementById("btnConfirmDeleteExpenses").innerHTML = "Yes";
                        $("#btnConfirmDeleteExpenses").prop("disabled", false);
                        $("#btnCloseDeleteExpensesModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationExpensesModal').modal('hide');
                        document.getElementById("btnConfirmDeleteExpenses").innerHTML = "Yes";
                        $("#btnConfirmDeleteExpenses").prop("disabled", false);
                        $("#btnCloseDeleteExpensesModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateStampSecurity() {
            var item = expensesCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtons() {
            if (expensesCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            btnCurrentPageGrid.innerHTML = (expensesCollectionView.pageIndex + 1) + ' / ' + expensesCollectionView.pageCount;
        }

        // create expenses flexgrid
        function createExpensesFlexGrid() {
            expensesCollectionView = new wijmo.collections.CollectionView(getExpensesList());
            expensesCollectionView.canFilter = true;
            expensesCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchExpenses').keyup(function () {
                filterText = this.value.toLowerCase();
                expensesCollectionView.refresh();
            });

            expensesCollectionView.filter = function (item) {
                return !filterText || (item.ExpensesNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Payee.toLowerCase().indexOf(filterText) > -1);
            }

            expensesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            expensesCollectionView.currentChanged.addHandler(function (sender, args) {
                updateStampSecurity();
            });

            // Flex Grid
            expensesFlexGrid = new wijmo.grid.FlexGrid('#expensesListFlexGrid');
            expensesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50,
                            },
                            {
                                "header": "Date",
                                "binding": "ExpenseDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Expense No.",
                                "binding": "ExpenseNumber",
                                "allowSorting": true,
                                "width": 120,
                            },
                            {
                                "header": "Staff",
                                "binding": "AssignedStaff",
                                "allowSorting": true,
                                "width": 195,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 250,
                            },
                            {
                                "header": "Amount",
                                "binding": "ExpenseAmount",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Is C",
                                "binding": "IsCollectionExpense",
                                "allowSorting": true,
                                "width": 50,
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: expensesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            expensesFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();

            btnFirstPageGrid.addEventListener('click', function () {
                expensesCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                expensesCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                expensesCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                expensesCollectionView.moveToLastPage();
                updateNavigateButtons();
            });
        }

        // on load page
        window.onload = function () {
            NProgress.start();
            toastrModification();
            cboExpensesDate = new wijmo.input.InputDate('#cboExpensesDate');
            createCboExpensesDate();
            cboExpensesEndDate = new wijmo.input.InputDate('#cboExpensesEndDate');
            createCboExpensesEndDate();
            createExpensesFlexGrid();

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }
        }
    </script>

</body>
</html>