<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Remittance List</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-money fa-fw"></i> Remittance <small>List of Remittances</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li class="active">
                                Remittance
                            </li>
                        </ol>
                    </div>
                </div>

                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                        <input type="text" id="searchRemittance" class="form-control" placeholder="Search" />
                                    </div>
                                </td>
                                <td>&nbsp;&nbsp;&nbsp;</td>
                                <td align="right">
                                    <button class="btn btn-primary" id="btnAddRemittance" onclick="btnAddRemittanceOnclick()">
                                        <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table border="0">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> Start Remittance Date</span>
                                        <div id="cboRemittanceDate"></div>
                                    </div>
                                </td>
                                <td>
                                    &nbsp;
                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> End Remittance Date</span>
                                        <div id="cboRemittanceEndDate"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="RemittanceListFlexGrid" class=""></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="naviagtionPageGridRemittance">
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridRemittance">
                                    <span class="glyphicon glyphicon-fast-backward"></span> First
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridRemittance">
                                    <span class="glyphicon glyphicon-step-backward"></span> Previous
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridRemittance"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridRemittance">
                                    <span class="glyphicon glyphicon-step-forward"></span> Next
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridRemittance">
                                    <span class="glyphicon glyphicon-fast-forward"></span> Last
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User security stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedByRemittance">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDateRemittance">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedByRemittance">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDateRemittance">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation collection modal -->
    <div class="modal fade" id="deleteConfirmationRemittanceModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Remittance</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Remittance?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteRemittance" onclick="btnConfirmDeleteRemittanceOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteRemittanceModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Remittances Detail Modal -->
    <div class="modal fade" id="RemittancesEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title"> Remittance Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Remittance No.</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requiredRemittances" id="remittanceNo" placeholder="Remittance No." />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Remittance Date</label>
                            <div class="col-sm-8">
                                <div id="cboRemittanceDateValue" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Area</label>
                            <div class="col-sm-8">
                                <div id="cboRemittanceArea" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Remiited By</label>
                            <div class="col-sm-8">
                                <div id="cboRemittanceStaff" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Particulars</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredRemittances" rows="5" id="remittanceParticulars" placeholder="Particulars"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Amount</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredRemittances" id="remittanceAmount" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveRemittances" onclick="saveRemittancesOnclick()"><i class="fa fa-save fa-fw"></i> Save / <i class="fa fa-lock fa-fw"></i> Lock</button>
                    <button class="btn btn-primary" id="btnUnlockRemittances" onclick="unlockRemittancesOnclick()"><i class="fa fa-unlock fa-fw"></i> Unlock</button>
                    <button class="btn btn-danger" id="btnCloseRemittances" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var date = new Date();
        var y = date.getFullYear();
        var fm = date.getMonth() - 1;
        var m = date.getMonth();
        var firstDay = new Date(y, fm, 1);
        var lastDay = new Date(y, m + 1, 0);

        // global variables
        var cboRemittanceDate;
        var cboRemittanceEndDate;
        var remittanceCollectionView;
        var remittanceFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;
        var isRemittanceDateClicked = false;
        var isRemittanceEndDateClicked = false;
        var cboRemittanceChangeCollector;

        // create cbo date for remittance date
        function createCboRemittanceDate() {
            cboRemittanceDate.dispose();
            cboRemittanceDate = new wijmo.input.InputDate('#cboRemittanceDate', {
                format: 'MM-dd-yyyy',
                value: new Date(firstDay),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();
                    remittanceCollectionView = new wijmo.collections.CollectionView(getRemittanceByRemittanceDateList());
                    remittanceCollectionView.canFilter = true;
                    remittanceCollectionView.pageSize = 15;

                    var filterText = '';
                    $('#searchRemittance').keyup(function () {
                        filterText = this.value.toLowerCase();
                        remittanceCollectionView.refresh();
                    });

                    remittanceCollectionView.filter = function (item) {
                        return !filterText || (item.RemittanceNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Area.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Staff.toLowerCase().indexOf(filterText) > -1);
                    }

                    remittanceCollectionView.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtonsRemittance();
                    });

                    remittanceCollectionView.currentChanged.addHandler(function (sender, args) {
                        updateStampSecurityRemittance();
                    });

                    // Flex Grid
                    remittanceFlexGrid.itemsSource = remittanceCollectionView;
                    remittanceFlexGrid.trackChanges = true;
                }
            });
        }

        // create cbo date for remittance date
        function createCboRemittanceEndDate() {
            cboRemittanceEndDate.dispose();
            cboRemittanceEndDate = new wijmo.input.InputDate('#cboRemittanceEndDate', {
                format: 'MM-dd-yyyy',
                value: new Date(lastDay),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();
                    remittanceCollectionView = new wijmo.collections.CollectionView(getRemittanceByRemittanceDateList());
                    remittanceCollectionView.canFilter = true;
                    remittanceCollectionView.pageSize = 15;

                    var filterText = '';
                    $('#searchRemittance').keyup(function () {
                        filterText = this.value.toLowerCase();
                        remittanceCollectionView.refresh();
                    });

                    remittanceCollectionView.filter = function (item) {
                        return !filterText || (item.RemittanceNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Area.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Staff.toLowerCase().indexOf(filterText) > -1);
                    }

                    remittanceCollectionView.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtonsRemittance();
                    });

                    remittanceCollectionView.currentChanged.addHandler(function (sender, args) {
                        updateStampSecurityRemittance();
                    });

                    // Flex Grid
                    remittanceFlexGrid.itemsSource = remittanceCollectionView;
                    remittanceFlexGrid.trackChanges = true;
                }
            });
        }

        // get colllection list by remittance date and area id
        function getRemittanceByRemittanceDateList() {
            var remittanceListArray = new wijmo.collections.ObservableArray;
            var startDate = [cboRemittanceDate.value.getMonth() + 1, cboRemittanceDate.value.getDate(), cboRemittanceDate.value.getFullYear()].join('-');
            var endDate = [cboRemittanceEndDate.value.getMonth() + 1, cboRemittanceEndDate.value.getDate(), cboRemittanceEndDate.value.getFullYear()].join('-');
            $.ajax({
                url: '/api/remmittance/list/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (remittanceListResult) {
                    if (remittanceListResult.length > 0) {
                        for (i = 0; i < remittanceListResult.length; i++) {
                            var isLocked = false;
                            if (remittanceListResult[i]["IsLocked"]) {
                                isLocked = true;
                            }

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            var newDate = new Date(remittanceListResult[i]["RemittanceDate"]);
                            var remittanceDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            remittanceListArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditRemittanceOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteRemittanceOnclick(" + isLocked + ")'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: remittanceListResult[i]["Id"],
                                RemittanceNumber: "RM-" + remittanceListResult[i]["RemittanceNumber"],
                                RemittanceDate: remittanceDateValue,
                                AreaId: remittanceListResult[i]["AreaId"],
                                Area: remittanceListResult[i]["Area"],
                                StaffId: remittanceListResult[i]["StaffId"],
                                Staff: remittanceListResult[i]["Staff"],
                                Particulars: remittanceListResult[i]["Particulars"],
                                PreparedByUserId: remittanceListResult[i]["PreparedByUserId"],
                                PreparedByUser: remittanceListResult[i]["PreparedByUser"],
                                RemitAmount: remittanceListResult[i]["RemitAmount"],
                                IsLocked: remittanceListResult[i]["IsLocked"],
                                CreatedByUserId: remittanceListResult[i]["CreatedByUserId"],
                                CreatedByUser: remittanceListResult[i]["CreatedByUser"],
                                CreatedDateTime: remittanceListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: remittanceListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: remittanceListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: remittanceListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return remittanceListArray;
        }

        // delete loan application
        function btnDeleteRemittanceOnclick(isLocked) {
            if (isLocked) {
                toastr.info("Record Locked");
            } else {
                $("#deleteConfirmationRemittanceModal").modal({
                    "show": true,
                    "backdrop": "static"
                });

                document.getElementById("btnConfirmDeleteRemittance").innerHTML = "Delete";
                $("#btnConfirmDeleteRemittance").prop("disabled", false);
                $("#btnCloseDeleteRemittanceModal").prop("disabled", false);
            }
        }
        function btnConfirmDeleteRemittanceOnclick() {
            document.getElementById("btnConfirmDeleteRemittance").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteRemittance").prop("disabled", true);
            $("#btnCloseDeleteRemittanceModal").prop("disabled", true);

            remittanceCollectionView.editItem(remittanceCollectionView.currentItem);
            var id = remittanceCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/remittance/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationRemittanceModal').modal('hide');
                        remittanceCollectionView = new wijmo.collections.CollectionView(getRemittanceByRemittanceDateList());
                        remittanceCollectionView.canFilter = true;
                        remittanceCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchRemittance').keyup(function () {
                            filterText = this.value.toLowerCase();
                            remittanceCollectionView.refresh();
                        });

                        remittanceCollectionView.filter = function (item) {
                            return !filterText || (item.RemittanceNumber.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Area.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Staff.toLowerCase().indexOf(filterText) > -1);
                        }

                        remittanceCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsRemittance();
                        });

                        remittanceCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateStampSecurityRemittance();
                        });

                        // Flex Grid
                        remittanceFlexGrid.itemsSource = remittanceCollectionView;
                        remittanceFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Not Found");
                        $('#deleteConfirmationRemittanceModal').modal('hide');
                        document.getElementById("btnConfirmDeleteRemittance").innerHTML = "Delete";
                        $("#btnConfirmDeleteRemittance").prop("disabled", false);
                        $("#btnCloseDeleteRemittanceModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Bad Request");
                        document.getElementById("btnConfirmDeleteRemittance").innerHTML = "Delete";
                        $("#btnConfirmDeleteRemittance").prop("disabled", false);
                        $("#btnCloseDeleteRemittanceModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateStampSecurityRemittance() {
            var item = remittanceCollectionView.currentItem;
            document.getElementById('stampCreatedByRemittance').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDateRemittance').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedByRemittance').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDateRemittance').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsRemittance() {
            if (remittanceCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridRemittance').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridRemittance').style.display = 'block';
            btnCurrentPageGridRemittance.innerHTML = (remittanceCollectionView.pageIndex + 1) + ' / ' + remittanceCollectionView.pageCount;
        }

        // create remittance flexgrid
        function createRemittanceFlexGrid() {
            remittanceCollectionView = new wijmo.collections.CollectionView(getRemittanceByRemittanceDateList());
            remittanceCollectionView.canFilter = true;
            remittanceCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchRemittance').keyup(function () {
                filterText = this.value.toLowerCase();
                remittanceCollectionView.refresh();
            });

            remittanceCollectionView.filter = function (item) {
                return !filterText || (item.RemittanceNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Area.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Staff.toLowerCase().indexOf(filterText) > -1);
            }

            remittanceCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsRemittance();
            });

            remittanceCollectionView.currentChanged.addHandler(function (sender, args) {
                updateStampSecurityRemittance();
            });

            // Flex Grid
            remittanceFlexGrid = new wijmo.grid.FlexGrid('#RemittanceListFlexGrid');
            remittanceFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "width": 35,
                                "align": "center",
                                "allowSorting": true,
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Date",
                                "binding": "RemittanceDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Remittance No.",
                                "binding": "RemittanceNumber",
                                "allowSorting": true,
                                "width": 120,
                            },
                            {
                                "header": "Area",
                                "binding": "Area",
                                "allowSorting": true,
                                "width": 220,
                            },
                            {
                                "header": "Staff",
                                "binding": "Staff",
                                "allowSorting": true,
                                "width": 220,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 300,
                            },
                            {
                                "header": "Amount",
                                "binding": "RemitAmount",
                                "allowSorting": true,
                                "width": 130
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: remittanceCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            remittanceFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridRemittance = document.getElementById('btnMoveToFirstPageGridRemittance');
            btnPreviousPageGridRemittance = document.getElementById('btnMoveToPreviousPageGridRemittance');
            btnNextPageGridRemittance = document.getElementById('btnMoveToNextPageGridRemittance');
            btnLastPageGridRemittance = document.getElementById('btnMoveToLastPageGridRemittance');
            btnCurrentPageGridRemittance = document.getElementById('btnCurrentPageGridRemittance');

            updateNavigateButtonsRemittance();

            btnFirstPageGridRemittance.addEventListener('click', function () {
                remittanceCollectionView.moveToFirstPage();
                updateNavigateButtonsRemittance();
            });
            btnPreviousPageGridRemittance.addEventListener('click', function () {
                remittanceCollectionView.moveToPreviousPage();
                updateNavigateButtonsRemittance();
            });
            btnNextPageGridRemittance.addEventListener('click', function () {
                remittanceCollectionView.moveToNextPage();
                updateNavigateButtonsRemittance();
            });
            btnLastPageGridRemittance.addEventListener('click', function () {
                remittanceCollectionView.moveToLastPage();
                updateNavigateButtonsRemittance();
            });
        }

        function remittanceListOnclick() {
            NProgress.start();
            setTimeout(function () {
                remittanceCollectionView = new wijmo.collections.CollectionView(getRemittanceByRemittanceDateList());
                remittanceCollectionView.canFilter = true;
                remittanceCollectionView.pageSize = 15;

                var filterText = '';
                $('#searchRemittance').keyup(function () {
                    filterText = this.value.toLowerCase();
                    remittanceCollectionView.refresh();
                });

                remittanceCollectionView.filter = function (item) {
                    return !filterText || (item.RemittanceNumber.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Area.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Staff.toLowerCase().indexOf(filterText) > -1);
                }

                remittanceCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtonsRemittance();
                });

                remittanceCollectionView.currentChanged.addHandler(function (sender, args) {
                    updateStampSecurityRemittance();
                });

                // Flex Grid
                remittanceFlexGrid.itemsSource = remittanceCollectionView;
                remittanceFlexGrid.trackChanges = true;
            }, 300);
        }

        var remittanceId;
        var cboRemittanceDateValue;
        var cboRemittanceArea;
        var cboRemittanceStaff;

        var newDate = new Date();
        var remittanceDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');

        function createRemittanceDate() {
            cboRemittanceDateValue.dispose();
            cboRemittanceDateValue = new wijmo.input.InputDate('#cboRemittanceDateValue', {
                format: 'MM-dd-yyyy',
                value: new Date(remittanceDateValue),
                mask: '99-99-9999',
                onValueChanged: function () {
                    var thisDateValue = [this.value.getMonth() + 1, this.value.getDate(), this.value.getFullYear()].join('-');
                    remittanceDateValue = thisDateValue;
                }
            });
        }

        function createCboAreaForRemittance() {
            var areaArray = new Array();
            $.ajax({
                url: '/api/area/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (areaResults) {
                    var disabled = true;
                    if (areaResults.length > 0) {
                        for (i = 0; i < areaResults.length; i++) {
                            areaArray.push({
                                Id: areaResults[i]["Id"],
                                Area: areaResults[i]["Area"],
                            });
                        }

                        disabled = false;
                    }

                    cboRemittanceArea.dispose();
                    cboRemittanceArea = new wijmo.input.ComboBox('#cboRemittanceArea', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area"
                    });
                }
            });
        }

        function createCboStaffForRemittance() {
            var staffArray = new Array();
            $.ajax({
                url: '/api/staff/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (staffResults) {
                    var disabled = true;
                    if (staffResults.length > 0) {
                        for (i = 0; i < staffResults.length; i++) {
                            staffArray.push({
                                Id: staffResults[i]["Id"],
                                Staff: staffResults[i]["Staff"],
                            });
                        }

                        disabled = false;
                    }

                    cboRemittanceStaff.dispose();
                    cboRemittanceStaff = new wijmo.input.ComboBox('#cboRemittanceStaff', {
                        disabled: disabled,
                        itemsSource: staffArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Staff",
                        selectedValuePath: "Staff"
                    });
                }
            });
        }

        // add new remittance
        function btnAddRemittanceOnclick() {
            document.getElementById("btnAddRemittance").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Adding";
            $("#btnAddRemittance").prop("disabled", true);

            $.ajax({
                type: "POST",
                url: '/api/remittance/add',
                contentType: "application/json; charset=utf-8",
                success: function (id) {
                    if (id > 0) {
                        window.location = '/Software/RemittanceDetail?id=' + id;
                    } else {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // edit remittance
        function btnEditRemittanceOnclick() {
            remittanceCollectionView.editItem(remittanceCollectionView.currentItem);
            var currentItem = remittanceCollectionView.currentEditItem;
            remittanceId = currentItem.Id;
            
            window.location = "/Software/RemittanceDetail?id=" + remittanceId;
        }

        // form input validation
        function inputValidationForRemiitance() {
            var isValid = true;
            $('.requiredRemittances').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        function saveRemittancesOnclick() {
            var remittanceObject = {
                RemittanceDate: cboRemittanceDateValue.value,
                AreaId: cboRemittanceArea.selectedItem["Id"],
                StaffId: cboRemittanceStaff.selectedItem["Id"],
                Particulars: document.getElementById("remittanceParticulars").value,
                RemitAmount: document.getElementById("remittanceAmount").value
            }

            var remittanceData = JSON.stringify(remittanceObject);
            if (inputValidationForRemiitance()) {
                document.getElementById("btnSaveRemittances").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving and Locking";
                $("#btnSaveRemittances").prop("disabled", true);
                $("#btnUnlockRemittances").prop("disabled", true);
                $("#btnCloseRemittances").prop("disabled", true);

                if (remittanceId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/remittance/save/lock',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: remittanceData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");
                                $("#RemittancesEditDetailModal").modal("hide");
                                remittanceListOnclick();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Not Found");

                                document.getElementById("btnSaveRemittances").innerHTML = "<i class='fa fa-save fa-fw'></i> Save / <i class='fa fa-lock fa-fw'></i> Lock";
                                document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                                $("#btnSaveRemittances").prop("disabled", false);
                                $("#btnCloseRemittances").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Bad Request");

                                document.getElementById("btnSaveRemittances").innerHTML = "<i class='fa fa-save fa-fw'></i> Save / <i class='fa fa-lock fa-fw'></i> Lock";
                                document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                                $("#btnSaveRemittances").prop("disabled", false);
                                $("#btnCloseRemittances").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/remittance/lock/' + remittanceId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: remittanceData,
                        statusCode: {
                            200: function () {
                                toastr.success("Lock Successful");
                                $("#RemittancesEditDetailModal").modal("hide");
                                remittanceListOnclick();
                            },
                            404: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Not Found");

                                document.getElementById("btnSaveRemittances").innerHTML = "<i class='fa fa-save fa-fw'></i> Save / <i class='fa fa-lock fa-fw'></i> Lock";
                                document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                                $("#btnSaveRemittances").prop("disabled", false);
                                $("#btnCloseRemittances").prop("disabled", false);
                            },
                            400: function (message) {
                                toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Bad Request");

                                document.getElementById("btnSaveRemittances").innerHTML = "<i class='fa fa-save fa-fw'></i> Save / <i class='fa fa-lock fa-fw'></i> Lock";
                                document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                                $("#btnSaveRemittances").prop("disabled", false);
                                $("#btnCloseRemittances").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        function unlockRemittancesOnclick() {
            document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Unlocking";
            $("#btnUnlockRemittances").prop("disabled", true);
            $("#btnCloseRemittances").prop("disabled", true);

            if (remittanceId != 0) {
                $.ajax({
                    type: "PUT",
                    url: '/api/remittance/unlock/' + remittanceId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    statusCode: {
                        200: function () {
                            toastr.success("Unlock Successful");
                            remittanceListOnclick();

                            document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                            $("#btnUnlockRemittances").prop("disabled", true);
                            $("#btnSaveRemittances").prop("disabled", false);
                            $("#btnCloseRemittances").prop("disabled", false);

                            document.getElementById("remittanceParticulars").disabled = false;
                            document.getElementById("remittanceAmount").disabled = false;
                            cboRemittanceDateValue.disabled = false;
                            cboRemittanceArea.disabled = false;
                            cboRemittanceStaff.disabled = false;
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Not Found");

                            document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                            $("#btnUnlockRemittances").prop("disabled", false);
                            $("#btnCloseRemittances").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Bad Request");

                            document.getElementById("btnUnlockRemittances").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                            $("#btnUnlockRemittances").prop("disabled", false);
                            $("#btnCloseRemittances").prop("disabled", false);
                        }
                    }
                });
            }
        }

        // on load page
        window.onload = function () {
            NProgress.start();
            toastrModification();

            cboRemittanceDate = new wijmo.input.InputDate('#cboRemittanceDate');
            createCboRemittanceDate();
            cboRemittanceEndDate = new wijmo.input.InputDate('#cboRemittanceEndDate');
            createCboRemittanceEndDate();
            createRemittanceFlexGrid();

            doubleModal();
            $(function () { $("[data-toggle='tooltip']").tooltip(); });

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }
        }
    </script>
</body>
</html>