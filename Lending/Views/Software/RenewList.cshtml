<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Renew List</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-retweet fa-fw"></i> Renew <small>List of Renew Loans</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li class="active">
                                Renew
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                        <input type="text" id="searchLoanApplication" class="form-control" placeholder="Search">
                                    </div>
                                </td>
                                <td>&nbsp;&nbsp;&nbsp;</td>
                                <td align="right">
                                    <button class="btn btn-primary" id="btnAddLoanApplication" onclick="btnAddRenewOnclick()">
                                        <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table border="0">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> Start Renew Date</span>
                                        <div id="cboRenewDate"></div>
                                    </div>
                                </td>
                                <td>
                                    &nbsp;
                                </td>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> End Renew Date</span>
                                        <div id="cboRenewEndDate"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="renewFlexGrid" class="grid"></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                    <span class="glyphicon glyphicon-fast-backward"></span> First
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                    <span class="glyphicon glyphicon-step-backward"></span> Previous
                                </button>
                                <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                    <span class="glyphicon glyphicon-step-forward"></span> Next
                                </button>
                                <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                    <span class="glyphicon glyphicon-fast-forward"></span> Last
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User security stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation loan application modal -->
    <div class="modal fade" id="deleteConfirmationRenewModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Renew</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Renewed Loan?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteRenew" onclick="btnConfirmDeleteRenewOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteRenewModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- loan applciation recontruct Detail Modal -->
    <div class="modal fade" id="renewDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Renew</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Applicant</label>
                            <div class="col-sm-8">
                                <div id="cboApplicant" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Doc. Number</label>
                            <div class="col-sm-8">
                                <div id="cboLoanNumber" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Principal Amount</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField requiredRenew" id="principalAmount" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Balance</label>
                            <div class="col-sm-8">
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField" id="amountToBeRenew" placeholder="0.00" disabled />
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnRenew" onclick="btnRenewOnclick()"><i class="fa fa-refresh fa-fw"></i> Renew</button>
                    <button class="btn btn-danger" id="btnCloseRenew" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- loan applciation renew Detail Modal -->
    @*<div class="modal fade" id="loanrenewDetailModal" role="dialog">
        <div class="modal-dialog">*@
    <!-- Modal content-->
    @*<div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Renew</h4>
                    </div>
                    <div class="modal-body">
                        <form class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-sm-4">Applicant</label>
                                <div class="col-sm-8">
                                    <div id="cboLoanRenewApplicant" style="width: 100%;"></div>
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-sm-4">Principal Amount</label>
                                <div class="col-sm-8">
                                    <div class="input-group numberField">
                                        <span class="input-group-addon">&#8369;</span>
                                        <input type="text" class="form-control numberField requiredLoanRenew" id="loanRenewPrincipalAmount" placeholder="0.00" />
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" id="btnLoanRenew" onclick="btnLoanRenewOnclick()"><i class="fa fa-refresh fa-fw"></i> Renew</button>
                        <button class="btn btn-danger" id="btnCloseLoanRenew" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                    </div>
                </div>
            </div>
        </div>*@

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var cboRenewDate;
        var cboRenewEndDate;
        var loanApplicationCollectionView;
        var renewFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;
        var isLoanDateClicked = false;
        var isLoanEndDateClicked = false;
        var cboApplicant;
        var cboLoanNumber;

        var cboLoanRenewApplicant;

        var date = new Date();
        var y = date.getFullYear();
        var fm = date.getMonth() - 1;
        var m = date.getMonth();
        var firstDay = new Date(y, fm, 1);
        var lastDay = new Date(y, m + 1, 0);

        // reconstuct
        function btnAddRenewOnclick() {
            $("#renewDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });


            $('.requiredRenew').each(function () {
                $(this).css({
                    "border": "",
                });
            });


            document.getElementById("principalAmount").value = "0";
            getApplicant();
        }

        //function btnAddLoanRenewOnclick() {
        //    $("#loanrenewDetailModal").modal({
        //        "show": true,
        //        "backdrop": "static"
        //    });


        //    $('.requiredLoanRenew').each(function () {
        //        $(this).css({
        //            "border": "",
        //        });
        //    });


        //    getLoanRenewApplicant();
        //    document.getElementById("loanRenewPrincipalAmount").value = "0";
        //}

        // get applicant
        function getLoanRenewApplicant() {
            var applicantArray = new Array();
            $.ajax({
                url: '/api/applicant/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (applicantResults) {
                    var disabled = true;
                    if (applicantResults.length > 0) {
                        for (i = 0; i < applicantResults.length; i++) {
                            applicantArray.push({
                                Id: applicantResults[i]["Id"],
                                ApplicantFullName: applicantResults[i]["ApplicantFullName"]
                            });
                        }

                        disabled = false;
                    }

                    cboLoanRenewApplicant.dispose();
                    cboLoanRenewApplicant = new wijmo.input.ComboBox('#cboLoanRenewApplicant', {
                        disabled: disabled,
                        itemsSource: applicantArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "ApplicantFullName",
                        selectedValuePath: "ApplicantFullName"
                    });
                }
            });
        }


        // get applicant
        function getApplicant() {
            var applicantArray = new Array();
            $.ajax({
                url: '/api/loan/list/loanApplicants/InReconstruct/InRenewal',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (applicantResults) {
                    var disabled = true;
                    if (applicantResults.length > 0) {
                        for (i = 0; i < applicantResults.length; i++) {
                            applicantArray.push({
                                ApplicantId: applicantResults[i]["ApplicantId"],
                                Applicant: applicantResults[i]["Applicant"],
                            });
                        }

                        disabled = false;
                    }

                    cboApplicant.dispose();
                    cboApplicant = new wijmo.input.ComboBox('#cboApplicant', {
                        disabled: disabled,
                        itemsSource: applicantArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Applicant",
                        selectedValuePath: "Applicant",
                        onSelectedIndexChanged: function () {
                            getApplicantLoanNumber();
                        }
                    });

                    getApplicantLoanNumber();
                }
            });
        }

        // get applicant
        function getApplicantLoanNumber() {
            var applicantLoanNumberArray = new Array();
            $.ajax({
                url: '/api/loan/list/byApplicantId/InReconstruct/InRenewal/' + cboApplicant.selectedItem["ApplicantId"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (applicantLoanNumberResults) {
                    var disabled = true;
                    if (applicantLoanNumberResults.length > 0) {
                        for (i = 0; i < applicantLoanNumberResults.length; i++) {
                            applicantLoanNumberArray.push({
                                Id: applicantLoanNumberResults[i]["Id"],
                                LoanNumberDetail: applicantLoanNumberResults[i]["LoanNumberDetail"],
                                TotalBalanceAmount: applicantLoanNumberResults[i]["TotalBalanceAmount"],
                                TotalPenaltyAmount: applicantLoanNumberResults[i]["TotalPenaltyAmount"]
                            });
                        }

                        disabled = false;
                    }

                    cboLoanNumber.dispose();
                    cboLoanNumber = new wijmo.input.ComboBox('#cboLoanNumber', {
                        disabled: disabled,
                        itemsSource: applicantLoanNumberArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "LoanNumberDetail",
                        selectedValuePath: "LoanNumberDetail",
                        onSelectedIndexChanged: function () {
                            document.getElementById("amountToBeRenew").value = this.selectedItem["TotalBalanceAmount"].toLocaleString();
                        }
                    });

                    document.getElementById("amountToBeRenew").value = cboLoanNumber.selectedItem["TotalBalanceAmount"].toLocaleString();
                }
            });
        }

        // create cbo date for loan date
        function createCboLoanDate() {
            cboRenewDate.dispose();
            cboRenewDate = new wijmo.input.InputDate('#cboRenewDate', {
                format: 'MM-dd-yyyy',
                value: new Date(firstDay),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();

                    loanApplicationCollectionView = new wijmo.collections.CollectionView(getLoanApplicationList());
                    loanApplicationCollectionView.canFilter = true;
                    loanApplicationCollectionView.pageSize = 15;

                    var filterText = '';
                    $('#searchLoanApplication').keyup(function () {
                        filterText = this.value.toLowerCase();
                        loanApplicationCollectionView.refresh();
                    });

                    loanApplicationCollectionView.filter = function (item) {
                        return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                           || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                           || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1)
                                           || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                           || (item.RenewedDocNumber.toLowerCase().indexOf(filterText) > -1);
                    }

                    loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtons();
                    });

                    loanApplicationCollectionView.currentChanged.addHandler(function (sender, args) {
                        updateStampSecurity();
                    });

                    // Flex Grid
                    renewFlexGrid.itemsSource = loanApplicationCollectionView;
                    renewFlexGrid.trackChanges = true;
                }
            });
        }

        // create cbo date for loan date
        function createCboLoanEndDate() {
            cboRenewEndDate.dispose();
            cboRenewEndDate = new wijmo.input.InputDate('#cboRenewEndDate', {
                format: 'MM-dd-yyyy',
                value: new Date(lastDay),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();

                    loanApplicationCollectionView = new wijmo.collections.CollectionView(getLoanApplicationList());
                    loanApplicationCollectionView.canFilter = true;
                    loanApplicationCollectionView.pageSize = 15;

                    var filterText = '';
                    $('#searchLoanApplication').keyup(function () {
                        filterText = this.value.toLowerCase();
                        loanApplicationCollectionView.refresh();
                    });

                    loanApplicationCollectionView.filter = function (item) {
                        return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                           || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                           || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1)
                                           || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                           || (item.RenewedDocNumber.toLowerCase().indexOf(filterText) > -1);
                    }

                    loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                        updateNavigateButtons();
                    });

                    loanApplicationCollectionView.currentChanged.addHandler(function (sender, args) {
                        updateStampSecurity();
                    });


                    // Flex Grid
                    renewFlexGrid.itemsSource = loanApplicationCollectionView;
                    renewFlexGrid.trackChanges = true;
                }
            });
        }

        // get loan application list
        function getLoanApplicationList() {
            var loanApplicationListArray = new wijmo.collections.ObservableArray;
            var startDate = [cboRenewDate.value.getMonth() + 1, cboRenewDate.value.getDate(), cboRenewDate.value.getFullYear()].join('-');
            var endDate = [cboRenewEndDate.value.getMonth() + 1, cboRenewEndDate.value.getDate(), cboRenewEndDate.value.getFullYear()].join('-');
            $.ajax({
                url: '/api/renew/listByLoanDate/' + startDate + '/' + endDate,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanApplicationListResult) {
                    if (loanApplicationListResult.length > 0) {
                        for (i = 0; i < loanApplicationListResult.length; i++) {
                            var isLocked = false;
                            if (loanApplicationListResult[i]["IsLocked"]) {
                                isLocked = true;
                            }

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            var newDate = new Date(loanApplicationListResult[i]["LoanDate"]);
                            var loanDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            var getDueDate = new Date(loanApplicationListResult[i]["MaturityDate"]);
                            var newDate2 = new Date();
                            var newCurrentDate = ('0' + (newDate2.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate2.getDate()).slice(-2) + '-' + newDate2.getFullYear();
                            var getCurrentDate = new Date(newCurrentDate);
                            var oneDay = 24 * 60 * 60 * 1000;
                            var diffDays = Math.round(Math.abs((getDueDate.getTime() - getCurrentDate.getTime()) / (oneDay)));
                            var loanStatus = "New";
                            if (loanApplicationListResult[i]["IsLocked"]) {
                                if (loanApplicationListResult[i]["TermNoOfDays"] == 0) {
                                    if (loanApplicationListResult[i]["IsReconstructed"]) {
                                        loanStatus = "Reconstructed";
                                    } else {
                                        if (loanApplicationListResult[i]["IsRenewed"]) {
                                            loanStatus = "Renewed";
                                        } else {
                                            if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                loanStatus = "Fully Paid";
                                            } else {
                                                if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                    loanStatus = "Current - No Term";
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (getDueDate.toDateString() == getCurrentDate.toDateString()) {
                                        loanStatus = "Due";
                                    } else {
                                        if (getCurrentDate < getDueDate) {
                                            if (loanApplicationListResult[i]["IsReconstructed"]) {
                                                loanStatus = "Reconstructed";
                                            } else {
                                                if (loanApplicationListResult[i]["IsRenewed"]) {
                                                    loanStatus = "Renewed";
                                                } else {
                                                    if (diffDays == 7) {
                                                        if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                            loanStatus = "Fully Paid";
                                                        } else {
                                                            if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                loanStatus = "Current - 7 Days before due";
                                                            } else {
                                                                loanStatus = "7 Days before due";
                                                            }
                                                        }
                                                    } else {
                                                        if (diffDays == 6) {
                                                            if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                loanStatus = "Fully Paid";
                                                            } else {
                                                                if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                    loanStatus = "Current - 6 Days before due";
                                                                } else {
                                                                    loanStatus = "6 Days before due";
                                                                }
                                                            }
                                                        } else {
                                                            if (diffDays == 5) {
                                                                if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                    loanStatus = "Fully Paid";
                                                                } else {
                                                                    if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                        loanStatus = "Current - 5 Days before due";
                                                                    } else {
                                                                        loanStatus = "5 Days before due";
                                                                    }
                                                                }
                                                            } else {
                                                                if (diffDays == 4) {
                                                                    if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                        loanStatus = "Fully Paid";
                                                                    } else {
                                                                        if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                            loanStatus = "Current - 4 Days before due";
                                                                        } else {
                                                                            loanStatus = "4 Days before due";
                                                                        }
                                                                    }
                                                                } else {
                                                                    if (diffDays == 3) {
                                                                        if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                            loanStatus = "Fully Paid";
                                                                        } else {
                                                                            if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                                loanStatus = "Current - 3 Days before due";
                                                                            } else {
                                                                                loanStatus = "3 Days before due";
                                                                            }
                                                                        }
                                                                    } else {
                                                                        if (diffDays == 2) {
                                                                            if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                                loanStatus = "Fully Paid";
                                                                            } else {
                                                                                if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                                    loanStatus = "Current - 2 Days before due";
                                                                                } else {
                                                                                    loanStatus = "2 Days before due";
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (diffDays == 1) {
                                                                                if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                                    loanStatus = "Fully Paid";
                                                                                } else {
                                                                                    if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                                        loanStatus = "Current - 1 Day before due";
                                                                                    } else {
                                                                                        loanStatus = "1 Day before due";
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                                                    loanStatus = "Fully Paid";
                                                                                } else {
                                                                                    if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                                                        loanStatus = "Current";
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            if (getCurrentDate > getDueDate) {
                                                if (diffDays > 1) {
                                                    if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                        loanStatus = "Fully Paid";
                                                    } else {
                                                        if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                            loanStatus = "Current - Overdue (" + diffDays + " Days)";
                                                        }
                                                    }
                                                } else {
                                                    if (loanApplicationListResult[i]["TotalBalanceAmount"] <= 0) {
                                                        loanStatus = "Fully Paid";
                                                    } else {
                                                        if (loanApplicationListResult[i]["TotalPaidAmount"] > 0) {
                                                            loanStatus = "Current - Overdue (" + diffDays + " Day)";
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else {
                                loanStatus = "Not Locked";
                            }

                            var newMaturityDate = new Date(loanApplicationListResult[i]["MaturityDate"]);
                            var maturityDateValue = ('0' + (newMaturityDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newMaturityDate.getDate()).slice(-2) + '-' + newMaturityDate.getFullYear();

                            loanApplicationListArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditLoanApplicationOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteLoanApplicationOnclick(" + isLocked + ")'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: loanApplicationListResult[i]["Id"],
                                LoanNumber: "RN-" + loanApplicationListResult[i]["LoanNumber"],
                                LoanDate: loanDateValue,
                                MaturityDate: maturityDateValue,
                                Applicant: loanApplicationListResult[i]["Applicant"],
                                Particulars: loanApplicationListResult[i]["Particulars"],
                                PrincipalAmount: loanApplicationListResult[i]["PrincipalAmount"],
                                PreviousBalanceAmount: loanApplicationListResult[i]["PreviousBalanceAmount"],
                                InterestAmount: loanApplicationListResult[i]["InterestAmount"],
                                DeductionAmount: loanApplicationListResult[i]["DeductionAmount"],
                                NetAmount: loanApplicationListResult[i]["NetAmount"],
                                NetCollectionAmount: loanApplicationListResult[i]["NetCollectionAmount"],
                                CollectibleAmount: loanApplicationListResult[i]["CollectibleAmount"],
                                TotalPaidAmount: loanApplicationListResult[i]["TotalPaidAmount"],
                                TotalPenaltyAmount: loanApplicationListResult[i]["TotalPenaltyAmount"],
                                TotalBalanceAmount: loanApplicationListResult[i]["TotalBalanceAmount"],
                                LoanStatus: loanStatus,
                                IsLocked: loanApplicationListResult[i]["IsLocked"],
                                CreatedByUserId: loanApplicationListResult[i]["CreatedByUserId"],
                                CreatedByUser: loanApplicationListResult[i]["CreatedByUser"],
                                CreatedDateTime: loanApplicationListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: loanApplicationListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: loanApplicationListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: loanApplicationListResult[i]["UpdatedDateTime"],
                                RenewedDocNumber: loanApplicationListResult[i]["RenewedDocNumber"],
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return loanApplicationListArray;
        }


        // form input validation
        function inputValidationForLoanRenew() {
            var isValid = true;
            $('.requiredLoanRenew').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }


        // form input validation
        function inputValidationForRenew() {
            var isValid = true;
            $('.requiredRenew').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        //function btnLoanRenewOnclick() {
        //    var loanRenewObject = new Object();
        //    loanRenewObject.ApplicantId = cboLoanRenewApplicant.selectedItem["Id"];
        //    loanRenewObject.RenewPrincipalAmount = document.getElementById("loanRenewPrincipalAmount").value;
        //    var loanRenewData = JSON.stringify(loanRenewObject);

        //    var pamount = parseFloat(document.getElementById('loanRenewPrincipalAmount').value.replace(/,/g, ''));
        //    if (inputValidationForLoanRenew()) {
        //        if (pamount != 0) {
        //            document.getElementById("btnLoanRenew").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Renewing";
        //            $("#btnLoanRenew").prop("disabled", true);
        //            $("#btnCloseLoanRenew").prop("disabled", true);

        //            $.ajax({
        //                type: "POST",
        //                url: '/api/loanRenew/add/loanRenew',
        //                contentType: "application/json; charset=utf-8",
        //                data: loanRenewData,
        //                success: function (id) {
        //                    if (id > 0) {
        //                        window.location = '/Software/RenewDetail?id=' + id;
        //                    } else {
        //                        toastr.error("Bad Request");
        //                    }
        //                }
        //            });
        //        } else {
        //            $('.requiredLoanRenew').each(function () {
        //                $(this).css({
        //                    "border": "1px solid red"
        //                });
        //            });

        //            toastr.error("Please Enter Principal Amount.");
        //        }
        //    } else {
        //        toastr.error("Invalid Entry");
        //    }
        //}

        // add new renew
        function btnRenewOnclick() {
            var loanRenewObject = new Object();
            loanRenewObject.ApplicantId = cboApplicant.selectedItem["ApplicantId"];
            loanRenewObject.ReconstructRenewLoanId = cboLoanNumber.selectedItem["Id"];
            loanRenewObject.RenewPrincipalAmount = document.getElementById("principalAmount").value;
            loanRenewObject.BalanceAmount = document.getElementById("amountToBeRenew").value;
            var loanRenewData = JSON.stringify(loanRenewObject);

            var pamount = parseFloat(document.getElementById('principalAmount').value.replace(/,/g, ''));
            var balanceAmount = parseFloat(document.getElementById('amountToBeRenew').value.replace(/,/g, ''));

            if (inputValidationForRenew()) {
                if (pamount != 0) {
                    if (balanceAmount > pamount) {
                        $('.requiredRenew').each(function () {
                            $(this).css({
                                "border": "1px solid red"
                            });
                        });

                        toastr.error("The Principal Amount must not be lesser than the balance amount.");
                    } else {
                        document.getElementById("btnRenew").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Renewing";
                        $("#btnRenew").prop("disabled", true);
                        $("#btnCloseRenew").prop("disabled", true);

                        $.ajax({
                            type: "POST",
                            url: '/api/loanRenew/add',
                            contentType: "application/json; charset=utf-8",
                            data: loanRenewData,
                            success: function (id) {
                                if (id > 0) {
                                    window.location = '/Software/RenewDetail?id=' + id;
                                } else {
                                    toastr.error("Bad Request");
                                }
                            }
                        });
                    }
                } else {
                    $('.requiredRenew').each(function () {
                        $(this).css({
                            "border": "1px solid red"
                        });
                    });

                    toastr.error("Please Enter Principal Amount.");
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }


        // add new loan application
        function btnAddLoanApplicationOnclick() {
            document.getElementById("btnAddLoanApplication").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Adding";
            $("#btnAddLoanApplication").prop("disabled", true);

            $.ajax({
                type: "POST",
                url: '/api/loan/add',
                contentType: "application/json; charset=utf-8",
                success: function (id) {
                    if (id > 0) {
                        window.location = '/Software/LoanApplicationDetail?id=' + id;
                    } else {
                        toastr.error("Bad Request");
                    }
                }
            });
        }

        // edit loan application
        function btnEditLoanApplicationOnclick() {
            loanApplicationCollectionView.editItem(loanApplicationCollectionView.currentItem);
            var id = loanApplicationCollectionView.currentEditItem.Id;
            window.location = '/Software/RenewDetail?id=' + id;
        }

        // delete loan application
        function btnDeleteLoanApplicationOnclick(isLocked) {
            if (isLocked) {
                toastr.info("Record Locked");
            } else {
                $("#deleteConfirmationRenewModal").modal({
                    "show": true,
                    "backdrop": "static"
                });

                document.getElementById("btnConfirmDeleteRenew").innerHTML = "Delete";
                $("#btnConfirmDeleteRenew").prop("disabled", false);
                $("#btnCloseDeleteRenewModal").prop("disabled", false);
            }
        }
        function btnConfirmDeleteRenewOnclick() {
            document.getElementById("btnConfirmDeleteRenew").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteRenew").prop("disabled", true);
            $("#btnCloseDeleteRenewModal").prop("disabled", true);

            loanApplicationCollectionView.editItem(loanApplicationCollectionView.currentItem);
            var id = loanApplicationCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/loan/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#deleteConfirmationRenewModal').modal('hide');

                        loanApplicationCollectionView = new wijmo.collections.CollectionView(getLoanApplicationList());
                        loanApplicationCollectionView.canFilter = true;
                        loanApplicationCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#searchLoanApplication').keyup(function () {
                            filterText = this.value.toLowerCase();
                            loanApplicationCollectionView.refresh();
                        });

                        loanApplicationCollectionView.filter = function (item) {
                            return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                   || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.RenewedDocNumber.toLowerCase().indexOf(filterText) > -1);
                        }

                        loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtons();
                        });

                        loanApplicationCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateStampSecurity();
                        });

                        // Flex Grid
                        renewFlexGrid.itemsSource = loanApplicationCollectionView;
                        renewFlexGrid.trackChanges = true;
                    },
                    404: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Not Found");
                        $('#deleteConfirmationRenewModal').modal('hide');
                        document.getElementById("btnConfirmDeleteRenew").innerHTML = "Delete";
                        $("#btnConfirmDeleteRenew").prop("disabled", false);
                        $("#btnCloseDeleteRenewModal").prop("disabled", false);
                    },
                    400: function (message) {
                        toastr.error(message.responseText.replace(/^"(.*)"$/, '$1'), "Bad Request");
                        $('#deleteConfirmationRenewModal').modal('hide');
                        document.getElementById("btnConfirmDeleteRenew").innerHTML = "Delete";
                        $("#btnConfirmDeleteRenew").prop("disabled", false);
                        $("#btnCloseDeleteRenewModal").prop("disabled", false);
                    }
                }
            });
        }

        // stamp security
        function updateStampSecurity() {
            var item = loanApplicationCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtons() {
            if (loanApplicationCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            btnCurrentPageGrid.innerHTML = (loanApplicationCollectionView.pageIndex + 1) + ' / ' + loanApplicationCollectionView.pageCount;
        }

        // create loan application flexgrid
        function createLoanApplicationFlexGrid() {
            loanApplicationCollectionView = new wijmo.collections.CollectionView(getLoanApplicationList());
            loanApplicationCollectionView.canFilter = true;
            loanApplicationCollectionView.pageSize = 15;

            var filterText = '';
            $('#searchLoanApplication').keyup(function () {
                filterText = this.value.toLowerCase();
                loanApplicationCollectionView.refresh();
            });

            loanApplicationCollectionView.filter = function (item) {
                return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                   || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.RenewedDocNumber.toLowerCase().indexOf(filterText) > -1);
            }

            loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            loanApplicationCollectionView.currentChanged.addHandler(function (sender, args) {
                updateStampSecurity();
            });

            // Flex Grid
            renewFlexGrid = new wijmo.grid.FlexGrid('#renewFlexGrid');
            renewFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "allowSorting": true,
                                "width": 50,
                            },
                            {
                                "header": "Renew Date",
                                "binding": "LoanDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Due Date",
                                "binding": "MaturityDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Renew No.",
                                "binding": "LoanNumber",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": 220,
                            },
                            {
                                "header": "Status",
                                "binding": "LoanStatus",
                                "allowSorting": true,
                                "width": 190,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 300,
                            },
                            {
                                "header": "Renewed Loan",
                                "binding": "RenewedDocNumber",
                                "allowSorting": true,
                                "width": 230,
                            },
                            {
                                "header": "Renew Amount",
                                "binding": "PrincipalAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Interest",
                                "binding": "InterestAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Deduction",
                                "binding": "DeductionAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Prev. Balance",
                                "binding": "PreviousBalanceAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Net",
                                "binding": "NetAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Net Collection",
                                "binding": "NetCollectionAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Collectible",
                                "binding": "CollectibleAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Total Paid",
                                "binding": "TotalPaidAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Total Penalty",
                                "binding": "TotalPenaltyAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Total Balance",
                                "binding": "TotalBalanceAmount",
                                "allowSorting": true,
                                "width": 160,
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: loanApplicationCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            renewFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();

            btnFirstPageGrid.addEventListener('click', function () {
                loanApplicationCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                loanApplicationCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                loanApplicationCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                loanApplicationCollectionView.moveToLastPage();
                updateNavigateButtons();
            });
        }

        // on load page
        window.onload = function () {
            NProgress.start();
            toastrModification();
            cboRenewDate = new wijmo.input.InputDate('#cboRenewDate');
            createCboLoanDate();
            cboRenewEndDate = new wijmo.input.InputDate('#cboRenewEndDate');
            createCboLoanEndDate();
            createLoanApplicationFlexGrid();

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }

            cboApplicant = new wijmo.input.ComboBox('#cboApplicant');
            cboLoanNumber = new wijmo.input.ComboBox('#cboLoanNumber');
        }
    </script>
</body>
</html>