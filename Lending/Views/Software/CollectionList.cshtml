<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Collection List</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-money fa-fw"></i> Collection <small>List of Collections</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li class="active">
                                Collection
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                        <input type="text" id="searchCollection" class="form-control" placeholder="Search" />
                                    </div>
                                </td>
                                <td>&nbsp;&nbsp;&nbsp;</td>
                                <td align="right">
                                    <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software'">
                                        <i class="fa fa-close fa-fw"></i> Close
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <table>
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> Collection Date</span>
                                        <div id="cboCollectionDate"></div>
                                    </div>
                                </td>
                                <td>
                                    &nbsp; &nbsp; &nbsp;
                                </td>
                                <td>
                                    <div class="input-group">
                                        <div class="input-group-addon"><i class="fa fa-map-pin fa-fw"></i> Area</div>
                                        <div id="cboArea"></div>
                                    </div>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-body">
                        <div id="collectionListFlexGrid" class=""></div>
                    </div>
                    <div class="panel-footer">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Supervisor</label><br />
                                    <input type="text" id="areaSuperVisor" class="form-control" placeholder="Supervisor" disabled>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label>Collector</label><br />
                                    <input type="text" id="areaCollector" class="form-control" placeholder="Collector" disabled>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User security stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var cboCollectionDate;
        var collectionCollectionView;
        var collectionFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;
        var isCollectionDateClicked = false;
        var cboArea;
        var cboCollectionChangeCollector;

        // create cbo date for collection date
        function createCboCollectionDate() {
            cboCollectionDate.dispose();
            cboCollectionDate = new wijmo.input.InputDate('#cboCollectionDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    if (isCollectionDateClicked == true) {
                        NProgress.start();
                        collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByCollectionDateAndAreaIdList());
                        collectionCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchCollection').keyup(function () {
                            filterText = this.value.toLowerCase();
                            collectionCollectionView.refresh();
                        });

                        collectionCollectionView.filter = function (item) {
                            return !filterText || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
                        }

                        // Flex Grid
                        collectionFlexGrid.itemsSource = collectionCollectionView;
                        collectionFlexGrid.trackChanges = true;
                    } else {
                        isCollectionDateClicked = true;
                    }
                }
            });

            cboArea = new wijmo.input.ComboBox('#cboArea');
            createCboArea();
        }

        // get colllection list by collection date and area id
        function getCollectionByCollectionDateAndAreaIdList() {
            var collectionListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collection/list/byCollectionDate/byAreaId/' + [cboCollectionDate.value.getMonth() + 1, cboCollectionDate.value.getDate(), cboCollectionDate.value.getFullYear()].join('-') + "/" + cboArea.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionListResult) {
                    if (collectionListResult.length > 0) {
                        for (i = 0; i < collectionListResult.length; i++) {
                            var isLocked = false;
                            if (collectionListResult[i]["IsLocked"]) {
                                isLocked = true;
                            }

                            var btnClearClass = "btn btn-default btn-xs btn-block";
                            if (collectionListResult[i]["IsCleared"]) {
                                btnClearClass = "btn btn-success btn-xs btn-block";
                            }

                            var btnAbsentClass = "btn btn-default btn-xs btn-block";
                            if (collectionListResult[i]["IsAbsent"]) {
                                btnAbsentClass = "btn btn-danger btn-xs btn-block";
                            }

                            var disableButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                if (!collectionListResult[i]["IsAction"]) {
                                    disableButton = "disabled";
                                } else {
                                    disableButton = "";
                                }
                            }

                            var detailDisabledButton = "disabled"
                            if (canPerformActions == 1) {
                                detailDisabledButton = "";
                            }

                            var newDate = new Date(collectionListResult[i]["CollectionDate"]);
                            var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            collectionListArray.push({
                                DetailButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnDetailOnclick()'" + detailDisabledButton + "><i class='fa fa-edit fa-fw'></i> Detail</button>",
                                ClearButton: "<button class='" + btnClearClass + "' onclick='btnClearOnclick()'" + disableButton + "><i class='fa fa-check fa-fw'></i> Clear</button>",
                                AbsentButton: "<button class='" + btnAbsentClass + "' onclick='btnAbsentOnclick()'" + disableButton + "><i class='fa fa-circle fa-fw'></i> Absent</button>",
                                UndoChangesButton: "<button class='btn btn-default btn-xs btn-block' data-toggle='tooltip' data-placement='top' title='Undo Actions and Changes' onclick='btnUndoChangesOnclick()'" + disableButton + "><i class='fa fa-undo fa-fw'></i></button>",
                                Id: collectionListResult[i]["Id"],
                                LoanId: collectionListResult[i]["LoanId"],
                                LoanNumber: collectionListResult[i]["LoanNumber"],
                                DayNumber: collectionListResult[i]["DayNumber"],
                                ApplicantId: collectionListResult[i]["ApplicantId"],
                                Applicant: collectionListResult[i]["Applicant"],
                                Area: collectionListResult[i]["Area"],
                                IsFullyPaid: collectionListResult[i]["IsFullyPaid"],
                                CollectionDate: collectionDateValue,
                                NetAmount: collectionListResult[i]["NetAmount"],
                                CollectibleAmount: collectionListResult[i]["CollectibleAmount"],
                                PenaltyAmount: collectionListResult[i]["PenaltyAmount"],
                                PaidAmount: collectionListResult[i]["PaidAmount"],
                                PreviousBalanceAmount: collectionListResult[i]["PreviousBalanceAmount"],
                                CurrentBalanceAmount: collectionListResult[i]["CurrentBalanceAmount"],
                                IsCleared: collectionListResult[i]["IsCleared"],
                                IsAbsent: collectionListResult[i]["IsAbsent"],
                                IsPartialPayment: collectionListResult[i]["IsPartialPayment"],
                                IsAdvancePayment: collectionListResult[i]["IsAdvancePayment"],
                                IsFullPayment: collectionListResult[i]["IsFullPayment"],
                                IsDueDate: collectionListResult[i]["IsDueDate"],
                                IsExtendCollection: collectionListResult[i]["IsExtendCollection"],
                                IsOverdueCollection: collectionListResult[i]["IsOverdueCollection"],
                                IsCurrentCollection: collectionListResult[i]["IsCurrentCollection"],
                                IsProcessed: collectionListResult[i]["IsProcessed"],
                                IsAction: collectionListResult[i]["IsAction"],
                                AssignedCollectorId: collectionListResult[i]["AssignedCollectorId"],
                                AssignedCollector: collectionListResult[i]["AssignedCollector"],
                                AssignedCollectorArea: collectionListResult[i]["AssignedCollectorArea"],
                                CurrentCollectorId: collectionListResult[i]["CurrentCollectorId"],
                                CurrentCollector: collectionListResult[i]["CurrentCollector"],
                                CurrentCollectorArea: collectionListResult[i]["CurrentCollectorArea"],
                                Status: "<i class='fa fa-info-circle fa-fw'></i>" + " " + collectionListResult[i]["Status"].toString(),
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return collectionListArray;
        }

        // detail collection
        function btnDetailOnclick() {
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            window.open('/Software/CollectionDetail?applicantId=' + collectionItem.ApplicantId + '&loanId=' + collectionItem.LoanId, '_blank');
        }

        // clear collection
        function btnClearOnclick() {
            NProgress.start();
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            if (!collectionItem.IsCleared) {
                if (collectionItem.CurrentBalanceAmount > 0) {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collection/cleared/update/byId/byLoanId/' + collectionItem.Id + '/' + collectionItem.LoanId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        statusCode: {
                            200: function () {
                                $.ajax({
                                    type: "GET",
                                    url: '/api/collection/isFullyPaid/get/byId/' + collectionItem.Id,
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    success: function (isFullyPaidResult) {
                                        NProgress.done();
                                        toastr.success("Cleared");

                                        collectionItem.IsCleared = true;
                                        collectionItem.IsAbsent = false;
                                        collectionItem.PenaltyAmount = 0;
                                        collectionItem.PaidAmount = collectionItem.CollectibleAmount + collectionItem.PreviousBalanceAmount;
                                        collectionItem.CurrentBalanceAmount = 0;
                                        collectionItem.IsFullyPaid = isFullyPaidResult;
                                        collectionItem.AbsentButton = "<button class='btn btn-default btn-xs btn-block' onclick='btnAbsentOnclick()'><i class='fa fa-circle fa-fw'></i> Absent</button>";
                                        collectionItem.ClearButton = "<button class='btn btn-success btn-xs btn-block' onclick='btnClearOnclick()'><i class='fa fa-check fa-fw'></i> Clear</button>";
                                        collectionItem.Status = "<i class='fa fa-info-circle fa-fw'></i>" + " Paid";

                                        collectionCollectionView.onCollectionChanged(function () {
                                            collectionCollectionView.refresh();
                                        });
                                    }
                                });
                            },
                            404: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                            },
                            400: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                            },
                            500: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                            }
                        }
                    });
                } else {
                    NProgress.done();
                    toastr.info("No Current Balance to be cleared");
                }
            } else {
                NProgress.done();
                toastr.info("Already Cleared");
            }
        }

        // absent collection
        function btnAbsentOnclick() {
            NProgress.start();
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            if (collectionItem.IsDueDate) {
                NProgress.done();
                toastr.error("Cannot Processed by this time because the collection is in due date. To solve this, go to detail page and do some extensions.");
            } else {
                if (!collectionItem.IsAbsent) {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collection/absent/update/byId/byLoanId/' + collectionItem.Id + '/' + collectionItem.LoanId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        statusCode: {
                            200: function () {
                                var newDate = new Date(collectionItem.CollectionDate);
                                var collectionDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');
                                $.ajax({
                                    type: "GET",
                                    url: '/api/collection/penaltyAmount/get/byLoanId/byCollectionDate/' + collectionItem.LoanId + '/' + collectionDateValue,
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    success: function (penaltyValueResult) {
                                        $.ajax({
                                            type: "GET",
                                            url: '/api/collection/isFullyPaid/get/byId/' + collectionItem.Id,
                                            contentType: "application/json; charset=utf-8",
                                            dataType: "json",
                                            success: function (isFullyPaidResult) {
                                                NProgress.done();
                                                toastr.success("Absent");

                                                collectionItem.IsCleared = false;
                                                collectionItem.IsAbsent = true;
                                                collectionItem.PenaltyAmount = penaltyValueResult;
                                                collectionItem.PaidAmount = 0;
                                                collectionItem.CurrentBalanceAmount = collectionItem.CollectibleAmount + collectionItem.PenaltyAmount + collectionItem.PreviousBalanceAmount;
                                                collectionItem.IsFullyPaid = isFullyPaidResult;
                                                collectionItem.AbsentButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnAbsentOnclick()'><i class='fa fa-circle fa-fw'></i> Absent</button>";
                                                collectionItem.ClearButton = "<button class='btn btn-default btn-xs btn-block' onclick='btnClearOnclick()'><i class='fa fa-check fa-fw'></i> Clear</button>";
                                                collectionItem.Status = "<i class='fa fa-info-circle fa-fw'></i>" + " Absent";

                                                collectionCollectionView.onCollectionChanged(function () {
                                                    collectionCollectionView.refresh();
                                                });
                                            }
                                        });
                                    }
                                });
                            },
                            404: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                            },
                            400: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                            },
                            500: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                            }
                        }
                    });
                } else {
                    NProgress.done();
                    toastr.info("Already Absent");
                }
            }
        }

        // undo changes collection
        function btnUndoChangesOnclick() {
            NProgress.start();
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            $.ajax({
                type: "PUT",
                url: '/api/collection/undoChanges/update/byId/byLoanId/' + collectionItem.Id + '/' + collectionItem.LoanId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        var newDate = new Date(collectionItem.CollectionDate);
                        var collectionDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');
                        $.ajax({
                            type: "GET",
                            url: '/api/collection/previousBalance/get/byLoanId/byCollectionDate/' + collectionItem.LoanId + '/' + collectionDateValue,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            success: function (previousBalanceValueResult) {
                                $.ajax({
                                    type: "GET",
                                    url: '/api/collection/isFullyPaid/get/byId/' + collectionItem.Id,
                                    contentType: "application/json; charset=utf-8",
                                    dataType: "json",
                                    success: function (isFullyPaidResult) {
                                        NProgress.done();
                                        toastr.success("Undo");

                                        collectionItem.IsCleared = false;
                                        collectionItem.IsAbsent = false;
                                        collectionItem.PenaltyAmount = 0;
                                        collectionItem.PaidAmount = 0;
                                        collectionItem.PreviousBalanceAmount = previousBalanceValueResult;
                                        collectionItem.CurrentBalanceAmount = collectionItem.CollectibleAmount + previousBalanceValueResult;
                                        collectionItem.IsFullyPaid = isFullyPaidResult;
                                        collectionItem.AbsentButton = "<button class='btn btn-default btn-xs btn-block' onclick='btnAbsentOnclick()'><i class='fa fa-circle fa-fw'></i> Absent</button>";
                                        collectionItem.ClearButton = "<button class='btn btn-default btn-xs btn-block' onclick='btnClearOnclick()'><i class='fa fa-check fa-fw'></i> Clear</button>";
                                        collectionItem.Status = "<i class='fa fa-info-circle fa-fw'></i>" + " ?";

                                        collectionCollectionView.onCollectionChanged(function () {
                                            collectionCollectionView.refresh();
                                        });
                                    }
                                });
                            }
                        });
                    },
                    404: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                    }
                }
            });
        }

        // create collection flexgrid
        function createCollectionFlexGrid() {
            collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByCollectionDateAndAreaIdList());
            collectionCollectionView.canFilter = true;

            var filterText = '';
            $('#searchCollection').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionCollectionView.refresh();
            });

            collectionCollectionView.filter = function (item) {
                return !filterText || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
            }

            // Flex Grid
            collectionFlexGrid = new wijmo.grid.FlexGrid('#collectionListFlexGrid');
            collectionFlexGrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "DetailButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": "2.5*",
                            },
                            {
                                "header": "Collectible",
                                "binding": "CollectibleAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Penalty",
                                "binding": "PenaltyAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Previous",
                                "binding": "PreviousBalanceAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Current",
                                "binding": "CurrentBalanceAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Paid",
                                "binding": "PaidAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "F",
                                "binding": "IsFullyPaid",
                                "allowSorting": true,
                                "width": "0.6*",
                            },
                            {
                                "header": "Status",
                                "binding": "Status",
                                "width": "2.7*",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Absent",
                                "binding": "AbsentButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Clear",
                                "binding": "ClearButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "U",
                                "binding": "UndoChangesButton",
                                "width": 30,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: collectionCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            collectionFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            collectionFlexGrid.columnHeaders.rows.push(hr);
            collectionFlexGrid.columnHeaders.rows[0].allowMerging = true;

            collectionFlexGrid.columnHeaders.columns[0].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 0, 'Detail');

            collectionFlexGrid.columnHeaders.columns[1].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 1, 'Applicant');

            collectionFlexGrid.columnHeaders.columns[2].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 2, 'Collectible');

            collectionFlexGrid.columnHeaders.columns[3].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 3, 'Penalty');

            for (var balancesColumn = 4; balancesColumn <= 5; balancesColumn++) {
                collectionFlexGrid.columnHeaders.setCellData(0, balancesColumn, 'Balances (Amount)');
            }

            collectionFlexGrid.columnHeaders.columns[6].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 6, 'Paid');

            collectionFlexGrid.columnHeaders.columns[7].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 7, 'F');

            collectionFlexGrid.columnHeaders.columns[8].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 8, 'Status');

            for (var actionsColumn = 9; actionsColumn <= 11; actionsColumn++) {
                collectionFlexGrid.columnHeaders.setCellData(0, actionsColumn, 'Actions');
            }
        }

        // cbo Area
        function createCboArea() {
            var areaArray = new Array();
            $.ajax({
                url: '/api/area/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (areaResults) {
                    var disabled = true;
                    if (areaResults.length > 0) {
                        for (i = 0; i < areaResults.length; i++) {
                            areaArray.push({
                                Id: areaResults[i]["Id"],
                                Area: areaResults[i]["Area"],
                                SupervisorStaff: areaResults[i]["SupervisorStaff"],
                                CollectorStaff: areaResults[i]["CollectorStaff"]
                            });
                        }

                        disabled = false;
                    }

                    // applicant
                    cboArea.dispose();
                    cboArea = new wijmo.input.ComboBox('#cboArea', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area",
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByCollectionDateAndAreaIdList());
                            collectionCollectionView.canFilter = true;

                            var filterText = '';
                            $('#searchCollection').keyup(function () {
                                filterText = this.value.toLowerCase();
                                collectionCollectionView.refresh();
                            });

                            collectionCollectionView.filter = function (item) {
                                return !filterText || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
                            }

                            // Flex Grid
                            collectionFlexGrid.itemsSource = collectionCollectionView;
                            collectionFlexGrid.trackChanges = true;

                            document.getElementById("areaSuperVisor").value = this.selectedItem["SupervisorStaff"];
                            document.getElementById("areaCollector").value = this.selectedItem["CollectorStaff"];
                        }
                    });

                    document.getElementById("areaSuperVisor").value = cboArea.selectedItem["SupervisorStaff"];
                    document.getElementById("areaCollector").value = cboArea.selectedItem["CollectorStaff"];

                    createCollectionFlexGrid();
                }
            });
        }

        // on load page
        window.onload = function () {
            NProgress.start();
            toastrModification();
            cboCollectionDate = new wijmo.input.InputDate('#cboCollectionDate');
            createCboCollectionDate();
            doubleModal();
            $(function () { $("[data-toggle='tooltip']").tooltip(); });

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }
        }
    </script>
</body>
</html>