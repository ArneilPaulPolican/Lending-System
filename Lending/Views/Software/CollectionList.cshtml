<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Collection List</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-money fa-fw"></i> Collection <small>List of Collections</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li class="active">
                                Collection
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <table style="width: 100%">
                            <tr>
                                <td>
                                    <div class="input-group">
                                        <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                        <input type="text" id="searchCollection" class="form-control" placeholder="Search" />
                                    </div>
                                </td>
                                <td>&nbsp;&nbsp;&nbsp;</td>
                                <td align="right">
                                    <button class="btn btn-primary" id="btnAddCollection" onclick="btnAddCollectionOnclick()">
                                        <i class="fa fa-plus fa-fw"></i>&nbsp; Add
                                    </button>
                                    <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software'">
                                        <i class="fa fa-close fa-fw"></i> Close
                                    </button>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="panel-heading">
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-calendar fa-fw"></i> Collection Date</span>
                            <div id="cboCollectionDate"></div>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div id="collectionListFlexGrid" class=""></div>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        User security stamp
                    </div>
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6">
                                <p>Created by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                            <div class="col-md-6">
                                <p>Updated by:</p>
                                <div style="padding-left: 10px;">
                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                    <br />
                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                </div>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var cboCollectionDate;
        var collectionCollectionView;
        var collectionFlexGrid;
        var btnFirstPageGrid;
        var btnPreviousPageGrid;
        var btnNextPageGrid;
        var btnLastPageGrid;
        var btnCurrentPageGrid;
        var isCollectionDateClicked = false;
        var cboCollectionChangeCollector;

        // create cbo date for collection date
        function createCboCollectionDate() {
            cboCollectionDate.dispose();
            cboCollectionDate = new wijmo.input.InputDate('#cboCollectionDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    if (isCollectionDateClicked == true) {
                        NProgress.start();
                        collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByCollectionDateAndAreaIdList());
                        collectionCollectionView.canFilter = true;

                        var filterText = '';
                        $('#searchCollection').keyup(function () {
                            filterText = this.value.toLowerCase();
                            collectionCollectionView.refresh();
                        });

                        collectionCollectionView.filter = function (item) {
                            return !filterText || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                               || (item.CollectionNumber.toLowerCase().indexOf(filterText) > -1);
                        }

                        collectionCollectionView.currentChanged.addHandler(function (sender, args) {
                            updateStampSecurity();
                        });

                        // Flex Grid
                        collectionFlexGrid.itemsSource = collectionCollectionView;
                        collectionFlexGrid.trackChanges = true;
                    } else {
                        isCollectionDateClicked = true;
                    }
                }
            });
        }

        // get colllection list by collection date and area id
        function getCollectionByCollectionDateAndAreaIdList() {
            var collectionListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collections/list/ByCollectionDate/' + [cboCollectionDate.value.getMonth() + 1, cboCollectionDate.value.getDate(), cboCollectionDate.value.getFullYear()].join('-'),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionListResult) {
                    if (collectionListResult.length > 0) {
                        for (i = 0; i < collectionListResult.length; i++) {
                            var isLocked = false;
                            if (collectionListResult[i]["IsLocked"]) {
                                isLocked = true;
                            }

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            var newDate = new Date(collectionListResult[i]["CollectionDate"]);
                            var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();
                            
                            collectionListArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditLoanApplicationOnclick()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteLoanApplicationOnclick(" + isLocked + ")'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: collectionListResult[i]["Id"],
                                CollectionNumber: collectionListResult[i]["CollectionNumber"],
                                CollectionDate: collectionDateValue,
                                LoanId: collectionListResult[i]["LoanId"],
                                Applicant: collectionListResult[i]["Applicant"],
                                LoanNumber: collectionListResult[i]["LoanNumber"],
                                LoanDetail: collectionListResult[i]["LoanDetail"],
                                IsCleared: collectionListResult[i]["IsCleared"],
                                IsAbsent: collectionListResult[i]["IsAbsent"],
                                PenaltyAmount: collectionListResult[i]["PenaltyAmount"],
                                IsPartiallyPaid: collectionListResult[i]["IsPartiallyPaid"],
                                IsPaidInAdvanced: collectionListResult[i]["IsPaidInAdvanced"],
                                IsFullyPaid: collectionListResult[i]["IsFullyPaid"],
                                PaidAmount: collectionListResult[i]["PaidAmount"],
                                Status: collectionListResult[i]["Status"],
                                Particulars: collectionListResult[i]["Particulars"],
                                IsLocked: collectionListResult[i]["IsLocked"],
                                CreatedByUserId: collectionListResult[i]["CreatedByUserId"],
                                CreatedByUser: collectionListResult[i]["CreatedByUser"],
                                CreatedDateTime: collectionListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: collectionListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: collectionListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: collectionListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return collectionListArray;
        }

        // stamp security
        function updateStampSecurity() {
            var item = collectionCollectionView.currentItem;
            document.getElementById('stampCreatedBy').innerHTML = item.CreatedByUser;
            document.getElementById('stampCreatedDate').innerHTML = item.CreatedDateTime;
            document.getElementById('stampUpdatedBy').innerHTML = item.UpdatedByUser;
            document.getElementById('stampUpdatedDate').innerHTML = item.UpdatedDateTime;
        }

        // create collection flexgrid
        function createCollectionFlexGrid() {
            collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByCollectionDateAndAreaIdList());
            collectionCollectionView.canFilter = true;

            var filterText = '';
            $('#searchCollection').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionCollectionView.refresh();
            });
            
            collectionCollectionView.filter = function (item) {
                return !filterText || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                   || (item.CollectionNumber.toLowerCase().indexOf(filterText) > -1);
            }

            collectionCollectionView.currentChanged.addHandler(function (sender, args) {
                updateStampSecurity();
            });

            // Flex Grid
            collectionFlexGrid = new wijmo.grid.FlexGrid('#collectionListFlexGrid');
            collectionFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Date",
                                "binding": "CollectionDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Collection Number",
                                "binding": "CollectionNumber",
                                "allowSorting": true,
                                "width": 140,
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": 200,
                            },
                            {
                                "header": "Paid Amount",
                                "binding": "PaidAmount",
                                "allowSorting": true,
                                "width": 150
                            },
                            {
                                "header": "Status",
                                "binding": "Status",
                                "allowSorting": true,
                                "width": 300
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "width": 30,
                                "align": "center",
                                "allowSorting": true,
                                "allowResizing": false,
                                "isContentHtml": true
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionCollectionView,
                isReadOnly: true,
                frozenColumns: 2,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionFlexGrid.trackChanges = true;
        }

        // on load page
        window.onload = function () {
            NProgress.start();
            toastrModification();
            cboCollectionDate = new wijmo.input.InputDate('#cboCollectionDate');
            createCboCollectionDate();
            createCollectionFlexGrid();

            doubleModal();
            $(function () { $("[data-toggle='tooltip']").tooltip(); });

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }
        }
    </script>
</body>
</html>