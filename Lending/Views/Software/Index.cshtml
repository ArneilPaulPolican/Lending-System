<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Software</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-dashboard fa-fw"></i>  Dashboard <small>Main Menu</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li class="active">
                                Dashboard
                            </li>
                        </ol>
                    </div>
                </div>
                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#dailyCollectibles" onclick="refreshLoanLines()">Active</a></li>
                    <li><a data-toggle="tab" href="#dailyCollectiblesOverdue" onclick="refreshoverduetable()">Overdue</a></li>
                    <li><a data-toggle="tab" href="#menus">Menu</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="dailyCollectibles" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4>Active Collection</h4>
                            </div>
                            <div class="panel-heading">
                                <table border="0" style="width: 100%;">
                                    <tr>
                                        <td style="width: 38%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="applicantCollectionsSearchInput" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 20%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Date</span>
                                                <div id="cboDateActive" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 30%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Area</span>
                                                <div id="cboAreaActive" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 9%;" align="right">
                                            <button class="btn btn-primary btn-block" onclick="btnPrintActives()"><i class="fa fa-print fa-fw"></i> Print</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="loanlinesflexgrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="dailyCollectiblesOverdue" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h4>Overdue Collection</h4>
                            </div>
                            <div class="panel-heading">
                                <table border="0" style="width: 100%;">
                                    <tr>
                                        <td style="width: 38%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="applicantCollectionsSearchInputOverdue" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 20%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Date</span>
                                                <div id="cboDateOverdue" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 30%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Area</span>
                                                <div id="cboAreaOverdue" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 9%;" align="right">
                                            <button class="btn btn-primary btn-block" onclick="btnPrintOverdue()"><i class="fa fa-print fa-fw"></i> Print</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="overdueFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridOverdue">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridOverdue">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridOverdue">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridOverdue"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridOverdue">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridOverdue">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="menus" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                Menus
                            </div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <a href="/Software/StaffList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-user fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Staff
                                        </a>
                                        <br />
                                        <a href="/Software/AreaList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-map-marker fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Area
                                        </a>
                                        <br />
                                        <a href="/Software/ApplicantList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-users fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Applicant
                                        </a>
                                        <br />
                                    </div>
                                    <div class="col-md-3">
                                        <a href="/Software/CompanyList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-building fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Company
                                        </a>
                                        <br />
                                        <a href="/Software/UserList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-key fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            User
                                        </a>
                                        <br />
                                        <a href="/Software/SystemTables" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-table fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            System Tables
                                        </a>
                                        <br />
                                    </div>

                                    <div class="col-md-3">
                                        <a href="/Software/LoanApplicationList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-file-text-o fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Loan Application
                                        </a>
                                        <br />
                                        <a href="/Software/CollectionList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-money fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Collection
                                        </a>
                                        <br />
                                        <a href="/Software/ExpensesList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-credit-card fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Expenses
                                        </a>
                                        <br />
                                    </div>
                                    <div class="col-md-3">
                                        <a href="/Software/ReconstructList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-refresh fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Reconstruct
                                        </a>
                                        <br />
                                        <a href="/Software/RenewList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-retweet fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Renew
                                        </a>
                                        <br />
                                        <a href="/Software/Reports" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-print fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Reports
                                        </a>
                                        <br />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        var cboDateActive;
        var cboDateOverdue;
        var cboAreaActive;
        var cboAreaOverdue;
        var activeCollectionView;
        var activeFlexgrid;
        var overdueCollectionView;
        var overdueFlexGrid;

        function createCboDate() {
            cboDateOverdue.dispose();
            cboDateOverdue = new wijmo.input.InputDate('#cboDateOverdue', {
                disabled: true,
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999'
            });

            cboDateActive.dispose();
            cboDateActive = new wijmo.input.InputDate('#cboDateActive', {
                disabled: true,
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    NProgress.start();
                    refreshLoanLines();
                }
            });

            cboAreaActive = new wijmo.input.ComboBox('#cboAreaActive');
            createCboArea();
        }

        function refreshLoanLines() {
            NProgress.start();
            setTimeout(function () {
                activeCollectionView = new wijmo.collections.CollectionView(getLoanLinesData());
                activeCollectionView.canFilter = true;
                activeCollectionView.pageSize = 15;

                var filterText = '';
                $('#applicantCollectionsSearchInput').keyup(function () {
                    filterText = this.value.toLowerCase();
                    activeCollectionView.refresh();
                });

                activeCollectionView.filter = function (item) {
                    return !filterText || (item.DayReference.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                       || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1);
                }

                activeCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtons();
                });

                activeFlexgrid.itemsSource = activeCollectionView;
                activeFlexgrid.trackChanges = true;
            }, 300);
        }

        function createCboArea() {
            var areaArray = new Array();
            $.ajax({
                url: '/api/area/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (areaResults) {
                    var disabled = true;
                    if (areaResults.length > 0) {
                        for (i = 0; i < areaResults.length; i++) {
                            areaArray.push({
                                Id: areaResults[i]["Id"],
                                Area: areaResults[i]["Area"],
                                SupervisorStaff: areaResults[i]["SupervisorStaff"]
                            });
                        }

                        disabled = false;
                    }

                    cboAreaActive.dispose();
                    cboAreaActive = new wijmo.input.ComboBox('#cboAreaActive', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area",
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            refreshLoanLines();
                        }
                    });

                    cboAreaOverdue.dispose();
                    cboAreaOverdue = new wijmo.input.ComboBox('#cboAreaOverdue', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area",
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            refreshoverduetable();
                        }
                    });

                    createFlexGrid();
                }
            });
        }

        function getLoanLinesData() {
            var loanLinesArray = new wijmo.collections.ObservableArray;
            var collectibleDate = [cboDateActive.value.getMonth() + 1, cboDateActive.value.getDate(), cboDateActive.value.getFullYear()].join('-');
            var cboDateActiveValue = ('0' + (cboDateActive.value.getMonth() + 1)).slice(-2) + '-' + ('0' + cboDateActive.value.getDate()).slice(-2) + '-' + cboDateActive.value.getFullYear();

            $.ajax({
                url: '/api/loan/active/' + cboAreaActive.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanApplicationListResult) {
                    if (loanApplicationListResult.length > 0) {
                        for (i = 0; i < loanApplicationListResult.length; i++) {
                            var getDueDate = new Date(loanApplicationListResult[i]["MaturityDate"]);
                            var getCollectibleDate = new Date(cboDateActive.value);
                            var oneDay = 24 * 60 * 60 * 1000;
                            var diffDays = Math.round(Math.abs((getDueDate.getTime() - getCollectibleDate.getTime()) / (oneDay)));

                            var newDate = new Date(loanApplicationListResult[i]["CollectibleDate"]);
                            var collectibleDate = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            var newDueDate = new Date(loanApplicationListResult[i]["MaturityDate"]);
                            var collectionDueDate = ('0' + (newDueDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDueDate.getDate()).slice(-2) + '-' + newDueDate.getFullYear();

                            var loanStatus = "Active";
                            var transactionType = "btnDetailLoan()";

                            if (loanApplicationListResult[i]["IsLoanRenew"]) {
                                loanStatus = "Active Renew";
                                transactionType = "btnDetailRenew()";

                                if (cboDateActiveValue == collectionDueDate) {
                                    loanStatus = "Due";
                                } else {
                                    if (cboDateActiveValue < collectionDueDate) {
                                        if (diffDays == 7) {
                                            loanStatus = "7 Days before due";
                                        } else {
                                            if (diffDays == 6) {
                                                loanStatus = "6 Days before due";
                                            } else {
                                                if (diffDays == 5) {
                                                    loanStatus = "5 Days before due";
                                                } else {
                                                    if (diffDays == 4) {
                                                        loanStatus = "4 Days before due";
                                                    } else {
                                                        if (diffDays == 3) {
                                                            loanStatus = "3 Days before due";
                                                        } else {
                                                            if (diffDays == 2) {
                                                                loanStatus = "2 Days before due";
                                                            } else {
                                                                if (diffDays == 1) {
                                                                    loanStatus = "1 Day before due";
                                                                } else {
                                                                    if (diffDays == 0) {
                                                                        loanStatus = "Tomorrow is Due Date";
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if (cboDateActiveValue > collectionDueDate) {
                                            loanStatus = "Overdue";
                                        }
                                    }
                                }
                            } else {
                                if (cboDateActiveValue == collectionDueDate) {
                                    loanStatus = "Due";
                                } else {
                                    if (cboDateActiveValue < collectionDueDate) {
                                        if (diffDays == 7) {
                                            loanStatus = "7 Days before due";
                                        } else {
                                            if (diffDays == 6) {
                                                loanStatus = "6 Days before due";
                                            } else {
                                                if (diffDays == 5) {
                                                    loanStatus = "5 Days before due";
                                                } else {
                                                    if (diffDays == 4) {
                                                        loanStatus = "4 Days before due";
                                                    } else {
                                                        if (diffDays == 3) {
                                                            loanStatus = "3 Days before due";
                                                        } else {
                                                            if (diffDays == 2) {
                                                                loanStatus = "2 Days before due";
                                                            } else {
                                                                if (diffDays == 1) {
                                                                    loanStatus = "1 Day before due";
                                                                } else {
                                                                    if (diffDays == 0) {
                                                                        loanStatus = "Tomorrow is Due Date";
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        if (cboDateActiveValue > collectionDueDate) {
                                            loanStatus = "Overdue";
                                        }
                                    }
                                }
                            }

                            var docNumber = "LN-" + loanApplicationListResult[i]["LoanNumber"];
                            if (loanApplicationListResult[i]["IsLoanRenew"]) {
                                docNumber = "RN-" + loanApplicationListResult[i]["LoanNumber"];
                            }

                            loanLinesArray.push({
                                BtnDetail: "<button class='btn btn-primary btn-xs btn-block' onclick='" + transactionType + "'><i class='fa fa-edit fa-fw'></i> Detail</button>",
                                Id: loanApplicationListResult[i]["Id"],
                                DayReference: loanApplicationListResult[i]["DayReference"],
                                CollectibleDate: collectibleDate,
                                DueDate: collectionDueDate,
                                CollectibleAmount: loanApplicationListResult[i]["CollectibleAmount"],
                                LoanDate: newDate.getFullYear().toString(),
                                DocNumber: docNumber,
                                Applicant: loanApplicationListResult[i]["Applicant"],
                                Particulars: loanApplicationListResult[i]["Particulars"],
                                PrincipalAmount: loanApplicationListResult[i]["PrincipalAmount"],
                                InterestAmount: loanApplicationListResult[i]["InterestAmount"],
                                DeductionAmount: loanApplicationListResult[i]["DeductionAmount"],
                                NetAmount: loanApplicationListResult[i]["NetAmount"],
                                NetCollectionAmount: loanApplicationListResult[i]["NetCollectionAmount"],
                                TotalPaidAmount: loanApplicationListResult[i]["TotalPaidAmount"],
                                TotalPenaltyAmount: loanApplicationListResult[i]["TotalPenaltyAmount"],
                                TotalBalanceAmount: loanApplicationListResult[i]["TotalBalanceAmount"],
                                LoanStatus: loanStatus,
                                IsLocked: loanApplicationListResult[i]["IsLocked"],
                                CreatedByUserId: loanApplicationListResult[i]["CreatedByUserId"],
                                CreatedByUser: loanApplicationListResult[i]["CreatedByUser"],
                                CreatedDateTime: loanApplicationListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: loanApplicationListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: loanApplicationListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: loanApplicationListResult[i]["UpdatedDateTime"],
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return loanLinesArray;
        }

        function updateNavigateButtons() {
            if (activeCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            btnCurrentPageGrid.innerHTML = (activeCollectionView.pageIndex + 1) + ' / ' + activeCollectionView.pageCount;
        }

        function createFlexGrid() {
            activeCollectionView = new wijmo.collections.CollectionView(getLoanLinesData());
            activeCollectionView.canFilter = true;
            activeCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionsSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                activeCollectionView.refresh();
            });

            activeCollectionView.filter = function (item) {
                return !filterText || (item.DayReference.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                   || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1);
            }

            activeCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            activeFlexgrid = new wijmo.grid.FlexGrid('#loanlinesflexgrid');
            activeFlexgrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "BtnDetail",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": "5*",
                            },
                            {
                                "header": "Doc Number",
                                "binding": "DocNumber",
                                "allowSorting": true,
                                "width": "3*",
                            },
                            {
                                "header": "Due Date",
                                "binding": "DueDate",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Balance",
                                "binding": "TotalBalanceAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Collectible",
                                "binding": "CollectibleAmount",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Status",
                                "binding": "LoanStatus",
                                "allowSorting": true,
                                "width": "3*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: activeCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            activeFlexgrid.trackChanges = true;

            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();

            btnFirstPageGrid.addEventListener('click', function () {
                activeCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                activeCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                activeCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                activeCollectionView.moveToLastPage();
                updateNavigateButtons();
            });
        }

        function btnDetailLoan() {
            activeCollectionView.editItem(activeCollectionView.currentItem);
            var currentItem = activeCollectionView.currentEditItem;
            window.open("/Software/LoanApplicationDetail?id=" + currentItem.Id, "_blank");
        }


        function btnDetailReconstruct() {
            activeCollectionView.editItem(activeCollectionView.currentItem);
            var currentItem = activeCollectionView.currentEditItem;
            window.open("/Software/ReconstructDetail?id=" + currentItem.Id, "_blank");
        }

        function btnDetailRenew() {
            activeCollectionView.editItem(activeCollectionView.currentItem);
            var currentItem = activeCollectionView.currentEditItem;
            window.open("/Software/RenewDetail?id=" + currentItem.Id, "_blank");
        }

        function getOverdueLoans() {
            var collectibleDate = [cboDateOverdue.value.getMonth() + 1, cboDateOverdue.value.getDate(), cboDateOverdue.value.getFullYear()].join('-');
            var loanApplicationListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/loan/overdue/' + cboAreaOverdue.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanApplicationListResult) {
                    if (loanApplicationListResult.length > 0) {
                        for (i = 0; i < loanApplicationListResult.length; i++) {
                            var newDate = new Date(loanApplicationListResult[i]["LoanDate"]);
                            var loanDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            loanApplicationListArray.push({
                                DetailButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnReconstructDetailOnclick()'><i class='fa fa-edit fa-fw'></i> Detail </button>",
                                Id: loanApplicationListResult[i]["Id"],
                                LoanNumber: "RC-" + loanApplicationListResult[i]["LoanNumber"],
                                LoanDate: newDate.getFullYear().toString(),
                                Applicant: loanApplicationListResult[i]["Applicant"],
                                Particulars: loanApplicationListResult[i]["Particulars"],
                                PrincipalAmount: loanApplicationListResult[i]["PrincipalAmount"],
                                InterestAmount: loanApplicationListResult[i]["InterestAmount"],
                                DeductionAmount: loanApplicationListResult[i]["DeductionAmount"],
                                NetAmount: loanApplicationListResult[i]["NetAmount"],
                                NetCollectionAmount: loanApplicationListResult[i]["NetCollectionAmount"],
                                TotalPaidAmount: loanApplicationListResult[i]["TotalPaidAmount"],
                                TotalPenaltyAmount: loanApplicationListResult[i]["TotalPenaltyAmount"],
                                TotalBalanceAmount: loanApplicationListResult[i]["TotalBalanceAmount"],
                                LoanStatus: "Overdue",
                                CollectibleAmount: loanApplicationListResult[i]["CollectibleAmount"],
                                IsLocked: loanApplicationListResult[i]["IsLocked"],
                                CreatedByUserId: loanApplicationListResult[i]["CreatedByUserId"],
                                CreatedByUser: loanApplicationListResult[i]["CreatedByUser"],
                                CreatedDateTime: loanApplicationListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: loanApplicationListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: loanApplicationListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: loanApplicationListResult[i]["UpdatedDateTime"],
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return loanApplicationListArray;
        }

        function btnReconstructDetailOnclick() {
            overdueCollectionView.editItem(overdueCollectionView.currentItem);
            var id = overdueCollectionView.currentEditItem.Id;
            window.location = '/Software/ReconstructDetail?id=' + id;
        }

        function updateNavigateButtonsLoanApplications() {
            if (overdueCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridOverdue').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridOverdue').style.display = 'block';
            btnCurrentPageGridOverdue.innerHTML = (overdueCollectionView.pageIndex + 1) + ' / ' + overdueCollectionView.pageCount;
        }

        function refreshoverduetable() {
            createOverdueFlexGrid();
            window.createOverdueFlexGrid = function () {
                return true;
            }

            NProgress.start();
            setTimeout(function () {
                overdueCollectionView = new wijmo.collections.CollectionView(getOverdueLoans());
                overdueCollectionView.canFilter = true;
                overdueCollectionView.pageSize = 15;

                var filterText = '';
                $('#applicantCollectionsSearchInputOverdue').keyup(function () {
                    filterText = this.value.toLowerCase();
                    overdueCollectionView.refresh();
                });

                overdueCollectionView.filter = function (item) {
                    return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                       || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
                }

                overdueCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtonsLoanApplications();
                });

                overdueFlexGrid.itemsSource = overdueCollectionView;
                overdueFlexGrid.trackChanges = true;
            }, 300);
        }

        function createOverdueFlexGrid() {
            overdueCollectionView = new wijmo.collections.CollectionView(getOverdueLoans());
            overdueCollectionView.canFilter = true;
            overdueCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionsSearchInputOverdue').keyup(function () {
                filterText = this.value.toLowerCase();
                overdueCollectionView.refresh();
            });

            overdueCollectionView.filter = function (item) {
                return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                   || (item.LoanStatus.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            overdueCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanApplications();
            });

            overdueFlexGrid = new wijmo.grid.FlexGrid('#overdueFlexGrid');
            overdueFlexGrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "DetailButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": 206,
                            },
                            {
                                "header": "Doc Number",
                                "binding": "LoanNumber",
                                "allowSorting": true,
                                "width": 130,
                            },
                            {
                                "header": "Year",
                                "binding": "LoanDate",
                                "allowSorting": true,
                                "width": 70,
                            },
                            {
                                "header": "Balance",
                                "binding": "TotalBalanceAmount",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Collectible",
                                "binding": "CollectibleAmount",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 250,
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: overdueCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            overdueFlexGrid.trackChanges = true;

            btnFirstPageGridOverdue = document.getElementById('btnMoveToFirstPageGridOverdue');
            btnPreviousPageGridOverdue = document.getElementById('btnMoveToPreviousPageGridOverdue');
            btnNextPageGridOverdue = document.getElementById('btnMoveToNextPageGridOverdue');
            btnLastPageGridOverdue = document.getElementById('btnMoveToLastPageGridOverdue');
            btnCurrentPageGridOverdue = document.getElementById('btnCurrentPageGridOverdue');

            updateNavigateButtonsLoanApplications();

            btnFirstPageGridOverdue.addEventListener('click', function () {
                overdueCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanApplications();
            });
            btnPreviousPageGridOverdue.addEventListener('click', function () {
                overdueCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanApplications();
            });
            btnNextPageGridOverdue.addEventListener('click', function () {
                overdueCollectionView.moveToNextPage();
                updateNavigateButtonsLoanApplications();
            });
            btnLastPageGridOverdue.addEventListener('click', function () {
                overdueCollectionView.moveToLastPage();
                updateNavigateButtonsLoanApplications();
            });
        }

        function btnPrintActives() {
            var dateActive = new Date(cboDateActive.value);
            var collectibleDate = ('0' + (dateActive.getMonth() + 1)).slice(-2) + '-' + ('0' + dateActive.getDate()).slice(-2) + '-' + dateActive.getFullYear();
            window.open("/RepDailyAreaCollectionsPDF/dailyAreaCollectionsPDF?date=" + collectibleDate + "&areaId=" + cboAreaActive.selectedItem["Id"], "_blank");
        }

        function btnPrintOverdue() {
            var dateActive = new Date(cboDateOverdue.value);
            var collectibleDate = ('0' + (dateActive.getMonth() + 1)).slice(-2) + '-' + ('0' + dateActive.getDate()).slice(-2) + '-' + dateActive.getFullYear();
            window.open("/RepOverdueCollectionPDF/overdueCollection?date=" + collectibleDate + "&areaId=" + cboAreaOverdue.selectedItem["Id"], "_blank");
        }

        window.onload = function () {
            NProgress.start();
            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {

            } else {
                $(':button').prop('disabled', true);
                getUserRightsMessageError();
            }

            cboDateActive = new wijmo.input.InputDate('#cboDateActive');
            cboDateOverdue = new wijmo.input.InputDate('#cboDateOverdue');
            cboAreaOverdue = new wijmo.input.ComboBox('#cboAreaOverdue');
            createCboDate();
        }
    </script>
</body>
</html>