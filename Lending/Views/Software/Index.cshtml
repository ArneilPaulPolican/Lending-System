<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Software</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-dashboard fa-fw"></i>  Dashboard <small>Main Menu</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li class="active">
                                Dashboard
                            </li>
                        </ol>
                    </div>
                </div>

                <ul class="nav nav-tabs">
                    <li class="active"><a data-toggle="tab" href="#dailyCollectibles" onclick="refreshLoanLines()">Active</a></li>
                    <li><a data-toggle="tab" href="#dailyCollectiblesOverdue" onclick="refreshoverduetable()">Overdue</a></li>
                    <li><a data-toggle="tab" href="#menus">Menu</a></li>
                </ul>
                <br />
                <div class="tab-content">
                    <div id="dailyCollectibles" class="tab-pane fade in active">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table border="0" style="width: 100%;">
                                    <tr>
                                        <td style="width: 38%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="applicantCollectionsSearchInput" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 20%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Date</span>
                                                <div id="cboDate" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 30%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Area</span>
                                                <div id="cboArea" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 9%;" align="right">
                                            <button class="btn btn-primary btn-block" onclick="btnPrintActives()"><i class="fa fa-print fa-fw"></i> Print</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="loanlinesflexgrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="dailyCollectiblesOverdue" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <table border="0" style="width: 100%;">
                                    <tr>
                                        <td style="width: 38%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                <input type="text" id="applicantCollectionsSearchInputOverdue" class="form-control" placeholder="Search" />
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 20%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Date</span>
                                                <div id="cboDateOverdue" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 30%;">
                                            <div class="input-group">
                                                <span class="input-group-addon"> Area</span>
                                                <div id="cboAreaOverdue" style="width: 100%;"></div>
                                            </div>
                                        </td>
                                        <td style="width: 1%;"></td>
                                        <td style="width: 9%;" align="right">
                                            <button class="btn btn-primary btn-block" onclick="btnPrintOverdue()"><i class="fa fa-print fa-fw"></i> Print</button>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                            <div class="panel-body">
                                <div id="loanApplicationFlexGrid"></div>
                            </div>
                            <div class="panel-footer">
                                <div class="row">
                                    <div class="btn-group col-md-7" id="naviagtionPageGridOverdue">
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridOverdue">
                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridOverdue">
                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridOverdue"></button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridOverdue">
                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                        </button>
                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridOverdue">
                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="menus" class="tab-pane fade">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                Menus
                            </div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-3">
                                        <a href="/Software/StaffList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-user fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Staff
                                        </a>
                                        <br />
                                        <a href="/Software/AreaList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-map-marker fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Area
                                        </a>
                                        <br />
                                        <a href="/Software/ApplicantList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-users fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Applicant
                                        </a>
                                        <br />
                                    </div>
                                    <div class="col-md-3">
                                        <a href="/Software/CompanyList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-building fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Company
                                        </a>
                                        <br />
                                        <a href="/Software/UserList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-key fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            User
                                        </a>
                                        <br />
                                        <a href="/Software/SystemTables" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-table fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            System Tables
                                        </a>
                                        <br />
                                    </div>

                                    <div class="col-md-3">
                                        <a href="/Software/LoanApplicationList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-file-text-o fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Loan Application
                                        </a>
                                        <br />
                                        <a href="/Software/CollectionList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-money fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Collection
                                        </a>
                                        <br />
                                        <a href="/Software/ExpensesList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-credit-card fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Expenses
                                        </a>
                                        <br />
                                    </div>
                                    <div class="col-md-3">
                                        <a href="/Software/ReconstructList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-refresh fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Reconstruct
                                        </a>
                                        <br />
                                        <a href="/Software/RenewList" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-retweet fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Renew
                                        </a>
                                        <br />
                                        <a href="/Software/Reports" class="btn btn-success btn-lg btn-block">
                                            <i class="fa fa-print fa-3x fa-fw" style="margin-bottom: 10px;"></i>
                                            <br />
                                            Reports
                                        </a>
                                        <br />
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        var cboDate;
        var cboDateOverdue;
        var isCboDateSelected = false;
        var cboArea;
        var loanLinesCollectionView;
        var loanLinesFlexgrid;
        var cboAreaOverdue;

        function createCboDate() {
            cboDateOverdue.dispose();
            cboDateOverdue = new wijmo.input.InputDate('#cboDateOverdue', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999'
            });

            cboDate.dispose();
            cboDate = new wijmo.input.InputDate('#cboDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    if (isCboDateSelected == true) {
                        NProgress.start();
                        loanLinesCollectionView = new wijmo.collections.CollectionView(getLoanLinesData());
                        loanLinesCollectionView.canFilter = true;
                        loanLinesCollectionView.pageSize = 15;

                        var filterText = '';
                        $('#applicantCollectionsSearchInput').keyup(function () {
                            filterText = this.value.toLowerCase();
                            loanLinesCollectionView.refresh();
                        });

                        loanLinesCollectionView.filter = function (item) {
                            return !filterText || (item.DayReference.toLowerCase().indexOf(filterText) > -1)
                                               || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
                        }

                        loanLinesCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtons();
                        });

                        loanLinesFlexgrid.itemsSource = loanLinesCollectionView;
                        loanLinesFlexgrid.trackChanges = true;
                        //getTotalCollection();
                    } else {
                        isCboDateSelected = true;
                    }
                }
            });

            cboArea = new wijmo.input.ComboBox('#cboArea');
            createCboArea();
        }

        function refreshLoanLines() {
            NProgress.start();
            setTimeout(function () {
                loanLinesCollectionView = new wijmo.collections.CollectionView(getLoanLinesData());
                loanLinesCollectionView.canFilter = true;
                loanLinesCollectionView.pageSize = 15;

                var filterText = '';
                $('#applicantCollectionsSearchInput').keyup(function () {
                    filterText = this.value.toLowerCase();
                    loanLinesCollectionView.refresh();
                });

                loanLinesCollectionView.filter = function (item) {
                    return !filterText || (item.DayReference.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
                }

                loanLinesCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtons();
                });

                loanLinesFlexgrid.itemsSource = loanLinesCollectionView;
                loanLinesFlexgrid.trackChanges = true;
            }, 300);
        }

        function createCboArea() {
            var areaArray = new Array();
            $.ajax({
                url: '/api/area/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (areaResults) {
                    var disabled = true;
                    if (areaResults.length > 0) {
                        for (i = 0; i < areaResults.length; i++) {
                            areaArray.push({
                                Id: areaResults[i]["Id"],
                                Area: areaResults[i]["Area"],
                                SupervisorStaff: areaResults[i]["SupervisorStaff"]
                            });
                        }

                        disabled = false;
                    }

                    cboArea.dispose();
                    cboArea = new wijmo.input.ComboBox('#cboArea', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area",
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            loanLinesCollectionView = new wijmo.collections.CollectionView(getLoanLinesData());
                            loanLinesCollectionView.canFilter = true;
                            loanLinesCollectionView.pageSize = 15;

                            var filterText = '';
                            $('#applicantCollectionsSearchInput').keyup(function () {
                                filterText = this.value.toLowerCase();
                                loanLinesCollectionView.refresh();
                            });

                            loanLinesCollectionView.filter = function (item) {
                                return !filterText || (item.DayReference.toLowerCase().indexOf(filterText) > -1)
                                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
                            }

                            loanLinesCollectionView.collectionChanged.addHandler(function (sender, args) {
                                updateNavigateButtons();
                            });

                            loanLinesFlexgrid.itemsSource = loanLinesCollectionView;
                            loanLinesFlexgrid.trackChanges = true;

                            //document.getElementById("areaSupervisor").value = this.selectedItem["SupervisorStaff"];
                            //getTotalCollection();
                        }
                    });

                    //document.getElementById("areaSupervisor").value = cboArea.selectedItem["SupervisorStaff"];
                    createFlexGrid();

                    //getTotalCollection();

                    cboAreaOverdue.dispose();
                    cboAreaOverdue = new wijmo.input.ComboBox('#cboAreaOverdue', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area",
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            loanApplicationCollectionView = new wijmo.collections.CollectionView(getOverdueLoans());
                            loanApplicationCollectionView.canFilter = true;
                            loanApplicationCollectionView.pageSize = 15;

                            var filterText = '';
                            $('#searchLoanApplication').keyup(function () {
                                filterText = this.value.toLowerCase();
                                loanApplicationCollectionView.refresh();
                            });

                            loanApplicationCollectionView.filter = function (item) {
                                return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                                   || (item.Area.toLowerCase().indexOf(filterText) > -1);
                            }

                            loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                                updateNavigateButtonsLoanApplications();
                            });

                            loanApplicationCollectionView.currentChanged.addHandler(function (sender, args) {
                                updateStampSecurity();
                            });

                            // Flex Grid
                            loanApplicationFlexGrid.itemsSource = loanApplicationCollectionView;
                            loanApplicationFlexGrid.trackChanges = true;
                        }
                    });

                    createOverdueFlexGrid();
                }
            });
        }

        //function getTotalCollection() {
        //    var collectibleDate = [cboDate.value.getMonth() + 1, cboDate.value.getDate(), cboDate.value.getFullYear()].join('-');
        //    $.ajax({
        //        url: '/api/areaStaff/defaultStaff/' + cboArea.selectedItem["Id"],
        //        cache: false,
        //        type: 'GET',
        //        contentType: 'application/json; charset=utf-8',
        //        success: function (collectorResults) {
        //            if (collectorResults != null) {
        //                document.getElementById("areaCollector").value = collectorResults.Staff;

        //                $.ajax({
        //                    url: '/api/expenses/totalExpenses/' + collectibleDate + '/' + collectorResults.StaffId,
        //                    cache: false,
        //                    type: 'GET',
        //                    contentType: 'application/json; charset=utf-8',
        //                    success: function (totalExpense) {
        //                        document.getElementById("totalExpense").value = totalExpense.toLocaleString();

        //                        var totalCollection = document.getElementById("totalCollection").value;
        //                        var totalExpense = totalExpense.toLocaleString();

        //                        document.getElementById("netCollection").value = (totalCollection - totalExpense).toLocaleString();
        //                    }
        //                });
        //            } else {
        //                document.getElementById("totalExpense").value = 0;
        //                var totalCollection = document.getElementById("totalCollection").value;
        //                document.getElementById("netCollection").value = totalCollection;
        //            }
        //        }
        //    });
        //}

        function getLoanLinesData() {
            var loanLinesArray = new wijmo.collections.ObservableArray;
            var collectibleDate = [cboDate.value.getMonth() + 1, cboDate.value.getDate(), cboDate.value.getFullYear()].join('-');

            $.ajax({
                url: '/api/loanLines/listByCollectibleDateDate/byAreaId/' + collectibleDate + '/' + cboArea.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanLinesResults) {
                    if (loanLinesResults.length > 0) {
                        for (i = 0; i < loanLinesResults.length; i++) {

                            var getDueDate = new Date(loanLinesResults[i]["DueDate"]);
                            var getCollectibleDate = new Date(loanLinesResults[i]["CollectibleDate"]);

                            var oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds
                            var diffDays = Math.round(Math.abs((getDueDate.getTime() - getCollectibleDate.getTime()) / (oneDay)));

                            var loanStatus = "Active";
                            var transactionType = "btnDetailLoan()";

                            if (loanLinesResults[i]["CollectibleDate"] == loanLinesResults[i]["DueDate"]) {
                                loanStatus = "Active (Due)";
                            } else {
                                if (loanLinesResults[i]["IsLoanRenew"]) {
                                    if (diffDays == 7) {
                                        loanStatus = "Active (Renew) - 7 Days before Due"
                                    } else {
                                        if (diffDays == 6) {
                                            loanStatus = "Active (Renew) - 6 Days before Due"
                                        } else {
                                            if (diffDays == 5) {
                                                loanStatus = "Active (Renew) - 5 Days before Due"
                                            } else {
                                                if (diffDays == 4) {
                                                    loanStatus = "Active (Renew) - 4 Days before Due"
                                                } else {
                                                    if (diffDays == 3) {
                                                        loanStatus = "Active (Renew) - 3 Days before Due"
                                                    } else {
                                                        if (diffDays == 2) {
                                                            loanStatus = "Active (Renew) - 2 Days before Due"
                                                        } else {
                                                            if (diffDays == 1) {
                                                                loanStatus = "Active (Renew) - 1 Day before Due"
                                                            } else {
                                                                loanStatus = "Active (Renew)";
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    transactionType = "btnDetailRenew()"
                                } else {
                                    if (diffDays == 7) {
                                        loanStatus = "Active - 7 Days before Due"
                                    } else {
                                        if (diffDays == 6) {
                                            loanStatus = "Active - 6 Days before Due"
                                        } else {
                                            if (diffDays == 5) {
                                                loanStatus = "Active - 5 Days before Due"
                                            } else {
                                                if (diffDays == 4) {
                                                    loanStatus = "Active - 4 Days before Due"
                                                } else {
                                                    if (diffDays == 3) {
                                                        loanStatus = "Active - 3 Days before Due"
                                                    } else {
                                                        if (diffDays == 2) {
                                                            loanStatus = "Active - 2 Days before Due"
                                                        } else {
                                                            if (diffDays == 1) {
                                                                loanStatus = "Active - 1 Day before Due"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            var newDate = new Date(loanLinesResults[i]["CollectibleDate"]);
                            var collectibleDate = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            var newDueDate = new Date(loanLinesResults[i]["DueDate"]);
                            var collectionDueDate = ('0' + (newDueDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDueDate.getDate()).slice(-2) + '-' + newDueDate.getFullYear();

                            loanLinesArray.push({
                                BtnDetail: "<button class='btn btn-primary btn-xs btn-block' onclick='" + transactionType + "'><i class='fa fa-edit fa-fw'></i> Detail</button>",
                                Id: loanLinesResults[i]["Id"],
                                DayReference: loanLinesResults[i]["DayReference"],
                                CollectibleDate: collectibleDate,
                                CollectibleAmount: loanLinesResults[i]["CollectibleAmount"],
                                PaidAmount: loanLinesResults[i]["PaidAmount"],
                                PenaltyAmount: loanLinesResults[i]["PenaltyAmount"],
                                Applicant: loanLinesResults[i]["Applicant"],
                                LoanStatus: loanStatus,
                                LoanId: loanLinesResults[i]["LoanId"],
                                DueDate: collectionDueDate
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return loanLinesArray;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtons() {
            if (loanLinesCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            btnCurrentPageGrid.innerHTML = (loanLinesCollectionView.pageIndex + 1) + ' / ' + loanLinesCollectionView.pageCount;
        }

        function createFlexGrid() {
            loanLinesCollectionView = new wijmo.collections.CollectionView(getLoanLinesData());
            loanLinesCollectionView.canFilter = true;
            loanLinesCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionsSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                loanLinesCollectionView.refresh();
            });

            loanLinesCollectionView.filter = function (item) {
                return !filterText || (item.DayReference.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1);
            }

            loanLinesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtons();
            });

            loanLinesFlexgrid = new wijmo.grid.FlexGrid('#loanlinesflexgrid');
            loanLinesFlexgrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "BtnDetail",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": "3.5*",
                            },
                            {
                                "header": "Day Reference",
                                "binding": "DayReference",
                                "allowSorting": true,
                                "width": "7*",
                            },
                            {
                                "header": "Due Date",
                                "binding": "DueDate",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Status",
                                "binding": "LoanStatus",
                                "allowSorting": true,
                                "width": "3.5*",
                            },
                            {
                                "header": "Collectible",
                                "binding": "CollectibleAmount",
                                "allowSorting": true,
                                "width": "2*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: loanLinesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            loanLinesFlexgrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtons();

            btnFirstPageGrid.addEventListener('click', function () {
                loanLinesCollectionView.moveToFirstPage();
                updateNavigateButtons();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                loanLinesCollectionView.moveToPreviousPage();
                updateNavigateButtons();
            });
            btnNextPageGrid.addEventListener('click', function () {
                loanLinesCollectionView.moveToNextPage();
                updateNavigateButtons();
            });
            btnLastPageGrid.addEventListener('click', function () {
                loanLinesCollectionView.moveToLastPage();
                updateNavigateButtons();
            });
        }

        function btnDetailLoan() {
            loanLinesCollectionView.editItem(loanLinesCollectionView.currentItem);
            var currentItem = loanLinesCollectionView.currentEditItem;
            window.open("/Software/LoanApplicationDetail?id=" + currentItem.LoanId, "_blank");
        }


        function btnDetailReconstruct() {
            loanLinesCollectionView.editItem(loanLinesCollectionView.currentItem);
            var currentItem = loanLinesCollectionView.currentEditItem;
            window.open("/Software/ReconstructDetail?id=" + currentItem.LoanId, "_blank");
        }

        function btnDetailRenew() {
            loanLinesCollectionView.editItem(loanLinesCollectionView.currentItem);
            var currentItem = loanLinesCollectionView.currentEditItem;
            window.open("/Software/RenewDetail?id=" + currentItem.LoanId, "_blank");
        }

        //function btnCSV() {
        //    var CSV = '';
        //    var dailyCollectionReport = [];
        //    var areaName = cboArea.selectedItem["Area"];
        //    var fileName = areaName + 'DailyCollection.CSV';

        //    for (i = 0; i < loanLinesCollectionView.items.length; i++) {
        //        dailyCollectionReport.push({
        //            Applicant: loanLinesCollectionView.items[i].Applicant,
        //            DueDate: loanLinesCollectionView.items[i].DueDate,
        //            DayReference: loanLinesCollectionView.items[i].DayReference,
        //            LoanStatus: loanLinesCollectionView.items[i].LoanStatus,
        //            CollectibleAmount: loanLinesCollectionView.items[i].CollectibleAmount,
        //            PaidAmount: loanLinesCollectionView.items[i].PaidAmount,
        //            PenaltyAmount: loanLinesCollectionView.items[i].PenaltyAmount
        //        });
        //    }

        //    // Rows
        //    var Headers = [];
        //    Headers.push({
        //        Applicant: "Applicant",
        //        DueDate: "Due Date",
        //        DayReference: "Day Ref.",
        //        LoanStatus: "Status",
        //        CollectibleAmount: "Collectible",
        //        PaidAmount: "Collected",
        //        PenaltyAmount: "Penalty"
        //    });

        //    var header = '';
        //    // Rows
        //    for (var b in Headers[0]) {
        //        header += '"' + Headers[0][b] + '",';
        //    }

        //    CSV = areaName + " Daily Collection" + '\r\n\n';
        //    CSV += header + '\r\n\n';
        //    for (var i = 0; i < dailyCollectionReport.length; i++) {
        //        var row = '';
        //        for (var a in dailyCollectionReport[i]) {
        //            row += '"' + dailyCollectionReport[i][a] + '",';
        //        }
        //        row.slice(0, row.length - 1);
        //        CSV += row + '\r\n';

        //        if (i == dailyCollectionReport.length - 1) {
        //            var totalActive = document.getElementById("totalActives").value;
        //            var totalOverdue = document.getElementById("totalOverdues").value;
        //            var totalActiveAndTotalOverdue = document.getElementById("totalActiveAndOverdues").value;
        //            var totalCollectibles = document.getElementById("totalColletibles").value;
        //            var totalCollections = document.getElementById("totalCollection").value;
        //            var totalGasExpenses = document.getElementById("totalExpense").value;
        //            var netCollection = document.getElementById("netCollection").value;

        //            var totalActiveArray = ["Total Actives", totalActive];
        //            totalActiveArray.slice(0, totalActiveArray.length - 1);

        //            var totalOverdueArray = ["Total Overdues", totalOverdue];
        //            totalOverdueArray.slice(0, totalOverdueArray.length - 1);

        //            var totalActiveAndTotalOverduerArray = ["=", totalActiveAndTotalOverdue];
        //            totalActiveAndTotalOverduerArray.slice(0, totalActiveAndTotalOverduerArray.length - 1);

        //            var totalCollectiblesArray = ["Total Collectibles", totalCollectibles];
        //            totalCollectiblesArray.slice(0, totalCollectiblesArray.length - 1);

        //            var totalCollectionsArray = ["Total Collections", totalCollections];
        //            totalCollectionsArray.slice(0, totalCollectionsArray.length - 1);

        //            var totalGasExpensesArray = ["Gas Expense", totalGasExpenses];
        //            totalGasExpensesArray.slice(0, totalGasExpensesArray.length - 1);

        //            var netCollectionArray = ["Net Collection", netCollection];
        //            netCollectionArray.slice(0, netCollectionArray.length - 1);

        //            CSV += '\r\n' + totalActiveArray + '\r\n';
        //            CSV += totalOverdueArray + '\r\n';
        //            CSV += totalActiveAndTotalOverduerArray + '\r\n';
        //            CSV += '\r\n' + totalCollectiblesArray + '\r\n';
        //            CSV += '\r\n' + totalCollectionsArray + '\r\n';
        //            CSV += totalGasExpensesArray + '\r\n';
        //            CSV += netCollectionArray + '\r\n';

        //            var supervisor = document.getElementById("areaSupervisor").value;
        //            var collector = document.getElementById("areaCollector").value;

        //            var superVisorArray = ["Supervisor Collection", supervisor];
        //            superVisorArray.slice(0, superVisorArray.length - 1);

        //            var collectorArray = ["Collector", collector];
        //            collectorArray.slice(0, collectorArray.length - 1);

        //            var checkedByArray = ["Checked By", " "];
        //            checkedByArray.slice(0, checkedByArray.length - 1);

        //            CSV += '\r\n' + superVisorArray + '\r\n';
        //            CSV += collectorArray + '\r\n';
        //            CSV += checkedByArray + '\r\n';
        //        }
        //    }

        //    if (CSV == '') {
        //        toastr.error("No data.");
        //    } else {
        //        var link = document.createElement("a");

        //        if (link.download !== undefined) {
        //            var blob = new Blob([CSV], { type: 'text/csv;charset=utf-8;' });
        //            var url = URL.createObjectURL(blob);
        //            link.setAttribute("href", url);
        //            link.setAttribute("download", fileName);
        //            link.style = "visibility:hidden";
        //        }

        //        if (navigator.msSaveBlob) {
        //            link.addEventListener("click", function (event) {
        //                var blob = new Blob([CSV], {
        //                    "type": "text/csv;charset=utf-8;"
        //                });
        //                navigator.msSaveBlob(blob, fileName);
        //            }, false);
        //        }

        //        document.body.appendChild(link);
        //        link.click();
        //        document.body.removeChild(link);

        //        toastr.success("Dowload successful.");
        //    }
        //}

        var loanApplicationCollectionView;
        var loanApplicationFlexGrid;

        // get loan application list
        function getOverdueLoans() {
            var loanApplicationListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/loan/overdue/' + cboAreaOverdue.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanApplicationListResult) {
                    if (loanApplicationListResult.length > 0) {
                        for (i = 0; i < loanApplicationListResult.length; i++) {
                            var newDate = new Date(loanApplicationListResult[i]["LoanDate"]);
                            var loanDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            var loanStatus = "Overdue";
                            if (loanApplicationListResult[i]["ForOverdue"]) {
                                loanStatus = "Old Overdue";
                            }

                            //else {
                            //    if (loanApplicationListResult[i]["IsLoanReconstruct"]) {
                            //        loanStatus = "Reconstructed (Overdue)";
                            //    } else {
                            //        if (loanApplicationListResult[i]["IsRenew"]) {
                            //            loanStatus = "Renewed";
                            //        }
                            //    }
                            //}

                            loanApplicationListArray.push({
                                DetailButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnReconstructDetailOnclick()'><i class='fa fa-edit fa-fw'></i> Detail </button>",
                                Id: loanApplicationListResult[i]["Id"],
                                LoanNumber: "RC-" + loanApplicationListResult[i]["LoanNumber"],
                                LoanDate: newDate.getFullYear().toString(),
                                Applicant: loanApplicationListResult[i]["Applicant"],
                                Particulars: loanApplicationListResult[i]["Particulars"],
                                PrincipalAmount: loanApplicationListResult[i]["PrincipalAmount"],
                                InterestAmount: loanApplicationListResult[i]["InterestAmount"],
                                DeductionAmount: loanApplicationListResult[i]["DeductionAmount"],
                                NetAmount: loanApplicationListResult[i]["NetAmount"],
                                NetCollectionAmount: loanApplicationListResult[i]["NetCollectionAmount"],
                                TotalPaidAmount: loanApplicationListResult[i]["TotalPaidAmount"],
                                TotalPenaltyAmount: loanApplicationListResult[i]["TotalPenaltyAmount"],
                                TotalBalanceAmount: loanApplicationListResult[i]["TotalBalanceAmount"],
                                IsFullyPaid: loanApplicationListResult[i]["IsFullyPaid"],
                                LoanStatus: loanStatus,
                                IsLocked: loanApplicationListResult[i]["IsLocked"],
                                CreatedByUserId: loanApplicationListResult[i]["CreatedByUserId"],
                                CreatedByUser: loanApplicationListResult[i]["CreatedByUser"],
                                CreatedDateTime: loanApplicationListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: loanApplicationListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: loanApplicationListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: loanApplicationListResult[i]["UpdatedDateTime"],
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return loanApplicationListArray;
        }

        function btnReconstructDetailOnclick() {
            loanApplicationCollectionView.editItem(loanApplicationCollectionView.currentItem);
            var id = loanApplicationCollectionView.currentEditItem.Id;
            window.location = '/Software/ReconstructDetail?id=' + id;
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsLoanApplications() {
            if (loanApplicationCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridOverdue').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridOverdue').style.display = 'block';
            btnCurrentPageGridOverdue.innerHTML = (loanApplicationCollectionView.pageIndex + 1) + ' / ' + loanApplicationCollectionView.pageCount;
        }

        function refreshoverduetable() {
            NProgress.start();
            setTimeout(function () {
                loanApplicationCollectionView = new wijmo.collections.CollectionView(getOverdueLoans());
                loanApplicationCollectionView.canFilter = true;
                loanApplicationCollectionView.pageSize = 15;

                var filterText = '';
                $('#searchLoanApplication').keyup(function () {
                    filterText = this.value.toLowerCase();
                    loanApplicationCollectionView.refresh();
                });

                loanApplicationCollectionView.filter = function (item) {
                    return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                       || (item.Area.toLowerCase().indexOf(filterText) > -1);
                }

                loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtonsLoanApplications();
                });

                // Flex Grid
                loanApplicationFlexGrid.itemsSource = loanApplicationCollectionView;
                loanApplicationFlexGrid.trackChanges = true;
            }, 300);
        }

        // create loan application flexgrid
        function createOverdueFlexGrid() {
            loanApplicationCollectionView = new wijmo.collections.CollectionView(getOverdueLoans());
            loanApplicationCollectionView.canFilter = true;
            loanApplicationCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionsSearchInputOverdue').keyup(function () {
                filterText = this.value.toLowerCase();
                loanApplicationCollectionView.refresh();
            });

            loanApplicationCollectionView.filter = function (item) {
                return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Applicant.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Area.toLowerCase().indexOf(filterText) > -1);
            }

            loanApplicationCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanApplications();
            });

            // Flex Grid
            loanApplicationFlexGrid = new wijmo.grid.FlexGrid('#loanApplicationFlexGrid');
            loanApplicationFlexGrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "DetailButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Applicant",
                                "binding": "Applicant",
                                "allowSorting": true,
                                "width": 206,
                            },
                            {
                                "header": "Doc Number",
                                "binding": "LoanNumber",
                                "allowSorting": true,
                                "width": 130,
                            },
                            {
                                "header": "Year",
                                "binding": "LoanDate",
                                "allowSorting": true,
                                "width": 70,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 250,
                            },
                            {
                                "header": "Status",
                                "binding": "LoanStatus",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Balance",
                                "binding": "TotalBalanceAmount",
                                "allowSorting": true,
                                "width": 140,
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: loanApplicationCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            loanApplicationFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridOverdue = document.getElementById('btnMoveToFirstPageGridOverdue');
            btnPreviousPageGridOverdue = document.getElementById('btnMoveToPreviousPageGridOverdue');
            btnNextPageGridOverdue = document.getElementById('btnMoveToNextPageGridOverdue');
            btnLastPageGridOverdue = document.getElementById('btnMoveToLastPageGridOverdue');
            btnCurrentPageGridOverdue = document.getElementById('btnCurrentPageGridOverdue');

            updateNavigateButtonsLoanApplications();

            btnFirstPageGridOverdue.addEventListener('click', function () {
                loanApplicationCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanApplications();
            });
            btnPreviousPageGridOverdue.addEventListener('click', function () {
                loanApplicationCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanApplications();
            });
            btnNextPageGridOverdue.addEventListener('click', function () {
                loanApplicationCollectionView.moveToNextPage();
                updateNavigateButtonsLoanApplications();
            });
            btnLastPageGridOverdue.addEventListener('click', function () {
                loanApplicationCollectionView.moveToLastPage();
                updateNavigateButtonsLoanApplications();
            });
        }

        // print
        function btnPrintActives() {
            var dateActive = new Date(cboDate.value);
            var collectibleDate = ('0' + (dateActive.getMonth() + 1)).slice(-2) + '-' + ('0' + dateActive.getDate()).slice(-2) + '-' + dateActive.getFullYear();
            window.open("/RepDailyAreaCollectionsPDF/dailyAreaCollectionsPDF?date=" + collectibleDate + "&areaId=" + cboArea.selectedItem["Id"], "_blank");
        }

        // print
        function btnPrintOverdue() {
            var dateActive = new Date(cboDateOverdue.value);
            var collectibleDate = ('0' + (dateActive.getMonth() + 1)).slice(-2) + '-' + ('0' + dateActive.getDate()).slice(-2) + '-' + dateActive.getFullYear();
            window.open("/RepOverdueCollectionPDF/overdueCollection?date=" + collectibleDate + "&areaId=" + cboAreaOverdue.selectedItem["Id"], "_blank");
        }

        // on load page
        window.onload = function () {
            NProgress.start();
            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                //$(':button').prop('disabled', false);
                NProgress.done();
            } else {
                $(':button').prop('disabled', true);
                NProgress.done();
                getUserRightsMessageError();
            }

            cboDate = new wijmo.input.InputDate('#cboDate');
            cboDateOverdue = new wijmo.input.InputDate('#cboDateOverdue');
            cboAreaOverdue = new wijmo.input.ComboBox('#cboAreaOverdue');
            createCboDate();
        }
    </script>
</body>
</html>