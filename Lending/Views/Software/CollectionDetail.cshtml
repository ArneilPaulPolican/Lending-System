<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>DLH - Collection Detail</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Header -->
    @Html.Partial("HomeHeader")

    <section class="software-section">
        <div class="container">
            <div class="row">
                <div class="col-lg-3">
                    <div class="list-group">
                        <a href="/Software" class="list-group-item">
                            <i class="fa fa-dashboard fa-fw"></i> &nbsp; Dashboard
                        </a>
                        <a href="/Software/ApplicantList" class="list-group-item">
                            <i class="fa fa-users fa-fw"></i> &nbsp; Applicant
                        </a>
                        <a href="/Software/LoanApplicationList" class="list-group-item">
                            <i class="fa fa-file-text-o fa-fw"></i> &nbsp; Loan
                        </a>
                        <a href="/Software/CollectionList" class="list-group-item active">
                            <i class="fa fa-money fa-fw"></i> &nbsp; Collection
                        </a>
                        <a href="#" class="list-group-item"><i class="fa fa-credit-card fa-fw"></i> &nbsp; Disbursement</a>
                        <a href="/Software/Tables" class="list-group-item">
                            <i class="fa fa-table fa-fw"></i> &nbsp; Tables
                        </a>
                        <a href="/Software/Reports" class="list-group-item">
                            <i class="fa fa-print fa-fw"></i> &nbsp; Reports
                        </a>
                        <a href="/Software/CompanyList" class="list-group-item">
                            <i class="fa fa-building fa-fw"></i> &nbsp; Company
                        </a>
                        <a href="#" class="list-group-item"><i class="fa fa-key fa-fw"></i> &nbsp; Users</a>
                        <a href="#" class="list-group-item"><i class="fa fa-gears fa-fw"></i> &nbsp; Settings</a>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            User security stamp
                        </div>
                        <div class="panel-body">
                            <p>Created by:</p>
                            <div style="padding-left: 10px;">
                                <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                <br />
                                <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                            </div>
                            <hr />
                            <p>Updated by:</p>
                            <div style="padding-left: 10px;">
                                <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                <br />
                                <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-9">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <table style="width: 100%">
                                <tr>
                                    <td>
                                        <h4>Collection Detail</h4>
                                    </td>
                                    <td align="right">
                                        <button class="btn btn-primary" id="btnLock" onclick="btnLockOnClick()">
                                            <i class="fa fa-lock fa-fw"></i> Lock
                                        </button>
                                        <button class="btn btn-primary" id="btnUnlock" onclick="btnUnlockOnClick()">
                                            <i class="fa fa-unlock fa-fw"></i> Unlock
                                        </button>
                                        <button class="btn btn-primary" id="btnPrint" onclick="btnPrintOnClick()">
                                            <i class="fa fa-file-pdf-o fa-fw"></i> PDF
                                        </button>
                                        <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software/CollectionList'">
                                            <i class="fa fa-close fa-fw"></i> Close
                                        </button>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="panel-body">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Collection Header Form
                                </div>
                                <div class="panel-body">
                                    <dl class="dl-horizontal">
                                        <dt>Collection Number</dt>
                                        <dd><input type="text" class="form-control requiredCollection" id="collectionNumber" placeholder="Collection Number" /></dd>
                                        <dt>Collection Date</dt>
                                        <dd><div id="collectionDate"></div> &nbsp; <span id="collectionDateString"></span></dd>
                                        <dt>Branch</dt>
                                        <dd><div id="collectionBranch"></div></dd>
                                        <dt>Account</dt>
                                        <dd><div id="collectionAccount"></div></dd>
                                        <dt>Applicant</dt>
                                        <dd><div id="collectionApplicant"></div><span style="color: red" id="noApplicant"></span></dd>
                                        <dt>Particulars</dt>
                                        <dd><textarea class="form-control requiredCollection" id="collectionParticulars" placeholder="Particulars"></textarea></dd>
                                        <dt>Prepared by</dt>
                                        <dd><div id="collectionPreparedBy"></div></dd>
                                        <dt>Verified by</dt>
                                        <dd><div id="collectionVerifiedBy"></div></dd>
                                        <dt>Is Cleared</dt>
                                        <dd><input type="checkbox" id="collectionIsCleared" /></dd>
                                    </dl>
                                </div>
                            </div>
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <table style="width: 100%">
                                        <tr>
                                            <td>
                                                Collection Lines (Collect/Paid Amount)
                                            </td>
                                            <td align="right">
                                                <button class="btn btn-primary btn-sm" id="btnAddCollectionLines" onclick="btnAddCollectionLinesOnclick()">
                                                    <i class="fa fa-plus fa-fw"></i> Add
                                                </button>
                                                <button class="btn btn-primary btn-sm" id="btnAddCollectables">
                                                    <i class="fa fa-list fa-fw"></i> Collectables
                                                </button>
                                            </td>
                                        </tr>
                                    </table>
                                </div>
                                <div class="panel-body">
                                    <div id="collectionLinesFlexGrid" class="grid"></div>
                                </div>
                                <div class="panel-footer">
                                    <table style="width: 100%" border="0">
                                        <tr>
                                            <td width="40%">
                                                <div class="input-group">
                                                    <span class="input-group-addon">Total Amount</span>
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" id="totalCollectionAmount" class="form-control numberField" placeholder="0.00">
                                                </div>
                                            </td>
                                            <td width="60%"></td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="panel-footer" align="right">
                            <button class="btn btn-primary" id="btnLockButtom" onclick="btnLockOnClick()">
                                <i class="fa fa-lock fa-fw"></i> Lock
                            </button>
                            <button class="btn btn-primary" id="btnUnlockButtom" onclick="btnUnlockOnClick()">
                                <i class="fa fa-unlock fa-fw"></i> Unlock
                            </button>
                            <button class="btn btn-primary" id="btnPrintButtom" onclick="btnPrintOnClick()">
                                <i class="fa fa-file-pdf-o fa-fw"></i> PDF
                            </button>
                            <button class="btn btn-danger" id="btnCloseButtom" onclick="window.location = '/Software/CollectionList'">
                                <i class="fa fa-close fa-fw"></i> Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- collection lines Detail Modal -->
    <div class="modal fade" id="collectionLineEditDetailModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Collection Line Detail</h4>
                </div>
                <div class="modal-body">
                    <dl class="dl-horizontal">
                        <dt>Account</dt>
                        <dd><div id="collectionLinesAccount"></div></dd>
                        <dt>Pay Type</dt>
                        <dd><div id="collectionLinesPayType"></div></dd>
                        <dt>Check Number</dt>
                        <dd><input type="text" class="form-control requiredCollectionLines" id="collectionLineCheckNumber" placeholder="Collection Number" /></dd>
                        <dt>Check Date</dt>
                        <dd><div id="collectionLinesCheckDate"></div> &nbsp; <span id="collectionLineCheckDateString"></span></dd>
                        <dt>Check Bank</dt>
                        <dd><input type="text" class="form-control requiredCollectionLines" id="collectionLineCheckBank" placeholder="Collection Number" /></dd>
                        <dt>Particulars</dt>
                        <dd>
                            <textarea class="form-control requiredCollectionLines" id="collectionLinesParticulars" placeholder="Particulars"></textarea>
                        </dd>
                        <dt>Loan Number</dt>
                        <dd><div id="collectionLinesLoanNumber"></div></dd>
                        <dt>Amount</dt>
                        <dd>
                            <div class="input-group numberField">
                                <span class="input-group-addon">&#8369;</span>
                                <input type="text" id="collectionLinesAmount" class="form-control numberField requiredCollectionLines" placeholder="0.00">
                            </div>
                        </dd>
                        <dt>Collector</dt>
                        <dd><div id="collectionLinesCollector"></div></dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveCollectionLine" onclick="saveCollectionLineOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseCollectionLine" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation Collection Line modal -->
    <div class="modal fade" id="deleteConfirmationCollectionLineModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Collection Line (Paid Amount)</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this Collection Line (Paid Amount)?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteCollectionLine" onclick="btnConfirmDeleteCollectionLineOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnCloseDeleteCollectionLineModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    @Html.Partial("HomeFooter")

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global varibles
        var cboCollectionDate;
        var cboCollectionBranch;
        var cboCollectionAccount;
        var cboCollectionApplicant;
        var cboCollectionPreparedByUser;
        var cboCollectionVerifiedBy;
        var isLocked = false;
        var collectionLinesCollectionView;
        var collectionLinesFlexGrid;
        var cboCollectionLineAccount;
        var cboCollectionLinePayType;
        var cboCollectionLineCheckDate;
        var cboCollectionLineLoanNumber;
        var cboCollectionLinesCollector;

        // create collection Date
        function createCollectionDate() {
            cboCollectionDate = new wijmo.input.InputDate('#collectionDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    var dateValue = this.value.getMonth() + 1;
                    var month = "";

                    if (dateValue == 1) {
                        month = "January";
                    } else if (dateValue == 2) {
                        month = "February";
                    } else if (dateValue == 3) {
                        month = "March";
                    } else if (dateValue == 4) {
                        month = "April";
                    } else if (dateValue == 5) {
                        month = "May";
                    } else if (dateValue == 6) {
                        month = "June";
                    } else if (dateValue == 7) {
                        month = "July";
                    } else if (dateValue == 8) {
                        month = "August";
                    } else if (dateValue == 9) {
                        month = "September";
                    } else if (dateValue == 10) {
                        month = "October";
                    } else if (dateValue == 11) {
                        month = "November";
                    } else if (dateValue == 12) {
                        month = "December";
                    } else {
                        month = "";
                    }

                    document.getElementById("collectionDateString").innerHTML = month + " " + this.value.getDate() + ", " + this.value.getFullYear();
                }
            });

            var dateValue = cboCollectionDate.value.getMonth() + 1;
            var month = "";

            if (dateValue == 1) {
                month = "January";
            } else if (dateValue == 2) {
                month = "February";
            } else if (dateValue == 3) {
                month = "March";
            } else if (dateValue == 4) {
                month = "April";
            } else if (dateValue == 5) {
                month = "May";
            } else if (dateValue == 6) {
                month = "June";
            } else if (dateValue == 7) {
                month = "July";
            } else if (dateValue == 8) {
                month = "August";
            } else if (dateValue == 9) {
                month = "September";
            } else if (dateValue == 10) {
                month = "October";
            } else if (dateValue == 11) {
                month = "November";
            } else if (dateValue == 12) {
                month = "December";
            } else {
                month = "";
            }

            document.getElementById("collectionDateString").innerHTML = month + " " + cboCollectionDate.value.getDate() + ", " + cboCollectionDate.value.getFullYear();

            cboCollectionBranch = new wijmo.input.ComboBox('#collectionBranch');
            getBranch();
        }

        // get branch
        function getBranch() {
            var branchArray = new Array();
            $.ajax({
                url: '/api/branch/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (branchResults) {
                    var disabled = true;
                    if (branchResults.length > 0) {
                        for (i = 0; i < branchResults.length; i++) {
                            branchArray.push({
                                Id: branchResults[i]["Id"],
                                Branch: branchResults[i]["Branch"],
                            });
                        }

                        disabled = false;

                        cboCollectionAccount = new wijmo.input.ComboBox('#collectionAccount');
                        getAccount();
                    } else {

                        cboCollectionAccount = new wijmo.input.ComboBox('#collectionAccount');
                        getAccount();
                    }

                    cboCollectionBranch.dispose();
                    cboCollectionBranch = new wijmo.input.ComboBox('#collectionBranch', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: branchArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Branch",
                        selectedValuePath: "Branch"
                    });
                }
            });
        }

        // get account
        function getAccount() {
            var accountArray = new Array();
            $.ajax({
                url: '/api/account/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountResults) {
                    var disabled = true;
                    if (accountResults.length > 0) {
                        for (i = 0; i < accountResults.length; i++) {
                            accountArray.push({
                                Id: accountResults[i]["Id"],
                                Account: accountResults[i]["Account"],
                            });
                        }

                        disabled = false;

                        cboCollectionApplicant = new wijmo.input.ComboBox('#collectionApplicant');
                        getApplicant();
                    } else {
                        cboCollectionApplicant = new wijmo.input.ComboBox('#collectionApplicant');
                        getApplicant();
                    }

                    cboCollectionAccount.dispose();
                    cboCollectionAccount = new wijmo.input.ComboBox('#collectionAccount', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: accountArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Account",
                        selectedValuePath: "Account"
                    });
                }
            });
        }

        // get applicant
        function getApplicant() {
            var applicantArray = new Array();
            $.ajax({
                url: '/api/applicant/listByLocked',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (applicantResults) {
                    var disabled = true;
                    if (applicantResults.length > 0) {
                        for (i = 0; i < applicantResults.length; i++) {
                            applicantArray.push({
                                Id: applicantResults[i]["Id"],
                                ApplicantFullName: applicantResults[i]["ApplicantFullName"],
                            });
                        }

                        disabled = false;

                        cboCollectionPreparedByUser = new wijmo.input.ComboBox('#collectionPreparedBy');
                        cboCollectionVerifiedBy = new wijmo.input.ComboBox('#collectionVerifiedBy');
                        getUser();

                    } else {
                        cboCollectionPreparedByUser = new wijmo.input.ComboBox('#collectionPreparedBy');
                        cboCollectionVerifiedBy = new wijmo.input.ComboBox('#collectionVerifiedBy');
                        getUser();

                        //cboloanApplicationArea = new wijmo.input.ComboBox('#loanApplicationArea');
                        //getArea();

                        //$("#btnLock").prop("disabled", true);
                        //$("#btnLockButtom").prop("disabled", true);
                        //$("#btnAddLoanApplicationLines").prop("disabled", true);
                        //$("#btnAddLoanRequirements").prop("disabled", true);
                        //document.getElementById("noApplicant").innerHTML = "&nbsp; <i class='fa fa-info fa-fw'></i> Applicant Record is Empty or Unlocked";
                    }

                    cboCollectionApplicant.dispose();
                    cboCollectionApplicant = new wijmo.input.ComboBox('#collectionApplicant', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: applicantArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "ApplicantFullName",
                        selectedValuePath: "ApplicantFullName",
                        onSelectedIndexChanged: function () {
                            createCollectionLinesLoanNumber();
                        }
                    });

                    //if (applicantResults.length > 0) {
                    //    $('#loanApplicationApplicant').each(function () {
                    //        $(this).css({
                    //            "border": ""
                    //        });
                    //    });
                    //} else {
                    //    $('#loanApplicationApplicant').each(function () {
                    //        $(this).css({
                    //            "border": "1px solid red"
                    //        });
                    //    });
                    //}
                }
            });
        }

        // get users
        function getUser() {
            var userArray = new Array();
            $.ajax({
                url: '/api/user/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (userrResults) {
                    var disabled = true;
                    if (userrResults.length > 0) {
                        for (i = 0; i < userrResults.length; i++) {
                            userArray.push({
                                Id: userrResults[i]["Id"],
                                FullName: userrResults[i]["FullName"],
                            });
                        }

                        disabled = false;
                    }

                    cboCollectionPreparedByUser.dispose();
                    cboCollectionPreparedByUser = new wijmo.input.ComboBox('#collectionPreparedBy', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: userArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "FullName",
                        selectedValuePath: "FullName"
                    });

                    cboCollectionVerifiedBy.dispose();
                    cboCollectionVerifiedBy = new wijmo.input.ComboBox('#collectionVerifiedBy', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: userArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "FullName",
                        selectedValuePath: "FullName"
                    });
                }
            });

            getCollectionById();
        }

        // form input validation
        function inputValidationForCollection() {
            var isValid = true;
            $('.requiredCollection').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // lock collection
        function btnLockOnClick() {
            if (inputValidationForCollection()) {
                $("#btnLock").prop("disabled", true);
                $("#btnLockButtom").prop("disabled", true);
                document.getElementById("btnLock").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Locking";
                document.getElementById("btnLockButtom").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Locking";
                $("#btnClose").prop("disabled", true);
                $("#btnCloseButtom").prop("disabled", true);
                $("#btnAddCollectionLines").prop("disabled", true);
                $("#btnAddCollectables").prop("disabled", true);

                var collectionObject = new Object();
                collectionObject.CollectionDate = cboCollectionDate.value;
                collectionObject.BranchId = cboCollectionBranch.selectedItem["Id"];
                collectionObject.AccountId = cboCollectionAccount.selectedItem["Id"];
                collectionObject.ApplicantId = cboCollectionApplicant.selectedItem["Id"];
                collectionObject.Particulars = document.getElementById("collectionParticulars").value;
                collectionObject.IsCleared = document.getElementById("collectionIsCleared").checked;
                collectionObject.PreparedByUserId = cboCollectionPreparedByUser.selectedItem["Id"];
                collectionObject.VerifiedByUserId = cboCollectionVerifiedBy.selectedItem["Id"];
                var collectionData = JSON.stringify(collectionObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/collection/lock/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: collectionData,
                    statusCode: {
                        200: function () {
                            toastr.success("Reloading the page", "Lock Successful");
                            window.setTimeout(function () {
                                location.reload();
                            }, 1500);
                        },
                        404: function () {
                            toastr.error("Not Found");
                            $("#btnLock").prop("disabled", false);
                            $("#btnLockButtom").prop("disabled", false);
                            document.getElementById("btnLock").innerHTML = "<i class='fa fa-lock fa-fw'></i> Lock";
                            document.getElementById("btnLockButtom").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Lock";
                            $("#btnClose").prop("disabled", false);
                            $("#btnCloseButtom").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");
                            $("#btnLock").prop("disabled", false);
                            $("#btnLockButtom").prop("disabled", false);
                            document.getElementById("btnLock").innerHTML = "<i class='fa fa-lock fa-fw'></i> Lock";
                            document.getElementById("btnLockButtom").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Lock";
                            $("#btnClose").prop("disabled", false);
                            $("#btnCloseButtom").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // unlock loan
        function btnUnlockOnClick() {
            $("#btnUnlock").prop("disabled", true);
            $("#btnPrint").prop("disabled", true);
            $("#btnUnlockButtom").prop("disabled", true);
            $("#btnPrintButtom").prop("disabled", true);
            $("#btnClose").prop("disabled", true);
            $("#btnCloseButtom").prop("disabled", true);
            document.getElementById("btnUnlock").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Unlocking";
            document.getElementById("btnUnlockButtom").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Unlocking";
            $("#btnAddCollectionLines").prop("disabled", true);
            $("#btnAddCollectables").prop("disabled", true);

            $.ajax({
                type: "PUT",
                url: '/api/collection/unlock/' + getUrlParameter("id"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Reloading the page", "Unlock Successful");
                        window.setTimeout(function () {
                            location.reload();
                        }, 1500);
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $("#btnUnlock").prop("disabled", false);
                        $("#btnPrint").prop("disabled", false);
                        $("#btnUnlockButtom").prop("disabled", false);
                        $("#btnPrintButtom").prop("disabled", false);
                        $("#btnClose").prop("disabled", false);
                        $("#btnCloseButtom").prop("disabled", true);
                        document.getElementById("btnUnlock").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                        document.getElementById("btnUnlockButtom").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Unlock";
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#btnLock").prop("disabled", false);
                        $("#btnLockButtom").prop("disabled", false);
                        document.getElementById("btnLock").innerHTML = "<i class='fa fa-lock fa-fw'></i> Lock";
                        document.getElementById("btnLockButtom").innerHTML = "<i class='fa fa-unlock fa-fw'></i> Lock";
                        $("#btnClose").prop("disabled", false);
                        $("#btnCloseButtom").prop("disabled", false);
                    }
                }
            });
        }

        // get account for collection
        function createCollectionLinesAccount() {
            var accountArray = new Array();
            $.ajax({
                url: '/api/account/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (accountResults) {
                    var disabled = true;
                    if (accountResults.length > 0) {
                        for (i = 0; i < accountResults.length; i++) {
                            accountArray.push({
                                Id: accountResults[i]["Id"],
                                Account: accountResults[i]["Account"],
                            });
                        }
                        disabled = false;
                    }

                    cboCollectionLineAccount.dispose();
                    cboCollectionLineAccount = new wijmo.input.ComboBox('#collectionLinesAccount', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: accountArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Account",
                        selectedValuePath: "Account"
                    });
                }
            });
        }

        // get paytypes for collection
        function createCollectionLinesPayType() {
            var payTypeArray = new Array();
            $.ajax({
                url: '/api/payType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (payTypeResults) {
                    var disabled = true;
                    if (payTypeResults.length > 0) {
                        for (i = 0; i < payTypeResults.length; i++) {
                            payTypeArray.push({
                                Id: payTypeResults[i]["Id"],
                                PayType: payTypeResults[i]["PayType"],
                            });
                        }
                        disabled = false;
                    }

                    cboCollectionLinePayType.dispose();
                    cboCollectionLinePayType = new wijmo.input.ComboBox('#collectionLinesPayType', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: payTypeArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "PayType",
                        selectedValuePath: "PayType"
                    });
                }
            });
        }

        // create collection line check Date
        function createCollectionCheckDate() {
            cboCollectionLineCheckDate.dispose();
            cboCollectionLineCheckDate = new wijmo.input.InputDate('#collectionLinesCheckDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    var dateValue = this.value.getMonth() + 1;
                    var month = "";

                    if (dateValue == 1) {
                        month = "January";
                    } else if (dateValue == 2) {
                        month = "February";
                    } else if (dateValue == 3) {
                        month = "March";
                    } else if (dateValue == 4) {
                        month = "April";
                    } else if (dateValue == 5) {
                        month = "May";
                    } else if (dateValue == 6) {
                        month = "June";
                    } else if (dateValue == 7) {
                        month = "July";
                    } else if (dateValue == 8) {
                        month = "August";
                    } else if (dateValue == 9) {
                        month = "September";
                    } else if (dateValue == 10) {
                        month = "October";
                    } else if (dateValue == 11) {
                        month = "November";
                    } else if (dateValue == 12) {
                        month = "December";
                    } else {
                        month = "";
                    }

                    document.getElementById("collectionLineCheckDateString").innerHTML = month + " " + this.value.getDate() + ", " + this.value.getFullYear();
                }
            });

            var dateValue = cboCollectionLineCheckDate.value.getMonth() + 1;
            var month = "";

            if (dateValue == 1) {
                month = "January";
            } else if (dateValue == 2) {
                month = "February";
            } else if (dateValue == 3) {
                month = "March";
            } else if (dateValue == 4) {
                month = "April";
            } else if (dateValue == 5) {
                month = "May";
            } else if (dateValue == 6) {
                month = "June";
            } else if (dateValue == 7) {
                month = "July";
            } else if (dateValue == 8) {
                month = "August";
            } else if (dateValue == 9) {
                month = "September";
            } else if (dateValue == 10) {
                month = "October";
            } else if (dateValue == 11) {
                month = "November";
            } else if (dateValue == 12) {
                month = "December";
            } else {
                month = "";
            }

            document.getElementById("collectionLineCheckDateString").innerHTML = month + " " + cboCollectionLineCheckDate.value.getDate() + ", " + cboCollectionLineCheckDate.value.getFullYear();
        }

        // get loan number by applicant Id
        function createCollectionLinesLoanNumber() {
            var loanNumberArray = new Array();
            $.ajax({
                url: '/api/loanApplication/listByApplicantId/' + cboCollectionApplicant.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (loanNumberResults) {
                    var disabled = true;
                    if (loanNumberResults.length > 0) {
                        for (i = 0; i < loanNumberResults.length; i++) {
                            loanNumberArray.push({
                                Id: loanNumberResults[i]["Id"],
                                LoanNumber: loanNumberResults[i]["LoanNumber"],
                                LoanDate: loanNumberResults[i]["LoanDate"],
                                LoanNumberDate: loanNumberResults[i]["LoanNumber"] + " - " + loanNumberResults[i]["LoanDate"],
                                LoanAmount: loanNumberResults[i]["LoanAmount"],
                                BalanceAmount: loanNumberResults[i]["BalanceAmount"]
                            });
                        }
                        disabled = false;
                    }

                    cboCollectionLineLoanNumber.dispose();
                    cboCollectionLineLoanNumber = new wijmo.input.ComboBox('#collectionLinesLoanNumber', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: loanNumberArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "LoanNumberDate",
                        selectedValuePath: "LoanNumberDate",
                        onSelectedIndexChanged: function () {
                            document.getElementById("collectionLinesAmount").value = this.selectedItem["BalanceAmount"];
                        }
                    });

                    document.getElementById("collectionLinesAmount").value = cboCollectionLineLoanNumber.selectedItem["BalanceAmount"];
                }
            });
        }

        // get collector for collection lines
        function createCollectionLinesCollector() {
            var collectorArray = new Array();
            $.ajax({
                url: '/api/collector/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (collectorResults) {
                    var disabled = true;
                    if (collectorResults.length > 0) {
                        for (i = 0; i < collectorResults.length; i++) {
                            collectorArray.push({
                                Id: collectorResults[i]["Id"],
                                Collector: collectorResults[i]["Collector"],
                            });
                        }
                        disabled = false;
                    }

                    cboCollectionLinesCollector.dispose();
                    cboCollectionLinesCollector = new wijmo.input.ComboBox('#collectionLinesCollector', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: collectorArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Collector",
                        selectedValuePath: "Collector",
                    });
                }
            });
        }

        // get collection lines by collection id
        function getCollectionLinesByCollectionId() {
            var collectionArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collectionLines/listByCollectionId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionLinesResults) {
                    var totalCollectionAmount = 0;
                    if (collectionLinesResults.length > 0) {
                        for (i = 0; i < collectionLinesResults.length; i++) {
                            var btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLinesOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                            var btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLinesOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            if (isLocked) {
                                btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCollectionLinesOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCollectionLinesOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            }

                            collectionArray.push({
                                EditButton: btnEditButton,
                                DeleteButton: btnDeleteButton,
                                Id: collectionLinesResults[i]["Id"],
                                CollectionId: collectionLinesResults[i]["CollectionId"],
                                AccountId: collectionLinesResults[i]["AccountId"],
                                Account: collectionLinesResults[i]["Account"],
                                LoanId: collectionLinesResults[i]["LoanId"],
                                LoanNumber: collectionLinesResults[i]["LoanNumber"] + " - " + collectionLinesResults[i]["LoanDate"],
                                PaytypeId: collectionLinesResults[i]["PaytypeId"],
                                Paytype: collectionLinesResults[i]["Paytype"],
                                CheckNumber: collectionLinesResults[i]["CheckNumber"],
                                CheckDate: collectionLinesResults[i]["CheckDate"],
                                CheckBank: collectionLinesResults[i]["CheckBank"],
                                Particulars: collectionLinesResults[i]["Particulars"],
                                Amount: collectionLinesResults[i]["Amount"],
                                Collector: collectionLinesResults[i]["CollectedByCollector"]
                            });

                            totalCollectionAmount += collectionLinesResults[i]["Amount"];
                        }
                    }

                    document.getElementById("totalCollectionAmount").disabled = true;
                    document.getElementById("totalCollectionAmount").value = totalCollectionAmount.toLocaleString();

                    NProgress.done();
                }
            });

            return collectionArray;
        }

        var collectionLineId = 0;

        // add collection lines
        function btnAddCollectionLinesOnclick() {
            $("#collectionLineEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredCollectionLines').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveCollectionLine").prop("disabled", false);
            $("#btnCloseCollectionLine").prop("disabled", false);

            collectionLineId = 0;

            createCollectionLinesAccount();
            createCollectionLinesPayType();
            createCollectionCheckDate();
            createCollectionLinesLoanNumber();
            createCollectionLinesCollector();

            document.getElementById("collectionLineCheckNumber").value = "NA";
            document.getElementById("collectionLineCheckBank").value = "NA";
            document.getElementById("collectionLinesParticulars").value = "NA";
        }

        // edit collection lines
        function btnEditCollectionLinesOnclick() {
            $("#collectionLineEditDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredCollectionLines').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveCollectionLine").prop("disabled", false);
            $("#btnCloseCollectionLine").prop("disabled", false);

            collectionLinesCollectionView.editItem(collectionLinesCollectionView.currentItem);
            var collectionLineCuurentItem = collectionLinesCollectionView.currentEditItem;

            collectionLineId = collectionLineCuurentItem.Id;
            cboCollectionLineAccount.selectedValue = collectionLineCuurentItem.Account;
            cboCollectionLinePayType.selectedValue = collectionLineCuurentItem.Paytype;
            document.getElementById("collectionLineCheckNumber").value = collectionLineCuurentItem.CheckNumber;
            cboCollectionLineCheckDate.value = new Date(collectionLineCuurentItem.CheckDate);
            document.getElementById("collectionLineCheckBank").value = collectionLineCuurentItem.CheckBank;
            document.getElementById("collectionLinesParticulars").value = collectionLineCuurentItem.Particulars;
            cboCollectionLineLoanNumber.selectedValue = collectionLineCuurentItem.LoanNumber;
            document.getElementById("collectionLinesAmount").value = collectionLineCuurentItem.Amount;
            cboCollectionLinesCollector.selectedValue = collectionLineCuurentItem.Collector;
        }

        // form input validation
        function inputValidationForCollectionLines() {
            var isValid = true;
            $('.requiredCollectionLines').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save collection line
        function saveCollectionLineOnclick() {
            if (inputValidationForCollectionLines()) {
                document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveCollectionLine").prop("disabled", true);
                $("#btnCloseCollectionLine").prop("disabled", true);

                var collectionLineObject = new Object();
                collectionLineObject.CollectionId = getUrlParameter("id");
                collectionLineObject.AccountId = cboCollectionLineAccount.selectedItem["Id"];
                collectionLineObject.LoanId = cboCollectionLineLoanNumber.selectedItem["Id"];
                collectionLineObject.PaytypeId = cboCollectionLinePayType.selectedItem["Id"];
                collectionLineObject.CheckNumber = document.getElementById("collectionLineCheckNumber").value;
                collectionLineObject.CheckDate = cboCollectionLineCheckDate.value;
                collectionLineObject.CheckBank = document.getElementById("collectionLineCheckBank").value;
                collectionLineObject.Particulars = document.getElementById("collectionLinesParticulars").value;
                collectionLineObject.Amount = document.getElementById("collectionLinesAmount").value;
                collectionLineObject.CollectedByCollectorId = cboCollectionLinesCollector.selectedItem["Id"];
                var collectionLineData = JSON.stringify(collectionLineObject);

                if (collectionLineId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/collectionLines/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionLineData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#collectionLineEditDetailModal").modal("hide");

                                collectionLinesCollectionView = new wijmo.collections.CollectionView(getCollectionLinesByCollectionId());
                                collectionLinesFlexGrid.itemsSource = collectionLinesCollectionView;
                                collectionLinesFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Record Not Found");

                                $("#collectionLineEditDetailModal").modal("hide");

                                document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveCollectionLine").prop("disabled", false);
                                $("#btnCloseCollectionLine").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#collectionLineEditDetailModal").modal("hide");

                                document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveCollectionLine").prop("disabled", false);
                                $("#btnCloseCollectionLine").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collectionLines/update/' + collectionLineId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: collectionLineData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#collectionLineEditDetailModal").modal("hide");

                                collectionLinesCollectionView = new wijmo.collections.CollectionView(getCollectionLinesByCollectionId());
                                collectionLinesFlexGrid.itemsSource = collectionLinesCollectionView;
                                collectionLinesFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Record Not Found");

                                $("#collectionLineEditDetailModal").modal("hide");

                                document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveCollectionLine").prop("disabled", false);
                                $("#btnCloseCollectionLine").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#collectionLineEditDetailModal").modal("hide");

                                document.getElementById("btnSaveCollectionLine").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveCollectionLine").prop("disabled", false);
                                $("#btnCloseCollectionLine").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete collection lines
        function btnDeleteCollectionLinesOnclick() {
            $("#deleteConfirmationCollectionLineModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteCollectionLine").innerHTML = "Yes";
            $("#btnConfirmDeleteCollectionLine").prop("disabled", false);
            $("#btnCloseDeleteCollectionLineModal").prop("disabled", false);
        }

        // confirm delete collection line
        function btnConfirmDeleteCollectionLineOnclick() {
            document.getElementById("btnConfirmDeleteCollectionLine").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteCollectionLine").prop("disabled", true);
            $("#btnCloseDeleteCollectionLineModal").prop("disabled", true);

            collectionLinesCollectionView.editItem(collectionLinesCollectionView.currentItem);
            var collectionLineCuurentItem = collectionLinesCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/collectionLines/delete/' + collectionLineCuurentItem.Id + "/" + getUrlParameter("id"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationCollectionLineModal").modal("hide");

                        collectionLinesCollectionView = new wijmo.collections.CollectionView(getCollectionLinesByCollectionId());
                        collectionLinesFlexGrid.itemsSource = collectionLinesCollectionView;
                        collectionLinesFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Record Not Found");

                        $("#deleteConfirmationCollectionLineModal").modal("hide");

                        document.getElementById("btnConfirmDeleteCollectionLine").innerHTML = "Yes";
                        $("#btnConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#btnCloseDeleteCollectionLineModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationCollectionLineModal").modal("hide");

                        document.getElementById("btnConfirmDeleteCollectionLine").innerHTML = "Yes";
                        $("#btnConfirmDeleteCollectionLine").prop("disabled", false);
                        $("#btnCloseDeleteCollectionLineModal").prop("disabled", false);
                    }
                }
            });
        }

        // create collection lines flexgrid
        function createCollectionLinesFlexgrid() {
            cboCollectionLineAccount = new wijmo.input.ComboBox('#collectionLinesAccount');
            cboCollectionLinePayType = new wijmo.input.ComboBox('#collectionLinesPayType');
            cboCollectionLineCheckDate = new wijmo.input.InputDate('#collectionLinesCheckDate');
            cboCollectionLineLoanNumber = new wijmo.input.ComboBox('#collectionLinesLoanNumber');
            cboCollectionLinesCollector = new wijmo.input.ComboBox('#collectionLinesCollector');

            createCollectionLinesAccount();
            createCollectionLinesPayType();
            createCollectionCheckDate();
            createCollectionLinesLoanNumber();
            createCollectionLinesCollector();

            collectionLinesCollectionView = new wijmo.collections.CollectionView(getCollectionLinesByCollectionId());
            collectionLinesFlexGrid = new wijmo.grid.FlexGrid('#collectionLinesFlexGrid');
            collectionLinesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Loan Number",
                                "binding": "LoanNumber",
                                "allowSorting": true,
                                "width": "1.5*",
                            },
                            {
                                "header": "Pay Type",
                                "binding": "Paytype",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": true,
                                "width": "1.5*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLinesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLinesFlexGrid.trackChanges = true;
        }

        // get loan application by id
        function getCollectionById() {
            $.ajax({
                url: '/api/collection/getById/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (collectionResult) {
                    if (collectionResult != null) {
                        document.getElementById("collectionNumber").disabled = true;
                        document.getElementById("collectionNumber").value = collectionResult.CollectionNumber;
                        cboCollectionDate.value = new Date(collectionResult.CollectionDate);
                        cboCollectionBranch.selectedValue = collectionResult.Branch;
                        cboCollectionAccount.selectedValue = collectionResult.Account;
                        cboCollectionApplicant.selectedValue = collectionResult.Applicant;
                        document.getElementById("collectionParticulars").value = collectionResult.Particulars;
                        cboCollectionPreparedByUser.selectedValue = collectionResult.PreparedByUser;
                        cboCollectionVerifiedBy.selectedValue = collectionResult.VerifiedByUser;
                        document.getElementById("collectionIsCleared").checked = collectionResult.IsCleared;
                        document.getElementById('stampCreatedBy').innerHTML = collectionResult.CreatedByUser;
                        document.getElementById('stampCreatedDate').innerHTML = collectionResult.CreatedDateTime;
                        document.getElementById('stampUpdatedBy').innerHTML = collectionResult.UpdatedByUser;
                        document.getElementById('stampUpdatedDate').innerHTML = collectionResult.UpdatedDateTime;

                        if (collectionResult.IsLocked) {
                            $("#btnLock").prop("disabled", true);
                            $("#btnLockButtom").prop("disabled", true);

                            cboCollectionDate.disabled = true;
                            cboCollectionBranch.disabled = true;
                            cboCollectionAccount.disabled = true;
                            cboCollectionApplicant.disabled = true;
                            cboCollectionPreparedByUser.disabled = true;
                            cboCollectionVerifiedBy.disabled = true;
                            document.getElementById("collectionParticulars").disabled = true;
                            document.getElementById("collectionIsCleared").disabled = true;

                            $("#btnAddCollectionLines").prop("disabled", true);
                            $("#btnAddCollectables").prop("disabled", true);

                            isLocked = true;
                        } else {
                            $("#btnUnlock").prop("disabled", true);
                            $("#btnPrint").prop("disabled", true);
                            $("#btnUnlockButtom").prop("disabled", true);
                            $("#btnPrintButtom").prop("disabled", true);
                        }
                    } else {
                        alert("The record you'd requested has no data");
                        window.history.back();
                    }

                    createCollectionLinesFlexgrid();
                    NProgress.done();
                }
            });
        }

        // pdf
        function btnPrintOnClick() {
            $("#btnPrint").prop("disabled", true);
            $("#btnPrintButtom").prop("disabled", true);
            document.getElementById("btnPrint").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Generating PDF File";
            document.getElementById("btnPrintButtom").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Generating PDF File";
            window.location = "/RepCollectionDetail/collectionDetail?collectionId=" + getUrlParameter("id");
        }

        // onload page
        window.onload = function () {
            NProgress.start();
            toastrModification();
            createCollectionDate();
        }
    </script>
</body>
</html>