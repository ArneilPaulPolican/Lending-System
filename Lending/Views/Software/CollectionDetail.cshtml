<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Collection Detail</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Header -->
    @Html.Partial("HomeHeader")

    <section class="software-section">
        <div class="container">
            <div class="btn-group">
                <div class="btn-group">
                    <a href="/Software" class="btn btn-info">
                        Dashboard
                    </a>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                        Set Ups <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li><a href="/Software/ApplicantList"><i class="fa fa-users fa-fw"></i> Applicants</a></li>
                        <li><a href="/Software/Tables"><i class="fa fa-table fa-fw"></i> Tables</a></li>
                    </ul>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                        Activities <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li><a href="/Software/LoanApplicationList"><i class="fa fa-file-text-o fa-fw"></i> Loan Application</a></li>
                        <li><a href="/Software/CollectionList"><i class="fa fa-money fa-fw"></i> Collection</a></li>
                        <li><a href="/Software/DisbursementList"><i class="fa fa-credit-card fa-fw"></i> Disbursement</a></li>
                    </ul>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                        System <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li><a href="/Software/CompanyList"><i class="fa fa-building fa-fw"></i> Company</a></li>
                        <li><a href="/Software/UserList"><i class="fa fa-key fa-fw"></i> Users</a></li>
                        <li class="divider"></li>
                        <li><a href="/Manage/Index"><i class="fa fa-gears fa-fw"></i> Settings</a></li>
                    </ul>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown">
                        Reports <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li><a href="/Software/Reports"><i class="fa fa-print fa-fw"></i> Generate Reports</a></li>
                    </ul>
                </div>
            </div>
            <br /><br />
            <div class="panel panel-default">
                <div class="panel-heading">
                    <table style="width: 100%">
                        <tr>
                            <td>
                                <h4><i class="fa fa-money fa-fw"></i> Collection Detail</h4>
                            </td>
                            <td align="right">
                                <button class="btn btn-primary" id="btnPrint" onclick="">
                                    <i class="fa fa-lock fa-fw"></i> Lock
                                </button>
                                <button class="btn btn-primary" id="btnPrint" onclick="">
                                    <i class="fa fa-unlock fa-fw"></i> Unlock
                                </button>
                                <button class="btn btn-primary" id="btnPrint" onclick="">
                                    <i class="fa fa-file-pdf-o fa-fw"></i> Print
                                </button>
                                <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software/CollectionList'">
                                    <i class="fa fa-close fa-fw"></i> Close
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-md-5">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-user fa-fw"></i> Applicant</span>
                                <input type="text" class="form-control input-sm" id="applicantName" disabled />
                            </div>
                        </div>
                        <div class="col-md-7">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-file-text-o fa-fw"></i> Loan Number</span>
                                <div id="cboLoanNumberLogHistory" style="width: 100%;"></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-heading">
                    <div class="row">
                        <div class="col-md-5">
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-map-pin fa-fw"></i> Area</span>
                                <input type="text" class="form-control input-sm" id="applicantArea" disabled />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <button class="btn btn-success btn-sm" id="" onclick="btnPartialPaymentOnclick()">Partial Payment</button>
                            <button class="btn btn-success btn-sm" id="" onclick="btnAdvancePaymentOnclick()">Advance Payment</button>
                            <button class="btn btn-success btn-sm" id="" onclick="btnFullPaymentOnclick()">Full Payment</button>
                            <button class="btn btn-warning btn-sm" id="" onclick="btnExtedCollectionOnclick()">Extend</button>
                            <button class="btn btn-warning btn-sm" id="" onclick="btnOverdueOnclick()">Overdue</button>
                            <button class="btn btn-default btn-sm" id="" onclick=""><i class="fa fa-refresh fa-fw"></i></button>
                        </div>
                        <div class="col-md-1" align="right">
                            <button class="btn btn-info btn-sm" id="" onclick="btnHelpOnclick()"><i class="fa fa-question-circle-o fa-fw"></i> Help</button>
                        </div>
                    </div>
                </div>
                <div class="panel-body">
                    <div class="flexgridHeight">
                        <div id="collectionFlexGrid" class=""></div>
                    </div>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        <div class="btn-group col-md-7" id="navigationPageGridCollection">
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridCollection">
                                <span class="glyphicon glyphicon-fast-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridCollection">
                                <span class="glyphicon glyphicon-step-backward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridCollection"></button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridCollection">
                                <span class="glyphicon glyphicon-step-forward"></span>
                            </button>
                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridCollection">
                                <span class="glyphicon glyphicon-fast-forward"></span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="panel panel-default">
                <div class="panel-heading">
                    More details
                </div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Loan Date</label><br />
                                                <input type="text" class="form-control" id="" disabled />
                                            </div>
                                            <div class="form-group">
                                                <label>Maturity Date (Due Date)</label><br />
                                                <input type="text" class="form-control" id="" disabled />
                                            </div>
                                            <div class="form-group">
                                                <label>Is Fully Paid</label><br />
                                                <input type="checkbox" id="" disabled />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Principal Amount</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label>Total Deductions</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label>Net Amount</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <p>Created by:</p>
                                    <div style="padding-left: 10px;">
                                        <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                        <br />
                                        <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                    </div>
                                    <br />
                                    <p>Updated by:</p>
                                    <div style="padding-left: 10px;">
                                        <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                        <br />
                                        <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Collection Start Date</label><br />
                                                <input type="text" class="form-control" id="" disabled />
                                            </div>
                                            <div class="form-group">
                                                <label>Collection End Date</label><br />
                                                <input type="text" class="form-control" id="" disabled />
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="form-group">
                                                <label>Daily Collectible</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label>Total Penalty</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label>Total Current Balance</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label>Total Paid Amount</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- due date options -->
    <div class="modal fade" id="deudatemodal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Collection Due Date</h4>
                </div>
                <div class="modal-body">
                    <button class="btn btn-primary btn-block" onclick=""> Extend Payment</button>
                    <button class="btn btn-primary btn-block" onclick=""> Overdue</button>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- partial payment -->
    <div class="modal fade" id="partialPaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Partial Payment</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Current Collection
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Collection Date</label><br />
                                        <input type="text" class="form-control" id="partialPaymentCollectionDate" disabled />
                                    </div>
                                    <div class="form-group">
                                        <label>Daily Collectibles</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="partialPaymentDailyCollectibles" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Previous Balance</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="partialPaymentPreviousBalance" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Current Balance</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="partialPaymentCurrentBalance" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Amount
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Enter Partial Amount</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField requiredPartialPayment" id="partialPaymentPartialAmount" placeholder="0.00" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="alert alert-warning">
                                <label><i class="fa fa-info-circle"></i> Remember: </label> <br />
                                The Partial Amount must not be greater than the current balance which is to be partially paid.
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="" onclick="btnUpdatePartialPayment()"><i class="fa fa-check fa-fw"></i> Update</button>
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- partial payment confirmation -->
    <div class="modal fade" id="partialPaymentConfirmationModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Partial Payment Confirmation</h4>
                </div>
                <div class="modal-body">
                    Are you sure for the partial payment?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" onclick="btnUpdatePartialPaymentConfirm()">Yes</button>
                    <button class="btn btn-default" id="" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- advance payment -->
    <div class="modal fade" id="advancePaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Advance Payment <span id="loadingData"><i class="fa fa-spinner fa-spin"></i></span></h4>
                </div>
                <div class="modal-body">
                    <ul id="myTab" class="nav nav-tabs">
                        <li class="active">
                            <a href="#defaultAdvancePayment" id="defaultAdvancePaymentTab" data-toggle="tab">Default Payment</a>
                        </li>
                        <li>
                            <a href="#customAdvancePayment" id="customAdvancePaymentTab" data-toggle="tab">Custom Payment</a>
                        </li>
                    </ul>
                    <br />
                    <div id="myTabContent" class="tab-content">
                        <div class="tab-pane fade in active" id="defaultAdvancePayment">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Pick a date for advance payment
                                </div>
                                <div class="panel-body">
                                    <div id="advancePaymentGrid" class="grid"></div>
                                </div>
                                <div class="panel-footer">
                                    <div class="row">
                                        <div class="btn-group col-md-7" id="navigationPageGridCollectionAdvancePayment">
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridCollectionAdvancePayment">
                                                <span class="glyphicon glyphicon-fast-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridCollectionAdvancePayment">
                                                <span class="glyphicon glyphicon-step-backward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridCollectionAdvancePayment"></button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridCollectionAdvancePayment">
                                                <span class="glyphicon glyphicon-step-forward"></span>
                                            </button>
                                            <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridCollectionAdvancePayment">
                                                <span class="glyphicon glyphicon-fast-forward"></span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade in" id="customAdvancePayment">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            Advance Payment Start to End Date
                                        </div>
                                        <div class="panel-body">
                                            <div class="form-group">
                                                <label>Advance Payment Starts at</label><br />
                                                <input type="text" class="form-control" id="" />
                                            </div>
                                            <div class="form-group">
                                                <label>Advance Payment Ends at</label><br />
                                                <input type="text" class="form-control" id="" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            Balance
                                        </div>
                                        <div class="panel-body">
                                            <div class="form-group">
                                                <label>Total Current Balance</label><br />
                                                <div class="input-group numberField">
                                                    <span class="input-group-addon">&#8369;</span>
                                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Advance Payment (Custom)
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Enter the desire amount to pay for advance payment</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField requiredAdvancePayment" id="advancePaymentAmount" placeholder="0.00" />
                                        </div>
                                    </div>
                                </div>
                                <div class="panel-footer">
                                    <button class="btn btn-primary" onclick="">Update</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- advance payment confirmation -->
    <div class="modal fade" id="advancePaymentConfirmationModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Advance Payment Confirmation</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Detail
                        </div>
                        <div class="panel-body">
                            <div class="form-group">
                                <label>Advance Paid Until</label><br />
                                <input type="text" class="form-control" id="advancePaymentConfirmationDate" disabled/>
                            </div>
                            <div class="form-group">
                                <label>Advance Amount</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField" id="advancePaymentConfirmationAmount" placeholder="0.00" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                    Are you sure for the advance payment?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" onclick="btnUpdateAdvancePaymentConfirm()">Yes</button>
                    <button class="btn btn-default" id="" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- full payment -->
    <div class="modal fade" id="fullPaymentModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Full Payment</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Amount
                        </div>
                        <div class="panel-body">
                            <div class="form-group">
                                <label>Total Current Balance Amount</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField" id="" placeholder="0.00" />
                                </div>
                            </div>
                        </div>
                    </div>
                    Are you sure for the full payment?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" onclick="">Yes</button>
                    <button class="btn btn-default" id="" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- extend payment -->
    <div class="modal fade" id="extendPaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Extend Payment</h4>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- overdue -->
    <div class="modal fade" id="overduePaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Overdue</h4>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- help -->
    <div class="modal fade" id="helpModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Help and Guide</h4>
                </div>
                <div class="modal-body">

                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    @Html.Partial("HomeFooter")

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // Global Variables
        var collectionCollectionView;
        var collectionFlexGrid;
        var btnFirstPageGridCollection;
        var btnPreviousPageGridCollection;
        var btnNextPageGridCollection;
        var btnLastPageGridCollection;
        var btnCurrentPageGridCollection;
        var urlParameterLoanId = getUrlParameter("loanId");
        var currentCollectionId = 0;
        var advancePaymentCollectionView;
        var advancePaymentFlexGrid;
        var btnFirstPageGridCollectionAdvancePayment;
        var btnPreviousPageGridCollectionAdvancePayment;
        var btnNextPageGridCollectionAdvancePayment;
        var btnLastPageGridCollectionAdvancePayment;

        // loan application for selected value
        function getLoanApplicationForSelectedValue() {
            var loanApplicationDetailSelectedValue = "";
            $.ajax({
                url: '/api/loanApplication/getById/' + getUrlParameter("loanId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (loanApplicationResult) {
                    if (loanApplicationResult != null) {

                        var currentLabel = "";
                        if (loanApplicationResult.Id == getUrlParameter("loanId")) {
                            currentLabel = "(Current)";
                        }

                        loanApplicationDetailSelectedValue = loanApplicationResult.LoanNumber + " - from: " + loanApplicationResult.LoanDate + " to " + loanApplicationResult.MaturityDate + " " + currentLabel
                    }

                    cboLoanNumberLogHistory = new wijmo.input.ComboBox('#cboLoanNumberLogHistory');
                    createCboForLoanNumberInLogHistory(loanApplicationDetailSelectedValue);
                }
            });
        }

        // cbo loan number
        function createCboForLoanNumberInLogHistory(loanApplicationSelectedValue) {
            var loanNumberArray = new Array();
            $.ajax({
                url: '/api/loanApplication/listByApplicantId/' + getUrlParameter("applicantId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (loanNumberResults) {
                    var disabled = true;
                    if (loanNumberResults.length > 0) {
                        for (i = 0; i < loanNumberResults.length; i++) {

                            var currentLabel = "";
                            if (loanNumberResults[i]["Id"] == urlParameterLoanId) {
                                currentLabel = "(Current)";
                            }

                            loanNumberArray.push({
                                Id: loanNumberResults[i]["Id"],
                                LoanNumber: loanNumberResults[i]["LoanNumber"],
                                LoanDate: loanNumberResults[i]["LoanDate"],
                                MaturityDate: loanNumberResults[i]["MaturityDate"],
                                Applicant: loanNumberResults[i]["Applicant"],
                                NetAmount: loanNumberResults[i]["NetAmount"],
                                PrincipalAmount: loanNumberResults[i]["PrincipalAmount"],
                                ProcessingFeeAmount: loanNumberResults[i]["ProcessingFeeAmount"],
                                PassbookAmount: loanNumberResults[i]["PassbookAmount"],
                                BalanceAmount: loanNumberResults[i]["BalanceAmount"],
                                PenaltyAmount: loanNumberResults[i]["PenaltyAmount"],
                                LateIntAmount: loanNumberResults[i]["LateIntAmount"],
                                AdvanceAmount: loanNumberResults[i]["AdvanceAmount"],
                                RequirementsAmount: loanNumberResults[i]["RequirementsAmount"],
                                InsuranceIPIorPPIAmount: loanNumberResults[i]["InsuranceIPIorPPIAmount"],
                                IsLocked: loanNumberResults[i]["IsLocked"],
                                LoanNumberDetailed: loanNumberResults[i]["LoanNumber"] + " - from: " + loanNumberResults[i]["LoanDate"] + " to " + loanNumberResults[i]["MaturityDate"] + " " + currentLabel
                            });

                            document.getElementById("applicantName").value = loanNumberResults[i]["Applicant"];
                            document.getElementById("applicantArea").value = loanNumberResults[i]["Area"];
                        }

                        disabled = false;

                        cboLoanNumberLogHistory.dispose();
                        cboLoanNumberLogHistory = new wijmo.input.ComboBox('#cboLoanNumberLogHistory', {
                            disabled: disabled,
                            placeholder: "Select",
                            itemsSource: loanNumberArray,
                            isEditable: false,
                            required: true,
                            displayMemberPath: "LoanNumberDetailed",
                            selectedValuePath: "LoanNumberDetailed",
                            selectedValue: loanApplicationSelectedValue.toString(),
                            onSelectedIndexChanged: function () {
                                NProgress.start();

                                urlParameterLoanId = this.selectedItem["Id"];

                                collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByApplicantIdByLoanId());
                                collectionCollectionView.pageSize = 15;

                                collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsCollection();
                                });

                                collectionFlexGrid.itemsSource = collectionCollectionView;
                                collectionFlexGrid.trackChanges = true;
                            }
                        });
                    } else {
                        toastr.info("No logs / History at this time");
                    }

                    createFlexGridForCollection();
                }
            });
        }

        // get collection by applicantId and by loanId
        function getCollectionByApplicantIdByLoanId() {
            NProgress.start();
            var collectionListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collection/list/byApplicantId/byLoanId/' + getUrlParameter("applicantId") + "/" + urlParameterLoanId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionListResult) {
                    if (collectionListResult.length > 0) {
                        for (i = 0; i < collectionListResult.length; i++) {
                            var btnClearClass = "btn btn-default btn-xs btn-block";
                            if (collectionListResult[i]["IsCleared"]) {
                                btnClearClass = "btn btn-success btn-xs btn-block";
                            }

                            var btnAbsentClass = "btn btn-default btn-xs btn-block";
                            if (collectionListResult[i]["IsAbsent"]) {
                                btnAbsentClass = "btn btn-danger btn-xs btn-block";
                            }

                            var disableButton = ""
                            if (!collectionListResult[i]["IsAction"]) {
                                disableButton = "disabled"
                            }

                            var newDate = new Date(collectionListResult[i]["CollectionDate"]);
                            var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();
                            collectionListArray.push({
                                OptionButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnOptionOnclick()'" + disableButton + "><i class='fa fa-wrench fa-fw'></i> Option</button>",
                                ClearButton: "<button class='" + btnClearClass + "' onclick='btnClearOnclick()'" + disableButton + "><i class='fa fa-check fa-fw'></i> Clear</button>",
                                AbsentButton: "<button class='" + btnAbsentClass + "' onclick='btnAbsentOnclick()'" + disableButton + "><i class='fa fa-circle fa-fw'></i> Absent</button>",
                                UndoChangesButton: "<button class='btn btn-default btn-xs btn-block' data-toggle='tooltip' data-placement='top' title='Undo Actions and Changes' onclick='btnUndoChangesOnclick()'" + disableButton + "><i class='fa fa-undo fa-fw'></i></button>",
                                Id: collectionListResult[i]["Id"],
                                LoanId: collectionListResult[i]["LoanId"],
                                LoanNumber: collectionListResult[i]["LoanNumber"],
                                DayNumber: collectionListResult[i]["DayNumber"],
                                ApplicantId: collectionListResult[i]["ApplicantId"],
                                Applicant: collectionListResult[i]["Applicant"],
                                Area: collectionListResult[i]["Area"],
                                IsFullyPaid: collectionListResult[i]["IsFullyPaid"],
                                CollectionDate: collectionDateValue,
                                NetAmount: collectionListResult[i]["NetAmount"],
                                CollectibleAmount: collectionListResult[i]["CollectibleAmount"],
                                PenaltyAmount: collectionListResult[i]["PenaltyAmount"],
                                PaidAmount: collectionListResult[i]["PaidAmount"].toString().bold().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2'),
                                PreviousBalanceAmount: collectionListResult[i]["PreviousBalanceAmount"],
                                CurrentBalanceAmount: collectionListResult[i]["CurrentBalanceAmount"],
                                IsCleared: collectionListResult[i]["IsCleared"],
                                IsAbsent: collectionListResult[i]["IsAbsent"],
                                IsPartiallyPaid: collectionListResult[i]["IsPartiallyPaid"],
                                IsAdvancedPaid: collectionListResult[i]["IsAdvancedPaid"],
                                IsDueDate: collectionListResult[i]["IsDueDate"],
                                IsOverdue: collectionListResult[i]["IsOverdue"],
                                IsExtendCollection: collectionListResult[i]["IsExtendCollection"],
                                IsCurrentCollection: collectionListResult[i]["IsCurrentCollection"],
                                IsProcessed: collectionListResult[i]["IsProcessed"],
                                IsAction: collectionListResult[i]["IsAction"],
                                AssignedCollectorId: collectionListResult[i]["AssignedCollectorId"],
                                AssignedCollector: collectionListResult[i]["AssignedCollector"],
                                AssignedCollectorArea: collectionListResult[i]["AssignedCollectorArea"],
                                CurrentCollectorId: collectionListResult[i]["CurrentCollectorId"],
                                CurrentCollector: collectionListResult[i]["CurrentCollector"],
                                CurrentCollectorArea: collectionListResult[i]["CurrentCollectorArea"],
                                Status: "<i class='fa fa-info-circle fa-fw'></i>" + " " + collectionListResult[i]["Status"].toString()
                            });
                        }
                    } else {
                        alert("The record you'd requested has no data");
                        window.location = "/Software/CollectionList";
                    }

                    NProgress.done();
                }
            });

            return collectionListArray;
        }

        // navigation button for flexgrid
        function updateNavigateButtonsCollection() {
            if (collectionCollectionView.pageSize <= 0) {
                document.getElementById('navigationPageGridCollection').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridCollection').style.display = 'block';
            if (collectionCollectionView.pageIndex === 0) {
                btnFirstPageGridCollection.setAttribute('disabled', 'disabled');
                btnPreviousPageGridCollection.setAttribute('disabled', 'disabled');
                btnNextPageGridCollection.removeAttribute('disabled');
                btnLastPageGridCollection.removeAttribute('disabled');
            } else if (collectionCollectionView.pageIndex === (collectionCollectionView.pageCount - 1)) {
                btnFirstPageGridCollection.removeAttribute('disabled');
                btnPreviousPageGridCollection.removeAttribute('disabled');
                btnLastPageGridCollection.setAttribute('disabled', 'disabled');
                btnNextPageGridCollection.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridCollection.removeAttribute('disabled');
                btnPreviousPageGridCollection.removeAttribute('disabled');
                btnNextPageGridCollection.removeAttribute('disabled');
                btnLastPageGridCollection.removeAttribute('disabled');
            }
            btnCurrentPageGridCollection.innerHTML = (collectionCollectionView.pageIndex + 1) + ' / ' + collectionCollectionView.pageCount;
        }

        // flexgrid of collection
        function createFlexGridForCollection() {
            collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByApplicantIdByLoanId());
            collectionCollectionView.pageSize = 15;

            collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsCollection();
            });

            collectionFlexGrid = new wijmo.grid.FlexGrid('#collectionFlexGrid');
            collectionFlexGrid.initialize({
                columns: [
                            {
                                "header": "Date",
                                "binding": "CollectionDate",
                                "allowSorting": false,
                                "width": "1.5*",
                            },
                            {
                                "header": "Collectibles",
                                "binding": "CollectibleAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Penalty",
                                "binding": "PenaltyAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Previous",
                                "binding": "PreviousBalanceAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Current",
                                "binding": "CurrentBalanceAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Paid Amount",
                                "binding": "PaidAmount",
                                "allowSorting": false,
                                "width": "2*",
                                "isContentHtml": true,
                                "align": "right"
                            },
                            {
                                "header": "C",
                                "binding": "IsCurrentCollection",
                                "allowSorting": false,
                                "width": "0.7*",
                            },
                            {
                                "header": "Status",
                                "binding": "Status",
                                "allowSorting": false,
                                "isContentHtml": true,
                                "width": "2.2*",
                            },
                            {
                                "header": "Absent",
                                "binding": "AbsentButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Clear",
                                "binding": "ClearButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "U",
                                "binding": "UndoChangesButton",
                                "width": 30,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: collectionCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            collectionFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            collectionFlexGrid.columnHeaders.rows.push(hr);
            collectionFlexGrid.columnHeaders.rows[0].allowMerging = true;

            collectionFlexGrid.columnHeaders.columns[0].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 0, 'Date');

            collectionFlexGrid.columnHeaders.columns[1].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 1, 'Collectibles');

            collectionFlexGrid.columnHeaders.columns[2].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 2, 'Penalty');

            for (var balancesColumn = 3; balancesColumn <= 4; balancesColumn++) {
                collectionFlexGrid.columnHeaders.setCellData(0, balancesColumn, 'Balances (Amount)');
            }

            collectionFlexGrid.columnHeaders.columns[5].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 5, 'Paid Amount');

            collectionFlexGrid.columnHeaders.columns[6].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 6, 'C');

            collectionFlexGrid.columnHeaders.columns[7].allowMerging = true;
            collectionFlexGrid.columnHeaders.setCellData(0, 7, 'Status');

            for (var actionsColumn = 8; actionsColumn <= 10; actionsColumn++) {
                collectionFlexGrid.columnHeaders.setCellData(0, actionsColumn, 'Actions');
            }

            //Navigation button
            btnFirstPageGridCollection = document.getElementById('btnMoveToFirstPageGridCollection');
            btnPreviousPageGridCollection = document.getElementById('btnMoveToPreviousPageGridCollection');
            btnNextPageGridCollection = document.getElementById('btnMoveToNextPageGridCollection');
            btnLastPageGridCollection = document.getElementById('btnMoveToLastPageGridCollection');
            btnCurrentPageGridCollection = document.getElementById('btnCurrentPageGridCollection');

            updateNavigateButtonsCollection();

            btnFirstPageGridCollection.addEventListener('click', function () {
                collectionCollectionView.moveToFirstPage();
                updateNavigateButtonsCollection();
            });
            btnPreviousPageGridCollection.addEventListener('click', function () {
                collectionCollectionView.moveToPreviousPage();
                updateNavigateButtonsCollection();
            });
            btnNextPageGridCollection.addEventListener('click', function () {
                collectionCollectionView.moveToNextPage();
                updateNavigateButtonsCollection();
            });
            btnLastPageGridCollection.addEventListener('click', function () {
                collectionCollectionView.moveToLastPage();
                updateNavigateButtonsCollection();
            });
        }

        // clear collection
        function btnClearOnclick() {
            NProgress.start();
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            if (!collectionItem.IsCleared) {
                if (collectionItem.CurrentBalanceAmount > 0) {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collection/cleared/update/byId/byLoanId/' + collectionItem.Id + '/' + collectionItem.LoanId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        statusCode: {
                            200: function () {
                                toastr.success("Cleared");
                                NProgress.start();

                                urlParameterLoanId = cboLoanNumberLogHistory.selectedItem["Id"];

                                collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByApplicantIdByLoanId());
                                collectionCollectionView.pageSize = 15;

                                collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsCollection();
                                });

                                collectionFlexGrid.itemsSource = collectionCollectionView;
                                collectionFlexGrid.trackChanges = true;
                            },
                            404: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                            },
                            400: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                            },
                            500: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                            }
                        }
                    });
                } else {
                    NProgress.done();
                    toastr.info("No Current Balance to be cleared");
                }
            } else {
                NProgress.done();
                toastr.info("Already Cleared");
            }
        }

        // absent collection
        function btnAbsentOnclick() {
            NProgress.start();
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            if (collectionItem.IsDueDate) {
                NProgress.done();
                $("#deudatemodal").modal({
                    "show": true,
                    "backdrop": "static"
                });
            } else {
                if (!collectionItem.IsAbsent) {
                    $.ajax({
                        type: "PUT",
                        url: '/api/collection/absent/update/byId/byLoanId/' + collectionItem.Id + '/' + collectionItem.LoanId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        statusCode: {
                            200: function () {
                                toastr.success("Absent");
                                NProgress.start();

                                urlParameterLoanId = cboLoanNumberLogHistory.selectedItem["Id"];

                                collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByApplicantIdByLoanId());
                                collectionCollectionView.pageSize = 15;

                                collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                                    updateNavigateButtonsCollection();
                                });

                                collectionFlexGrid.itemsSource = collectionCollectionView;
                                collectionFlexGrid.trackChanges = true;
                            },
                            404: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                            },
                            400: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                            },
                            500: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                            }
                        }
                    });
                } else {
                    NProgress.done();
                    toastr.info("Already Absent");
                }
            }
        }

        // undo changes collection
        function btnUndoChangesOnclick() {
            NProgress.start();
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var collectionItem = collectionCollectionView.currentEditItem;
            $.ajax({
                type: "PUT",
                url: '/api/collection/undoChanges/update/byId/byLoanId/' + collectionItem.Id + '/' + collectionItem.LoanId,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Undo");
                        NProgress.start();

                        urlParameterLoanId = cboLoanNumberLogHistory.selectedItem["Id"];

                        collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByApplicantIdByLoanId());
                        collectionCollectionView.pageSize = 15;

                        collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                            updateNavigateButtonsCollection();
                        });

                        collectionFlexGrid.itemsSource = collectionCollectionView;
                        collectionFlexGrid.trackChanges = true;
                    },
                    404: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                    }
                }
            });
        }

        // partial payment
        function btnPartialPaymentOnclick() {
            NProgress.start();
            $.ajax({
                url: '/api/collection/get/currentCollection/byApplicantId/byLoanId/' + getUrlParameter("applicantId") + "/" + urlParameterLoanId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (currentCollectionResults) {
                    if (currentCollectionResults != null) {
                        if (currentCollectionResults.IsDueDate) {
                            $("#deudatemodal").modal({
                                "show": true,
                                "backdrop": "static"
                            });
                        } else {
                            $('.requiredPartialPayment').each(function () {
                                $(this).css({
                                    "border": "",
                                });
                            });

                            $("#partialPaymentModal").modal({
                                "show": true,
                                "backdrop": "static"
                            });

                            var newDate = new Date(currentCollectionResults.CollectionDate);
                            var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            currentCollectionId = currentCollectionResults.Id;
                            document.getElementById("partialPaymentCollectionDate").value = collectionDateValue;
                            document.getElementById("partialPaymentDailyCollectibles").value = currentCollectionResults.CollectibleAmount;
                            document.getElementById("partialPaymentPreviousBalance").value = currentCollectionResults.PreviousBalanceAmount;
                            document.getElementById("partialPaymentCurrentBalance").value = currentCollectionResults.CurrentBalanceAmount;
                            document.getElementById("partialPaymentPartialAmount").value = 0;
                        }
                    } else {
                        toastr.info("No Current Collection to be partially paid.");
                    }

                    NProgress.done();
                }
            });
        }

        // form input validation
        function inputValidationForPartialPayment() {
            var isValid = true;
            $('.requiredPartialPayment').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // partial payment confirmation
        function btnUpdatePartialPayment() {
            if (inputValidationForPartialPayment()) {
                $("#partialPaymentConfirmationModal").modal({
                    "show": true,
                    "backdrop": "static"
                });
            } else {
                toastr.error("Please fill the empty field.", "Invalid Entry");
            }
        }

        // btn update partial payment
        function btnUpdatePartialPaymentConfirm() {
            if (inputValidationForPartialPayment()) {
                var partialAmountValue = document.getElementById("partialPaymentPartialAmount").value;
                var currentBalanceAmountValue = document.getElementById("partialPaymentCurrentBalance").value;

                var partialAmountObject = new Object();
                partialAmountObject.PaidAmount = partialAmountValue;
                var partialAmountData = JSON.stringify(partialAmountObject);

                if (parseFloat(partialAmountValue.split(',').join('')) > 0) {
                    if (parseFloat(partialAmountValue.split(',').join('')) > parseFloat(currentBalanceAmountValue.split(',').join(''))) {
                        $('.requiredPartialPayment').each(function () {
                            $(this).css({
                                "border": "1px solid red"
                            });
                        });

                        toastr.error("The amount to be paid must not be greater than the current balance amount.", "Invalid Entry");
                    } else {
                        $.ajax({
                            type: "PUT",
                            url: '/api/collection/partialPayment/update/byId/byLoanId/' + currentCollectionId + '/' + urlParameterLoanId,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: partialAmountData,
                            statusCode: {
                                200: function () {
                                    toastr.success("Partially Paid");
                                    NProgress.start();

                                    $("#partialPaymentConfirmationModal").modal("hide");
                                    $("#partialPaymentModal").modal("hide");

                                    urlParameterLoanId = cboLoanNumberLogHistory.selectedItem["Id"];

                                    collectionCollectionView = new wijmo.collections.CollectionView(getCollectionByApplicantIdByLoanId());
                                    collectionCollectionView.pageSize = 15;

                                    collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                                        updateNavigateButtonsCollection();
                                    });

                                    collectionFlexGrid.itemsSource = collectionCollectionView;
                                    collectionFlexGrid.trackChanges = true;
                                },
                                404: function (message) {
                                    NProgress.done();
                                    $("#partialPaymentModal").modal("hide");
                                    toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                                },
                                400: function (message) {
                                    NProgress.done();
                                    $("#partialPaymentModal").modal("hide");
                                    toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                                },
                                500: function (message) {
                                    NProgress.done();
                                    $("#partialPaymentModal").modal("hide");
                                    toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                                }
                            }
                        });
                    }
                } else {
                    toastr.error("Zero(0) amount. Please Enter an amount for partial payment.", "Invalid Entry");
                }
            } else {
                $("#partialPaymentModal").modal("hide");
                toastr.error("Please fill the empty field.", "Invalid Entry");
            }
        }

        var firstDataCollectionIdForAdvancePayment = 0;

        // list collection for advance payment
        function listCollectionForAdvancePayment() {
            NProgress.start();
            var collectionListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collection/list/advancePayment/byApplicantId/byLoanId/' + getUrlParameter("applicantId") + "/" + urlParameterLoanId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionListResult) {
                    if (collectionListResult.length > 0) {

                        var amountValue = 0;

                        for (i = 0; i < collectionListResult.length; i++) {
                            if (i == 0) {
                                firstDataCollectionIdForAdvancePayment = collectionListResult[i]["Id"];
                            }

                            var newDate = new Date(collectionListResult[i]["CollectionDate"]);
                            var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();
                            amountValue = amountValue + collectionListResult[i]["CurrentBalanceAmount"];
                            collectionListArray.push({
                                Id: collectionListResult[i]["Id"],
                                LoanId: collectionListResult[i]["LoanId"],
                                LoanNumber: collectionListResult[i]["LoanNumber"],
                                DayNumber: collectionListResult[i]["DayNumber"],
                                ApplicantId: collectionListResult[i]["ApplicantId"],
                                Applicant: collectionListResult[i]["Applicant"],
                                Area: collectionListResult[i]["Area"],
                                IsFullyPaid: collectionListResult[i]["IsFullyPaid"],
                                CollectionDate: collectionDateValue,
                                NetAmount: collectionListResult[i]["NetAmount"],
                                CollectibleAmount: collectionListResult[i]["CollectibleAmount"],
                                PenaltyAmount: collectionListResult[i]["PenaltyAmount"],
                                PaidAmount: collectionListResult[i]["PaidAmount"].toString().bold(),
                                PreviousBalanceAmount: collectionListResult[i]["PreviousBalanceAmount"],
                                CurrentBalanceAmount: collectionListResult[i]["CurrentBalanceAmount"],
                                IsCleared: collectionListResult[i]["IsCleared"],
                                IsAbsent: collectionListResult[i]["IsAbsent"],
                                IsPartiallyPaid: collectionListResult[i]["IsPartiallyPaid"],
                                IsAdvancedPaid: collectionListResult[i]["IsAdvancedPaid"],
                                IsDueDate: collectionListResult[i]["IsDueDate"],
                                IsOverdue: collectionListResult[i]["IsOverdue"],
                                IsExtendCollection: collectionListResult[i]["IsExtendCollection"],
                                IsCurrentCollection: collectionListResult[i]["IsCurrentCollection"],
                                IsProcessed: collectionListResult[i]["IsProcessed"],
                                IsAction: collectionListResult[i]["IsAction"],
                                AssignedCollectorId: collectionListResult[i]["AssignedCollectorId"],
                                AssignedCollector: collectionListResult[i]["AssignedCollector"],
                                AssignedCollectorArea: collectionListResult[i]["AssignedCollectorArea"],
                                CurrentCollectorId: collectionListResult[i]["CurrentCollectorId"],
                                CurrentCollector: collectionListResult[i]["CurrentCollector"],
                                CurrentCollectorArea: collectionListResult[i]["CurrentCollectorArea"],
                                Status: "<i class='fa fa-info-circle fa-fw'></i>" + " " + collectionListResult[i]["Status"].toString().bold(),
                                BtnPick: "<button class='btn btn-primary btn-xs' onclick='btnPickOnclick()'><i class='fa fa-hand-o-left fa-fw'></i> Pick</button>",
                                Amount: amountValue.toString().bold().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2'),
                                AmountValue: amountValue
                            });
                        }
                    } else {
                        alert("The record you'd requested has no data");
                    }

                    NProgress.done();
                    $("#loadingData").hide();
                }
            });

            return collectionListArray;
        }

        // navigation button for flexgrid
        function updateNavigateButtonsCollectionAdvancePayment() {
            if (advancePaymentCollectionView.pageSize <= 0) {
                document.getElementById('navigationPageGridCollectionAdvancePayment').style.display = 'none';
                return;
            }
            document.getElementById('navigationPageGridCollectionAdvancePayment').style.display = 'block';
            if (advancePaymentCollectionView.pageIndex === 0) {
                btnFirstPageGridCollectionAdvancePayment.setAttribute('disabled', 'disabled');
                btnPreviousPageGridCollectionAdvancePayment.setAttribute('disabled', 'disabled');
                btnNextPageGridCollectionAdvancePayment.removeAttribute('disabled');
                btnLastPageGridCollectionAdvancePayment.removeAttribute('disabled');
            } else if (advancePaymentCollectionView.pageIndex === (advancePaymentCollectionView.pageCount - 1)) {
                btnFirstPageGridCollectionAdvancePayment.removeAttribute('disabled');
                btnPreviousPageGridCollectionAdvancePayment.removeAttribute('disabled');
                btnNextPageGridCollectionAdvancePayment.setAttribute('disabled', 'disabled');
                btnLastPageGridCollectionAdvancePayment.setAttribute('disabled', 'disabled');
            } else {
                btnFirstPageGridCollectionAdvancePayment.removeAttribute('disabled');
                btnPreviousPageGridCollectionAdvancePayment.removeAttribute('disabled');
                btnNextPageGridCollectionAdvancePayment.removeAttribute('disabled');
                btnLastPageGridCollectionAdvancePayment.removeAttribute('disabled');
            }
            btnCurrentPageGridCollectionAdvancePayment.innerHTML = (advancePaymentCollectionView.pageIndex + 1) + ' / ' + advancePaymentCollectionView.pageCount;
        }

        // create flexgrid for advance payment
        function createFlexgridForAdvancePaymentProcess() {
            advancePaymentCollectionView = new wijmo.collections.CollectionView(listCollectionForAdvancePayment());
            advancePaymentCollectionView.pageSize = 5;

            advancePaymentCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsCollectionAdvancePayment();
            });

            advancePaymentFlexGrid = new wijmo.grid.FlexGrid('#advancePaymentGrid');
            advancePaymentFlexGrid.initialize({
                columns: [
                            {
                                "header": "Date",
                                "binding": "CollectionDate",
                                "allowSorting": false,
                                "width": "1.5*",
                            },
                            {
                                "header": "Collectibles",
                                "binding": "CollectibleAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Amount",
                                "binding": "Amount",
                                "allowSorting": false,
                                "width": "2*",
                                "align": "right",
                                "isContentHtml": true
                            },
                            {
                                "header": "Pick",
                                "binding": "BtnPick",
                                "width": 70,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: advancePaymentCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            advancePaymentFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridCollectionAdvancePayment = document.getElementById('btnMoveToFirstPageGridCollectionAdvancePayment');
            btnPreviousPageGridCollectionAdvancePayment = document.getElementById('btnMoveToPreviousPageGridCollectionAdvancePayment');
            btnNextPageGridCollectionAdvancePayment = document.getElementById('btnMoveToNextPageGridCollectionAdvancePayment');
            btnLastPageGridCollectionAdvancePayment = document.getElementById('btnMoveToLastPageGridCollectionAdvancePayment');
            btnCurrentPageGridCollectionAdvancePayment = document.getElementById('btnCurrentPageGridCollectionAdvancePayment');

            updateNavigateButtonsCollectionAdvancePayment();

            btnFirstPageGridCollectionAdvancePayment.addEventListener('click', function () {
                advancePaymentCollectionView.moveToFirstPage();
                updateNavigateButtonsCollectionAdvancePayment();
            });
            btnPreviousPageGridCollectionAdvancePayment.addEventListener('click', function () {
                advancePaymentCollectionView.moveToPreviousPage();
                updateNavigateButtonsCollectionAdvancePayment();
            });
            btnNextPageGridCollectionAdvancePayment.addEventListener('click', function () {
                advancePaymentCollectionView.moveToNextPage();
                updateNavigateButtonsCollectionAdvancePayment();
            });
            btnLastPageGridCollectionAdvancePayment.addEventListener('click', function () {
                advancePaymentCollectionView.moveToLastPage();
                updateNavigateButtonsCollectionAdvancePayment();
            });
        }

        // advance payment
        function btnAdvancePaymentOnclick() {
            $("#advancePaymentModal").modal({
                "show": true,
                "backdrop": "static"
            });

            NProgress.start();
            $("#loadingData").show();
            setTimeout(function () {
                advancePaymentCollectionView = new wijmo.collections.CollectionView(listCollectionForAdvancePayment());
                advancePaymentCollectionView.pageSize = 5;

                advancePaymentCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtonsCollectionAdvancePayment();
                });

                advancePaymentFlexGrid.itemsSource = advancePaymentCollectionView;
                advancePaymentFlexGrid.trackChanges = true;
            }, 500)
        }

        // pick button
        function btnPickOnclick() {
            advancePaymentCollectionView.editItem(advancePaymentCollectionView.currentItem);
            var advancePaymentItem = advancePaymentCollectionView.currentEditItem;
            $("#advancePaymentConfirmationModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("advancePaymentConfirmationDate").value = advancePaymentItem.CollectionDate;
            document.getElementById("advancePaymentConfirmationAmount").value = advancePaymentItem.AmountValue.toLocaleString();
        }

        // advance payment tab clicked
        $("#defaultAdvancePaymentTab").click(function () {
            NProgress.start();
            $("#loadingData").show();
            setTimeout(function () {
                advancePaymentCollectionView = new wijmo.collections.CollectionView(listCollectionForAdvancePayment());
                advancePaymentCollectionView.pageSize = 5;

                advancePaymentCollectionView.collectionChanged.addHandler(function (sender, args) {
                    updateNavigateButtonsCollectionAdvancePayment();
                });

                advancePaymentFlexGrid.itemsSource = advancePaymentCollectionView;
                advancePaymentFlexGrid.trackChanges = true;
            }, 500)
        })

        // full payment
        function btnFullPaymentOnclick() {
            $("#fullPaymentModal").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        // extend collection
        function btnExtedCollectionOnclick() {
            $("#extendPaymentModal").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        // overdue
        function btnOverdueOnclick() {
            $("#overduePaymentModal").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        // help
        function btnHelpOnclick() {
            $("#helpModal").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        // on load page
        window.onload = function () {
            toastrModification();
            getLoanApplicationForSelectedValue();
            createFlexgridForAdvancePaymentProcess();
            doubleModal();
        };
    </script>
</body>
</html>