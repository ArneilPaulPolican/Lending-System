<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>Collection Detail</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-user fa-fw"></i>  Collection Detail <small>Edit detail page</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li>
                                <a href="/Software/CollectionList">Collections</a>
                            </li>
                            <li class="active">
                                Collection Detail
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading" align="right">
                        <button class="btn btn-primary" id="" onclick="btnFullPaymentOnclick()"> Full Payment</button>
                        <button class="btn btn-primary" id="" onclick="btnPrintApplicantCollectionPaper()"><i class="fa fa-print fa-fw"></i> Print </button>
                        <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software/CollectionList'">
                            <i class="fa fa-close fa-fw"></i> Close
                        </button>
                    </div>
                    <div class="panel-body">
                        <ul class="nav nav-tabs">
                            <li class="active"><a data-toggle="tab" href="#collection" id="collectionHeaderTabId">Collection</a></li>
                            <li><a data-toggle="tab" href="#reconstruct" id="reconstructHeaderTabId">Reconstruct</a></li>
                        </ul>
                        <br />
                        <div class="tab-content">
                            <div id="collection" class="tab-pane fade in active">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="panel panel-default">
                                            <div class="panel-body">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Collection Number</label><br />
                                                            <input type="text" class="form-control" id="collectionNumber" placeholder="Collection Number" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Collection Date</label><br />
                                                            <input type="text" class="form-control" id="collectionDate" placeholder="Collection Date" disabled />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label>Applicant</label><br />
                                                    <input type="text" class="form-control" id="collectionApplicant" placeholder="Applicant" disabled />
                                                </div>
                                                <div class="form-group">
                                                    <label>Area</label><br />
                                                    <input type="text" class="form-control" id="collectionApplicantArea" placeholder="Area" disabled />
                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel panel-default">
                                            <div class="panel-body">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Collection Start Date</label><br />
                                                            <input type="text" class="form-control" id="collectionStartDate" disabled />
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Collection End Date</label><br />
                                                            <input type="text" class="form-control" id="collectionEndDate" disabled />
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Daily Collectible</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionDailyCollectibles" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Total Penalty</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionTotalPenalty" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Total Current Balance</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionTotalCurrentBalance" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Total Paid Amount</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionTotalPaidAmount" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel panel-default">
                                            <div class="panel-body">
                                                <div class="row">
                                                    <div class="col-md-3">
                                                        <div class="form-group">
                                                            <label>Is Overdue</label><br />
                                                            <input type="checkbox" id="collectionIsOverdue" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="col-md-9">
                                                        <div class="form-group">
                                                            <label>Is Fully Paid</label><br />
                                                            <input type="checkbox" id="collectionIsFullyPaid" disabled />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="panel panel-default">
                                            <div class="panel-body">
                                                <p>Created by:</p>
                                                <div style="padding-left: 10px;">
                                                    <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                                    <br />
                                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                                </div>
                                                <br />
                                                <p>Updated by:</p>
                                                <div style="padding-left: 10px;">
                                                    <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                                    <br />
                                                    <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="panel panel-default">
                                            <div class="panel-body">
                                                <div class="form-group">
                                                    <label>Loan Number</label><br />
                                                    <input type="text" class="form-control" id="collecitonLoanNumber" placeholder="Loan Number" disabled />
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Loan Date</label><br />
                                                            <input type="text" class="form-control" id="collectionDetailLoanDate" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Maturity Date (Due Date)</label><br />
                                                            <input type="text" class="form-control" id="collectionDetailMaturityDate" disabled />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label>Term</label><br />
                                                    <input type="text" class="form-control" id="collectionTerm" placeholder="=Term" disabled />
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Term No of Days</label><br />
                                                            <input type="text" class="form-control numberField" id="collectionTermNoOfDays" placeholder="Term Number of Days" disabled />
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>No of Allowance Days</label><br />
                                                            <input type="text" class="form-control numberField" id="collectionNoOfAllowanceDays" placeholder="Term Number of Allowance Days" disabled />
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Principal Amount</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionDetailPrincipalAmount" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Interest</label><br />
                                                            <input type="text" class="form-control" id="collectionDetailInterest" placeholder="0.00" disabled />
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Rate</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">%</span>
                                                                <input type="text" class="form-control numberField" id="collectionDetailInterestRate" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="form-group">
                                                            <label>Interest Amount</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionDetailInterestAmount" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Total Deductions</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionDetailTotalDeductions" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                        <div class="form-group">
                                                            <label>Net Amount</label><br />
                                                            <div class="input-group numberField">
                                                                <span class="input-group-addon">&#8369;</span>
                                                                <input type="text" class="form-control numberField" id="collectionDetailNetAmount" placeholder="0.00" disabled />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="panel-footer">
                                                <button class="btn btn-info" onclick="btnViewLoanApplicationDetailOnclick()">View Loan Application Detail</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <br />
                                <ul id="myTab" class="nav nav-tabs">
                                    <li class="active">
                                        <a href="#collectionsTabContent" data-toggle="tab" id="collectionTab">
                                            Daily Collection
                                        </a>
                                    </li>
                                </ul>
                                <br />
                                <div id="myTabContent" class="tab-content">
                                    <div class="tab-pane fade in active" id="collectionsTabContent">
                                        <div id="dailyCollectionFlexGrid"></div>
                                    </div>
                                </div>
                            </div>
                            <div id="reconstruct" class="tab-pane fade">
                                <div class="panel panel-default">
                                    <div class="panel-heading" align="right">
                                        <button class="btn btn-primary" onclick="btnCollectionReconstructAddOnclick()"><i class="fa fa-plus fa-fw"></i> Add</button>
                                    </div>
                                    <div class="panel-body">
                                        <div id="collectionReconstructFlexgrid" class=""></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- undo changes confirmation modal -->
    <div class="modal fade" id="undoChangesConfirmationModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Undo Changes Collection</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you're going to undo the selected changes in the collection? it will not redo anymore when confirm.
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="undoChangesConfirmationYes" onclick="undoChangesConfirmationOnclick()" data-dismiss="modal"> Yes </button>
                    <button class="btn btn-default" id="undoChangesConfirmationNo" data-dismiss="modal"> No </button>
                </div>
            </div>
        </div>
    </div>

    <!-- partial payment -->
    <div class="modal fade" id="partialPaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Partial Payment</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Current Collection
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Collection Date</label><br />
                                        <input type="text" class="form-control" id="partialPaymentCollectionDate" disabled />
                                    </div>
                                    <div class="form-group">
                                        <label>Dafault Daily Collectibles</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="partialPaymentDailyCollectibles" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Previous Balance</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="partialPaymentPreviousBalance" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Current Balance</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="partialPaymentCurrentBalance" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Amount
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Enter Partial Amount</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField requiredPartialPayment" id="partialPaymentPartialAmount" placeholder="0.00" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnUpdatePartialPayment" onclick="btnUpdatePartialPaymentOnclick()"><i class="fa fa-check fa-fw"></i> Update</button>
                    <button class="btn btn-danger" id="btnUpdatePartialPaymentClose" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- advance payment -->
    <div class="modal fade" id="advancePaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Advance Payment <span id="loadingData"><i class="fa fa-spinner fa-spin"></i></span></h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Pick a date for advance payment
                        </div>
                        <div class="panel-body">
                            <div id="advancePaymentGrid" class="grid"></div>
                        </div>
                        <div class="panel-footer">
                            <div class="row">
                                <div class="btn-group col-md-7" id="navigationPageGridCollectionAdvancePayment">
                                    <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridCollectionAdvancePayment">
                                        <span class="glyphicon glyphicon-fast-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridCollectionAdvancePayment">
                                        <span class="glyphicon glyphicon-step-backward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridCollectionAdvancePayment"></button>
                                    <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridCollectionAdvancePayment">
                                        <span class="glyphicon glyphicon-step-forward"></span>
                                    </button>
                                    <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridCollectionAdvancePayment">
                                        <span class="glyphicon glyphicon-fast-forward"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- advance payment update -->
    <div class="modal fade" id="advancePaymentUpdateModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Advance Payment</h4>
                </div>
                <div class="modal-body">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Detail
                        </div>
                        <div class="panel-body">
                            <div class="form-group">
                                <label>Advance Paid Until</label><br />
                                <input type="text" class="form-control" id="advancePaymentConfirmationDate" disabled />
                            </div>
                            <div class="form-group">
                                <label>Advance Amount</label><br />
                                <div class="input-group numberField">
                                    <span class="input-group-addon">&#8369;</span>
                                    <input type="text" class="form-control numberField" id="advancePaymentConfirmationAmount" placeholder="0.00" disabled />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnUpdateAdvancePayment" onclick="btnUpdateAdvancePaymentOnclick()"><i class="fa fa-check fa-fw"></i> Update</button>
                    <button class="btn btn-danger" id="btnUpdateAdvancePaymentClose" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- full payment -->
    <div class="modal fade" id="fullPaymentModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Full Payment</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Full payment Dates
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Start Date</label><br />
                                        <input type="text" class="form-control" id="fullPaymentStartDate" disabled />
                                    </div>
                                    <div class="form-group">
                                        <label>End Date</label><br />
                                        <input type="text" class="form-control" id="fullPaymentEndDate" disabled />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    Amount
                                </div>
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Full Payment Amount</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="fullPaymentAmount" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" onclick="btnFullPaymentAmountUpdateOnclick()"><i class="fa fa-check fa-fw"></i> Update</button>
                    <button class="btn btn-danger" id="" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- full payment confirmation -->
    <div class="modal fade" id="fullPaymentConfirmModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Full Payment Confirmation</h4>
                </div>
                <div class="modal-body">
                    Are you sure for the full payment?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnFullPaymentAmountConfirm" onclick="btnFullPaymentAmountConfirmOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnFullPaymentAmountConfirmNo" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- extend payment -->
    <div class="modal fade" id="extendPaymentModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Extend Payment</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Please enter number of Days</label><br />
                        <div id="cboExtendNumberOfDays" style="width: 100%;"></div>
                    </div>
                    <div class="form-group">
                        <label>Daily Collectibles</label><br />
                        <div class="input-group numberField">
                            <span class="input-group-addon">&#8369;</span>
                            <input type="text" class="form-control numberField" id="extendDailyCollectibles" value="0" placeholder="0.00" />
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnExtendPaymentYes" onclick="btnExtendPaymentYesOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnExtendPaymentNo" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- overdue -->
    <div class="modal fade" id="overduePaymentModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Overdue</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to mark this collection as Overdue?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnOverduePaymentYes" onclick="btnOverduePaymentYesOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnOverduePaymentNo" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- reconstruct edit detail modal -->
    <div class="modal fade" id="collectionReconstructDetailModal" role="dialog">
        <div class="modal-dialog modal-lg">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Reconstruct Detail</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Reconstruct Number</label><br />
                                        <input type="text" class="form-control" id="collectionReconstructNumber" disabled />
                                    </div>
                                    <div class="form-group">
                                        <label>Start Date</label><br />
                                        <div id="cboCollectionReconstructStartDate"></div>
                                    </div>
                                    <div class="form-group">
                                        <label>End Date</label><br />
                                        <div id="cboCollectionReconstructEndDate"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Term</label><br />
                                        <div id="cboCollectionReconstructTerm"></div>
                                    </div>
                                    <div class="form-group">
                                        <label>Term Number of Days</label><br />
                                        <input type="text" class="form-control numberField" id="collectionReconstructNoOfDays" disabled />
                                    </div>
                                    <div class="form-group">
                                        <label>Term Number of Allowance Days</label><br />
                                        <input type="text" class="form-control numberField" id="collectionReconstructNoOfAllowanceDays" disabled />
                                    </div>
                                    <div class="form-group">
                                        <label>Penalty</label><br />
                                        <div id="cboCollectionReconstructPenalty"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Current Balance Amount</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="collectionReconstructCurrentBalanceAmount" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Interest</label><br />
                                        <div id="cboCollectionReconstructInterest"></div>
                                    </div>
                                    <div class="form-group">
                                        <label>Interest Rate</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">%</span>
                                            <input type="text" class="form-control numberField" id="collectionReconstructInterestRate" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <label>Interest Amount</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="collectionReconstructInterestAmount" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="panel panel-default">
                                <div class="panel-body">
                                    <div class="form-group">
                                        <label>Balance Amount</label><br />
                                        <div class="input-group numberField">
                                            <span class="input-group-addon">&#8369;</span>
                                            <input type="text" class="form-control numberField" id="collectionReconstructBalanceAmount" placeholder="0.00" disabled />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnCollectionReconstructSave" onclick="btnCollectionReconstructSaveOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCollectionReconstructClose" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation reconstruct  -->
    <div class="modal fade" id="collectionReconstructDeleteConfirmationModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Delete Reconstruct</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this collection reconstruct?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="" onclick="">Yes</button>
                    <button class="btn btn-default" id="" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // Global Variables
        var cboCollectionDate;
        var dailyCollectionCollectionView;
        var dailyCollectionFlexGrid;
        var loanApplicationId = 0;
        var isFullyPaid = false;
        var collectionReconstructCollectionView;
        var collectionReconstructFlexgrid;

        var cboCollectionReconstructStartDate;
        var cboCollectionReconstructEndDate;
        var newDate = new Date();
        var cboCollectionReconstructStartDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');
        var cboCollectionReconstructEndDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');
        var cboCollectionReconstructTerm;
        var cboCollectionReconstructPenalty;
        var cboCollectionReconstructInterest;
        var collectionReconstructId;

        // get collection
        function getCollectionById() {
            $.ajax({
                url: '/api/collection/getById/' + getUrlParameter("collectionId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (collectionResults) {
                    if (collectionResults != null) {
                        document.getElementById("collectionNumber").value = collectionResults.CollectionNumber;
                        var newCollectionDate = new Date(collectionResults.CollectionDate);
                        var collectionDateValue = ('0' + (newCollectionDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newCollectionDate.getDate()).slice(-2) + '-' + newCollectionDate.getFullYear();
                        document.getElementById("collectionDate").value = collectionDateValue;
                        document.getElementById("collectionApplicant").value = collectionResults.Applicant;
                        document.getElementById("collectionApplicantArea").value = collectionResults.Area;
                        document.getElementById("collectionIsOverdue").checked = collectionResults.IsOverdue;
                        document.getElementById("collectionIsFullyPaid").checked = collectionResults.IsFullyPaid;
                        document.getElementById("collecitonLoanNumber").value = collectionResults.LoanNumber;
                        document.getElementById("collectionTerm").value = collectionResults.Term;
                        document.getElementById("collectionTermNoOfDays").value = collectionResults.TermNoOfDays;
                        document.getElementById("collectionNoOfAllowanceDays").value = collectionResults.TermNoOfAllowanceDays;
                        var newCollectionLoanDate = new Date(collectionResults.LoanDate);
                        var collectionLoanDateValue = ('0' + (newCollectionLoanDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newCollectionLoanDate.getDate()).slice(-2) + '-' + newCollectionLoanDate.getFullYear();
                        document.getElementById("collectionDetailLoanDate").value = collectionLoanDateValue;
                        var newCollectionMaturityDate = new Date(collectionResults.MaturityDate);
                        var collectionMaturityDateValue = ('0' + (newCollectionMaturityDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newCollectionMaturityDate.getDate()).slice(-2) + '-' + newCollectionMaturityDate.getFullYear();
                        document.getElementById("collectionDetailMaturityDate").value = collectionMaturityDateValue;
                        document.getElementById("collectionDetailPrincipalAmount").value = collectionResults.PrincipalAmount.toLocaleString();
                        document.getElementById("collectionDetailInterest").value = collectionResults.Interest.toLocaleString();
                        document.getElementById("collectionDetailInterestRate").value = collectionResults.InterestRate.toLocaleString();
                        document.getElementById("collectionDetailInterestAmount").value = collectionResults.InterestAmount.toLocaleString();
                        document.getElementById("collectionDetailTotalDeductions").value = collectionResults.TotalDeductionAmount.toLocaleString();
                        document.getElementById("collectionDetailNetAmount").value = collectionResults.NetAmount.toLocaleString();
                        loanApplicationId = collectionResults.LoanId;
                        createFlexGridForDailyCollection();
                        isFullyPaid = collectionResults.IsFullyPaid;
                    }
                }
            });
        }

        // daily collection
        function getDaiyCollection() {
            NProgress.start();
            var dailyCollectionListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/dailyCollection/list/byCollectionId/' + getUrlParameter("collectionId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (dailyCollectionListResult) {
                    if (dailyCollectionListResult.length > 0) {

                        var amountValue = 0;
                        var totalPenalty = 0;
                        var totalCurrentBalance = 0;
                        var totalPaidAmount = 0;
                        var advanceAmountValue = 0;

                        for (i = 0; i < dailyCollectionListResult.length; i++) {
                            var btnClearClass = "btn btn-default btn-xs btn-block";
                            if (dailyCollectionListResult[i]["IsCleared"]) {
                                btnClearClass = "btn btn-success btn-xs btn-block";
                            }

                            var btnAbsentClass = "btn btn-default btn-xs btn-block";
                            if (dailyCollectionListResult[i]["IsAbsent"]) {
                                btnAbsentClass = "btn btn-danger btn-xs btn-block";
                            }

                            var newDate = new Date(dailyCollectionListResult[i]["DailyCollectionDate"]);
                            var dailyCollectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            var isCurrentCollecitonHTMLContent = "<span class='label label-default'><i class='fa fa-circle-o fa-fw'></i></span>";
                            if (dailyCollectionListResult[i]["IsReconstructed"]) {
                                isCurrentCollecitonHTMLContent = "<span class='label label-danger'><i class='fa fa-circle-o fa-fw'></i></span>";
                                if (dailyCollectionListResult[i]["IsCurrentCollection"]) {
                                    isCurrentCollecitonHTMLContent = "<span class='label label-success'><i class='fa fa-check fa-fw'></i></span>";
                                } else {
                                    if (dailyCollectionListResult[i]["IsAllowanceDay"]) {
                                        isCurrentCollecitonHTMLContent = "<span class='label label-warning'><i class='fa fa-circle-o fa-fw'></i></span>";
                                    }
                                }
                            } else {
                                if (dailyCollectionListResult[i]["IsCurrentCollection"]) {
                                    isCurrentCollecitonHTMLContent = "<span class='label label-success'><i class='fa fa-check fa-fw'></i></span>";
                                } else {
                                    if (dailyCollectionListResult[i]["IsAllowanceDay"]) {
                                        isCurrentCollecitonHTMLContent = "<span class='label label-warning'><i class='fa fa-circle-o fa-fw'></i></span>";
                                    }
                                }
                            }

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            var btnPaymentOptionsClass = "btn btn-default btn-xs";
                            var paymentOptionIcon = "fa fa-check fa-fw";
                            if (dailyCollectionListResult[i]["IsCurrentCollection"]) {
                                btnPaymentOptionsClass = "btn btn-primary btn-xs";
                                paymentOptionIcon = "fa fa-edit fa-fw";
                            } else {
                                if (!dailyCollectionListResult[i]["IsProcessed"]) {
                                    if (dailyCollectionListResult[i]["CurrentBalanceAmount"] > 0) {
                                        btnPaymentOptionsClass = "btn btn-success btn-xs";
                                        paymentOptionIcon = "fa fa-hand-o-right fa-fw";
                                    } else {
                                        btnPaymentOptionsClass = "btn btn-default btn-xs";
                                        paymentOptionIcon = "fa fa-times fa-fw";
                                    }
                                }
                            }

                            if (!dailyCollectionListResult[i]["IsProcessed"]) {
                                advanceAmountValue = advanceAmountValue + dailyCollectionListResult[i]["CurrentBalanceAmount"];
                            }

                            dailyCollectionListArray.push({
                                PaymentOptionsButton: "<button class='" + btnPaymentOptionsClass + "' onclick='btnPaymentOptionOnclick()'" + disabledButton + "><i class='" + paymentOptionIcon + "'></i></button>",
                                ClearButton: "<button class='" + btnClearClass + "' onclick='btnClearOnclick()'" + disabledButton + "><i class='fa fa-check fa-fw'></i> Clear</button>",
                                AbsentButton: "<button class='" + btnAbsentClass + "' onclick='btnAbsentOnclick()'" + disabledButton + "><i class='fa fa-circle fa-fw'></i> Absent</button>",
                                UndoChangesButton: "<button class='btn btn-default btn-xs btn-block' data-toggle='tooltip' data-placement='top' title='Undo Actions and Changes' onclick='btnUndoChangesOnclick()'" + disabledButton + "><i class='fa fa-undo fa-fw'></i></button>",
                                Id: dailyCollectionListResult[i]["Id"],
                                CollectionId: dailyCollectionListResult[i]["CollectionId"],
                                CollectionNumber: dailyCollectionListResult[i]["CollectionNumber"],
                                Applicant: dailyCollectionListResult[i]["Applicant"],
                                DailyCollectionDate: dailyCollectionDateValue,
                                NetAmount: dailyCollectionListResult[i]["NetAmount"],
                                CollectibleAmount: dailyCollectionListResult[i]["CollectibleAmount"],
                                PenaltyAmount: dailyCollectionListResult[i]["PenaltyAmount"],
                                PaidAmount: dailyCollectionListResult[i]["PaidAmount"].toString().bold().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2'),
                                PreviousBalanceAmount: dailyCollectionListResult[i]["PreviousBalanceAmount"],
                                CurrentBalanceAmount: dailyCollectionListResult[i]["CurrentBalanceAmount"],
                                IsCurrentCollection: isCurrentCollecitonHTMLContent,
                                IsCurrentCollectionValue: dailyCollectionListResult[i]["IsCurrentCollection"],
                                IsCleared: dailyCollectionListResult[i]["IsCleared"],
                                IsAbsent: dailyCollectionListResult[i]["IsAbsent"],
                                IsPartiallyPaid: dailyCollectionListResult[i]["IsPartialPayment"],
                                IsPaidInAdvanced: dailyCollectionListResult[i]["IsAdvancePayment"],
                                IsFullyPaid: dailyCollectionListResult[i]["IsFullyPaid"],
                                IsProcessed: dailyCollectionListResult[i]["IsProcessed"],
                                CanPerformAction: dailyCollectionListResult[i]["CanPerformAction"],
                                IsDueDate: dailyCollectionListResult[i]["IsDueDate"],
                                IsAllowanceDay: dailyCollectionListResult[i]["IsAllowanceDay"],
                                IsLastDay: dailyCollectionListResult[i]["IsLastDay"],
                                ReconstructId: dailyCollectionListResult[i]["ReconstructId"],
                                IsReconstructed: dailyCollectionListResult[i]["IsReconstructed"],
                                AdvanceAmount: advanceAmountValue,
                                Status: "<i class='fa fa-calendar fa-fw'></i>" + " " + dailyCollectionListResult[i]["Status"].toString()
                            });

                            if (!dailyCollectionListResult[i]["IsProcessed"]) {
                                amountValue += dailyCollectionListResult[i]["CurrentBalanceAmount"];

                                if (dailyCollectionListResult[i]["IsCurrentCollection"]) {
                                    document.getElementById("fullPaymentStartDate").value = dailyCollectionDateValue;
                                }

                                if (i == dailyCollectionListResult.length - 1) {
                                    document.getElementById("fullPaymentEndDate").value = dailyCollectionDateValue;
                                }
                            }

                            if (dailyCollectionListResult[i]["PenaltyAmount"] > 0) {
                                totalPenalty += dailyCollectionListResult[i]["PenaltyAmount"];
                            }

                            if (!dailyCollectionListResult[i]["IsProcessed"]) {
                                totalCurrentBalance += dailyCollectionListResult[i]["CurrentBalanceAmount"];
                            }

                            if (dailyCollectionListResult[i]["PaidAmount"] > 0) {
                                totalPaidAmount += dailyCollectionListResult[i]["PaidAmount"];
                            }

                            if (i == 0) {
                                var newStartDate = new Date(dailyCollectionListResult[i]["DailyCollectionDate"]);
                                var collectionStartDateValue = ('0' + (newStartDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newStartDate.getDate()).slice(-2) + '-' + newStartDate.getFullYear();
                                document.getElementById("collectionStartDate").value = collectionStartDateValue;
                                document.getElementById("collectionDailyCollectibles").value = dailyCollectionListResult[i]["CollectibleAmount"].toLocaleString();

                                document.getElementById("extendDailyCollectibles").value = dailyCollectionListResult[i]["CollectibleAmount"].toLocaleString();
                            } else {
                                if (i == dailyCollectionListResult.length - 1) {
                                    var newEndDate = new Date(dailyCollectionListResult[i]["DailyCollectionDate"]);
                                    var collectionEndDateValue = ('0' + (newEndDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newEndDate.getDate()).slice(-2) + '-' + newEndDate.getFullYear();
                                    document.getElementById("collectionEndDate").value = collectionEndDateValue;
                                }
                            }
                        }

                        document.getElementById("fullPaymentAmount").value = amountValue.toLocaleString();
                        document.getElementById("collectionTotalPenalty").value = totalPenalty.toLocaleString();
                        document.getElementById("collectionTotalCurrentBalance").value = totalCurrentBalance.toLocaleString();
                        document.getElementById("collectionTotalPaidAmount").value = totalPaidAmount.toLocaleString();
                    } else {
                        toastr.info("The record you'd requested has no data");
                    }

                    NProgress.done();
                }
            });

            return dailyCollectionListArray;
        }

        // flexgrid of collection
        function createFlexGridForDailyCollection() {
            dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

            dailyCollectionFlexGrid = new wijmo.grid.FlexGrid('#dailyCollectionFlexGrid');
            dailyCollectionFlexGrid.initialize({
                columns: [
                            {
                                "header": "O",
                                "binding": "PaymentOptionsButton",
                                "width": 35,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Date",
                                "binding": "DailyCollectionDate",
                                "allowSorting": false,
                                "width": "1.6*",
                            },
                            {
                                "header": "C",
                                "binding": "IsCurrentCollection",
                                "isContentHtml": true,
                                "allowSorting": false,
                                "width": "0.7*",
                                "align": "center"
                            },
                            {
                                "header": "Collectibles",
                                "binding": "CollectibleAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Penalty",
                                "binding": "PenaltyAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Previous",
                                "binding": "PreviousBalanceAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Current",
                                "binding": "CurrentBalanceAmount",
                                "allowSorting": false,
                                "width": "2*",
                            },
                            {
                                "header": "Paid Amount",
                                "binding": "PaidAmount",
                                "allowSorting": false,
                                "width": "2*",
                                "isContentHtml": true,
                                "align": "right"
                            },
                            {
                                "header": "Status",
                                "binding": "Status",
                                "allowSorting": false,
                                "isContentHtml": true,
                                "width": "2.2*",
                            },
                            {
                                "header": "Absent",
                                "binding": "AbsentButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Clear",
                                "binding": "ClearButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "U",
                                "binding": "UndoChangesButton",
                                "width": 30,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: dailyCollectionCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            dailyCollectionFlexGrid.trackChanges = true;

            var hr = new wijmo.grid.Row();
            dailyCollectionFlexGrid.allowMerging = wijmo.grid.AllowMerging.AllHeaders;
            dailyCollectionFlexGrid.columnHeaders.rows.push(hr);
            dailyCollectionFlexGrid.columnHeaders.rows[0].allowMerging = true;

            dailyCollectionFlexGrid.columnHeaders.columns[0].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 0, 'O');

            dailyCollectionFlexGrid.columnHeaders.columns[1].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 1, 'Date');

            dailyCollectionFlexGrid.columnHeaders.columns[2].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 2, 'C');

            dailyCollectionFlexGrid.columnHeaders.columns[3].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 3, 'Collectibles');

            dailyCollectionFlexGrid.columnHeaders.columns[4].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 4, 'Penalty');

            for (var balancesColumn = 5; balancesColumn <= 6; balancesColumn++) {
                dailyCollectionFlexGrid.columnHeaders.setCellData(0, balancesColumn, 'Balances (Amount)');
            }

            dailyCollectionFlexGrid.columnHeaders.columns[7].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 7, 'Paid Amount');

            dailyCollectionFlexGrid.columnHeaders.columns[8].allowMerging = true;
            dailyCollectionFlexGrid.columnHeaders.setCellData(0, 8, 'Status');

            for (var actionsColumn = 9; actionsColumn <= 11; actionsColumn++) {
                dailyCollectionFlexGrid.columnHeaders.setCellData(0, actionsColumn, 'Actions');
            }
        }

        // clear collection
        function btnClearOnclick() {
            NProgress.start();
            dailyCollectionCollectionView.editItem(dailyCollectionCollectionView.currentItem);
            var dailyCollectionItem = dailyCollectionCollectionView.currentEditItem;
            if (!dailyCollectionItem.IsCleared) {
                if (dailyCollectionItem.CurrentBalanceAmount > 0) {
                    $.ajax({
                        type: "PUT",
                        url: '/api/dailyCollection/cleared/byId/' + dailyCollectionItem.Id,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        statusCode: {
                            200: function () {
                                toastr.success("Cleared");
                                NProgress.start();

                                dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                                dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                                dailyCollectionFlexGrid.trackChanges = true;
                            },
                            404: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                            },
                            400: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                            },
                            500: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                            }
                        }
                    });
                } else {
                    NProgress.done();
                    toastr.info("No Current Balance.");
                }
            } else {
                NProgress.done();
                toastr.error("Already Cleared");
            }
        }

        // absent collection
        function btnAbsentOnclick() {
            NProgress.start();
            dailyCollectionCollectionView.editItem(dailyCollectionCollectionView.currentItem);
            var dailyCollectionItem = dailyCollectionCollectionView.currentEditItem;
            if (!dailyCollectionItem.IsAbsent) {
                if (dailyCollectionItem.CurrentBalanceAmount > 0) {
                    $.ajax({
                        type: "PUT",
                        url: '/api/dailyCollection/absent/byId/' + dailyCollectionItem.Id,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        statusCode: {
                            200: function () {
                                toastr.success("Absent");
                                NProgress.start();

                                dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                                dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                                dailyCollectionFlexGrid.trackChanges = true;

                                if (dailyCollectionItem.IsLastDay) {
                                    btnCollectionReconstructAddOnclick();
                                }
                            },
                            404: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                            },
                            400: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                            },
                            500: function (message) {
                                NProgress.done();
                                toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                            }
                        }
                    });
                } else {
                    NProgress.done();
                    toastr.info("No Current Balance.");
                }
            } else {
                NProgress.done();
                toastr.info("Already Absent");
            }
        }

        // undo changes collection
        function btnUndoChangesOnclick() {
            $("#undoChangesConfirmationModal").modal({
                "show": true,
                "backdrop": "static"
            })
        }

        // undo confirm
        function undoChangesConfirmationOnclick() {
            $("#undoChangesConfirmationYes").prop("disabled", true);
            $("#undoChangesConfirmationNo").prop("disabled", true);
            document.getElementById("undoChangesConfirmationYes").innerHTML = "<i class='fa fa-spinner fa-fw fa-spin'></i> Processing";

            NProgress.start();
            dailyCollectionCollectionView.editItem(dailyCollectionCollectionView.currentItem);
            var dailyCollectionItem = dailyCollectionCollectionView.currentEditItem;
            $.ajax({
                type: "PUT",
                url: '/api/dailyCollection/undoChanges/byId/' + dailyCollectionItem.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Undo");
                        NProgress.start();
                        $("#undoChangesConfirmationModal").modal("hide");

                        dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                        dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                        dailyCollectionFlexGrid.trackChanges = true;

                        $("#undoChangesConfirmationYes").prop("disabled", false);
                        $("#undoChangesConfirmationNo").prop("disabled", false);
                        document.getElementById("undoChangesConfirmationYes").innerHTML = "Yes";
                    },
                    404: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        NProgress.done();
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                    }
                }
            });
        }

        // Payment Options
        function btnPaymentOptionOnclick() {
            NProgress.start();
            dailyCollectionCollectionView.editItem(dailyCollectionCollectionView.currentItem);
            var dailyCollectionItem = dailyCollectionCollectionView.currentEditItem;
            if (dailyCollectionItem.IsCurrentCollectionValue) {
                document.getElementById("btnUpdatePartialPayment").innerHTML = "<i class='fa fa-check fa-fw'></i> Update";
                $("#btnUpdatePartialPayment").prop("disabled", false);
                $("#btnUpdatePartialPaymentClose").prop("disabled", false);

                if (!dailyCollectionItem.IsLastDay) {
                    if (dailyCollectionItem.CurrentBalanceAmount > 0) {
                        $("#partialPaymentModal").modal({
                            "show": true,
                            "backdrop": "static"
                        });

                        var newDate = new Date(dailyCollectionItem.DailyCollectionDate);
                        var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                        document.getElementById("partialPaymentCollectionDate").value = collectionDateValue;
                        document.getElementById("partialPaymentDailyCollectibles").value = dailyCollectionItem.CollectibleAmount.toLocaleString();
                        document.getElementById("partialPaymentPreviousBalance").value = dailyCollectionItem.PreviousBalanceAmount.toLocaleString();
                        document.getElementById("partialPaymentCurrentBalance").value = dailyCollectionItem.CurrentBalanceAmount.toLocaleString();
                        document.getElementById("partialPaymentPartialAmount").value = 0;

                        NProgress.done();
                    } else {
                        NProgress.done();
                        toastr.error("No Current Balance");
                    }
                } else {
                    NProgress.done();
                    toastr.error("The current is on the last day. to solve this, please reconstruct to complete the collection.");
                }
            } else {
                if (!dailyCollectionItem.IsProcessed) {
                    if (dailyCollectionItem.CurrentBalanceAmount > 0) {
                        document.getElementById("btnUpdateAdvancePayment").innerHTML = "<i class='fa fa-check fa-fw'></i> Update";
                        $("#btnUpdateAdvancePayment").prop("disabled", false);
                        $("#btnUpdateAdvancePaymentClose").prop("disabled", false);

                        $("#advancePaymentUpdateModal").modal({
                            "show": true,
                            "backdrop": "static"
                        });

                        document.getElementById("advancePaymentConfirmationDate").value = dailyCollectionItem.DailyCollectionDate;
                        document.getElementById("advancePaymentConfirmationAmount").value = dailyCollectionItem.AdvanceAmount.toLocaleString();

                        NProgress.done();
                    } else {
                        NProgress.done();
                        toastr.error("Cannot advance if current balance is zero (0)");
                    }
                } else {
                    NProgress.done();
                    toastr.error("Not a Current Collection.");
                }
            }
        }

        // form input validation
        function inputValidationForPartialPayment() {
            var isValid = true;
            $('.requiredPartialPayment').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // partial payment confirmation
        function btnUpdatePartialPaymentOnclick() {
            dailyCollectionCollectionView.editItem(dailyCollectionCollectionView.currentItem);
            var dailyCollectionItem = dailyCollectionCollectionView.currentEditItem;

            if (inputValidationForPartialPayment()) {
                $("#btnUpdatePartialPayment").prop("disabled", true);
                $("#btnUpdatePartialPaymentClose").prop("disabled", true);
                document.getElementById("btnUpdatePartialPayment").innerHTML = "<i class='fa fa-spinner fa-fw fa-spin'></i> Processing";

                var partialAmountValue = document.getElementById("partialPaymentPartialAmount").value;
                var currentBalanceAmountValue = document.getElementById("partialPaymentCurrentBalance").value;

                var partialAmountObject = new Object();
                partialAmountObject.PaidAmount = document.getElementById("partialPaymentPartialAmount").value;
                var partialAmountData = JSON.stringify(partialAmountObject);

                if (parseFloat(partialAmountValue.split(',').join('')) > 0) {
                    if (parseFloat(partialAmountValue.split(',').join('')) > parseFloat(currentBalanceAmountValue.split(',').join(''))) {
                        $('.requiredPartialPayment').each(function () {
                            $(this).css({
                                "border": "1px solid red"
                            });
                        });

                        document.getElementById("btnUpdatePartialPayment").innerHTML = "<i class='fa fa-check fa-fw'></i> Update";
                        $("#btnUpdatePartialPayment").prop("disabled", false);
                        $("#btnUpdatePartialPaymentClose").prop("disabled", false);

                        toastr.error("The amount to be paid must not be greater than the current balance amount.", "Invalid Entry");
                    } else {
                        $.ajax({
                            type: "PUT",
                            url: '/api/dailyCollection/partialPayment/byId/' + dailyCollectionItem.Id,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: partialAmountData,
                            statusCode: {
                                200: function () {
                                    toastr.success("Partially Paid");
                                    NProgress.start();

                                    $("#partialPaymentModal").modal("hide");

                                    dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                                    dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                                    dailyCollectionFlexGrid.trackChanges = true;
                                },
                                404: function (message) {
                                    NProgress.done();
                                    $("#partialPaymentModal").modal("hide");

                                    toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                                },
                                400: function (message) {
                                    NProgress.done();
                                    $("#partialPaymentModal").modal("hide");

                                    toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                                },
                                500: function (message) {
                                    NProgress.done();
                                    $("#partialPaymentModal").modal("hide");

                                    toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                                }
                            }
                        });
                    }
                } else {
                    document.getElementById("btnUpdatePartialPayment").innerHTML = "<i class='fa fa-check fa-fw'></i> Update";
                    $("#btnUpdatePartialPayment").prop("disabled", false);
                    $("#btnUpdatePartialPaymentClose").prop("disabled", false);

                    toastr.error("Zero(0) amount. Please Enter an amount for partial payment.", "Invalid Entry");
                }
            } else {
                $("#partialPaymentModal").modal("hide");
                toastr.error("Please fill the empty field.", "Invalid Entry");
            }
        }

        // advance payment update
        function btnUpdateAdvancePaymentOnclick() {
            $("#btnUpdateAdvancePayment").prop("disabled", true);
            $("#btnUpdateAdvancePaymentClose").prop("disabled", true);
            document.getElementById("btnUpdateAdvancePayment").innerHTML = "<i class='fa fa-spinner fa-fw fa-spin'></i> Processing";

            NProgress.start();
            dailyCollectionCollectionView.editItem(dailyCollectionCollectionView.currentItem);
            var dailyCollectionItem = dailyCollectionCollectionView.currentEditItem;

            $.ajax({
                type: "PUT",
                url: '/api/dailyCollection/advancePayment/byId/' + dailyCollectionItem.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        NProgress.done();
                        $("#advancePaymentUpdateModal").modal("hide");

                        toastr.success("Advanced Paid");

                        dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                        dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                        dailyCollectionFlexGrid.trackChanges = true;
                    },
                    404: function (message) {
                        NProgress.done();
                        $("#advancePaymentUpdateModal").modal("hide");

                        toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        NProgress.done();
                        $("#advancePaymentUpdateModal").modal("hide");

                        toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        NProgress.done();
                        $("#advancePaymentUpdateModal").modal("hide");
                        $("#advancePaymentModal").modal("hide");

                        toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                    }
                }
            });
        }

        // full payment
        function btnFullPaymentOnclick() {
            NProgress.start();
            if (isFullyPaid == false) {
                $("#fullPaymentModal").modal({
                    "show": true,
                    "backdrop": "static"
                });

                NProgress.done();
            } else {
                toastr.error("Already Fully Paid");
                NProgress.done();
            }
        }

        // full payment amount update
        function btnFullPaymentAmountUpdateOnclick() {
            $("#fullPaymentConfirmModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnFullPaymentAmountConfirm").innerHTML = "Yes";
            $("#btnFullPaymentAmountConfirm").prop("disabled", false);
            $("#btnFullPaymentAmountConfirmNo").prop("disabled", false);
        }

        // full payment amount confirm
        function btnFullPaymentAmountConfirmOnclick() {
            $("#btnFullPaymentAmountConfirm").prop("disabled", true);
            $("#btnFullPaymentAmountConfirmNo").prop("disabled", true);
            document.getElementById("btnFullPaymentAmountConfirm").innerHTML = "<i class='fa fa-spinner fa-fw fa-spin'></i> Processing";
            $.ajax({
                type: "PUT",
                url: '/api/collection/fullPayment/byCollectionId/' + getUrlParameter("collectionId"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Fully Paid");
                        NProgress.start();

                        $("#fullPaymentModal").modal("hide");
                        $("#fullPaymentConfirmModal").modal("hide");

                        dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                        dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                        dailyCollectionFlexGrid.trackChanges = true;
                    },
                    404: function (message) {
                        NProgress.done();
                        $("#fullPaymentModal").modal("hide");
                        $("#fullPaymentConfirmModal").modal("hide");
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");
                    },
                    400: function (message) {
                        NProgress.done();
                        $("#fullPaymentModal").modal("hide");
                        $("#fullPaymentConfirmModal").modal("hide");
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");
                    },
                    500: function (message) {
                        NProgress.done();
                        $("#fullPaymentModal").modal("hide");
                        $("#fullPaymentConfirmModal").modal("hide");
                        toastr.error(message.responseText.replace(/"/g, ""), "Error 500 - Internal Server Error");
                    }
                }
            });
        }

        // view the loan application detail
        function btnViewLoanApplicationDetailOnclick() {
            window.open('/Software/LoanApplicationDetail?id=' + loanApplicationId, '_blank');
        }

        // applicant collection report
        function btnPrintApplicantCollectionPaper() {
            window.open('/RepApplicantCollectionPaper/applicantCollectionPaper?applicantId=' + getUrlParameter("applicantId") + '&loanId=' + urlParameterLoanId, '_blank');
        }

        // collection header tab
        $('#collectionHeaderTabId').click(function () {
            $("#collection").show();
            $("#reconstruct").hide();

            dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

            dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
            dailyCollectionFlexGrid.trackChanges = true;
        });

        // reconstruct tab
        $('#reconstructHeaderTabId').click(function () {
            $("#collection").hide();
            $("#reconstruct").show();

            collectionReconstructCollectionView = new wijmo.collections.CollectionView(getCollectionReconstructByCollectionId());

            collectionReconstructFlexgrid.itemsSource = collectionReconstructCollectionView;
            collectionReconstructFlexgrid.trackChanges = true;
        });

        // collection tab
        $('#collectionTab').click(function () {
            dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

            dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
            dailyCollectionFlexGrid.trackChanges = true;
        });

        // get collection reconstruct by collection id
        function getCollectionReconstructByCollectionId() {
            NProgress.start();
            var collectionReconstructArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collectionReconstruct/list/ByCollectionId/' + getUrlParameter("collectionId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionReconstructResults) {
                    if (collectionReconstructResults.length > 0) {
                        var disabledButton = "disabled";
                        var canPerformActions = "@ViewData["CanPerformActions"]";
                        if (canPerformActions == 1) {
                            disabledButton = "";
                        }

                        for (i = 0; i < collectionReconstructResults.length; i++) {
                            var newReconstructStartDate = new Date(collectionReconstructResults[i]["StartDate"]);
                            var collectionReconstructStartDateValue = ('0' + (newReconstructStartDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newReconstructStartDate.getDate()).slice(-2) + '-' + newReconstructStartDate.getFullYear();

                            var newReconstructEndDate = new Date(collectionReconstructResults[i]["EndDate"]);
                            var collectionReconstructEndDateValue = ('0' + (newReconstructEndDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newReconstructEndDate.getDate()).slice(-2) + '-' + newReconstructEndDate.getFullYear();

                            collectionReconstructArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnCollectionReconstructEditButton()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block' onclick='btnCollectionReconstructDeleteButton()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: collectionReconstructResults[i]["Id"],
                                CollectionId: collectionReconstructResults[i]["CollectionId"],
                                ReconstructNumber: collectionReconstructResults[i]["ReconstructNumber"],
                                StartDate: collectionReconstructStartDateValue,
                                EndDate: collectionReconstructEndDateValue,
                                TermId: collectionReconstructResults[i]["TermId"],
                                Term: collectionReconstructResults[i]["Term"],
                                TermNoOfDays: collectionReconstructResults[i]["TermNoOfDays"],
                                TermNoOfAllowanceDays: collectionReconstructResults[i]["TermNoOfAllowanceDays"],
                                InterestId: collectionReconstructResults[i]["InterestId"],
                                InterestRate: collectionReconstructResults[i]["InterestRate"],
                                InterestAmount: collectionReconstructResults[i]["InterestAmount"],
                                PenaltyId: collectionReconstructResults[i]["PenaltyId"],
                                Penalty: collectionReconstructResults[i]["Penalty"],
                                CurrentBalanceAmount: collectionReconstructResults[i]["CurrentBalanceAmount"],
                                BalanceAmount: collectionReconstructResults[i]["BalanceAmount"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });

            return collectionReconstructArray;
        }

        // collection reconstruct flexgrid
        function collectionReconstructFlexgrid() {
            collectionReconstructCollectionView = new wijmo.collections.CollectionView(getCollectionReconstructByCollectionId());

            collectionReconstructFlexgrid = new wijmo.grid.FlexGrid('#collectionReconstructFlexgrid');
            collectionReconstructFlexgrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Reconstruct No.",
                                "binding": "ReconstructNumber",
                                "allowSorting": false,
                                "width": "1*",
                            },
                            {
                                "header": "Start Date",
                                "binding": "StartDate",
                                "allowSorting": false,
                                "width": "1*",
                            },
                            {
                                "header": "End Date",
                                "binding": "EndDate",
                                "allowSorting": false,
                                "width": "1*",
                            },
                            {
                                "header": "Current Balance Amount",
                                "binding": "CurrentBalanceAmount",
                                "allowSorting": false,
                                "width": "1.5*",
                            },
                            {
                                "header": "Balance Amount",
                                "binding": "BalanceAmount",
                                "allowSorting": false,
                                "width": "1.5*",
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: collectionReconstructCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionReconstructFlexgrid.trackChanges = true;
        }

        // btn collection recon add
        function btnCollectionReconstructAddOnclick() {
            $.ajax({
                url: '/api/dailyCollection/get/lastCurrentCollection/byCollectionId/' + getUrlParameter("collectionId"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (dailyCollectionResults) {
                    if (dailyCollectionResults != null) {
                        $("#collectionReconstructDetailModal").modal({
                            "show": true,
                            "backdrop": "static"
                        });

                        collectionReconstructId = 0;

                        document.getElementById("collectionReconstructNumber").value = "NA - Auto Generate When Save.";

                        var newDate = new Date(dailyCollectionResults.DailyCollectionDate);
                        cboCollectionReconstructStartDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');
                        cboCollectionReconstructEndDateValue = [newDate.getMonth() + 1, newDate.getDate(), newDate.getFullYear()].join('-');
                        createCollectionReconstructStartDate();
                        createCollectionReconstructEndDate();

                        document.getElementById("collectionReconstructCurrentBalanceAmount").value = dailyCollectionResults.CurrentBalanceAmount.toLocaleString();

                        var interestRate = document.getElementById("collectionReconstructInterestRate").value;
                        document.getElementById("collectionReconstructInterestAmount").value = ((dailyCollectionResults.CurrentBalanceAmount / 100) * interestRate).toLocaleString();

                        document.getElementById("collectionReconstructBalanceAmount").value = (dailyCollectionResults.CurrentBalanceAmount + ((dailyCollectionResults.CurrentBalanceAmount / 100) * interestRate)).toLocaleString();
                    } else {
                        toastr.error("Last Collection not processed");
                    }
                }
            });
        }

        // btn collection recon edit
        function btnCollectionReconstructEditButton() {
            $("#collectionReconstructDetailModal").modal({
                "show": true,
                "backdrop": "static"
            });

            collectionReconstructCollectionView.editItem(collectionReconstructCollectionView.currentItem);
            var collectionReconstructItem = collectionReconstructCollectionView.currentEditItem;

            collectionReconstructId = collectionReconstructItem.Id;

            document.getElementById("collectionReconstructNumber").value = collectionReconstructItem.ReconstructNumber;

            var newStartDate = new Date(collectionReconstructItem.StartDate);
            cboCollectionReconstructStartDateValue = [newStartDate.getMonth() + 1, newStartDate.getDate(), newStartDate.getFullYear()].join('-');
            createCollectionReconstructStartDate();

            var newEndDate = new Date(collectionReconstructItem.EndDate);
            cboCollectionReconstructEndDateValue = [newEndDate.getMonth() + 1, newEndDate.getDate(), newEndDate.getFullYear()].join('-');
            createCollectionReconstructEndDate();

            cboCollectionReconstructTerm.selectedValue = collectionReconstructItem.Term;
            document.getElementById("collectionReconstructNoOfDays").value = collectionReconstructItem.TermNoOfDays.toLocaleString();
            document.getElementById("collectionReconstructNoOfAllowanceDays").value = collectionReconstructItem.TermNoOfAllowanceDays.toLocaleString();

            cboCollectionReconstructPenalty.selectedValue = collectionReconstructItem.Penalty;

            document.getElementById("collectionReconstructCurrentBalanceAmount").value = collectionReconstructItem.CurrentBalanceAmount.toLocaleString();
            cboCollectionReconstructInterest.selectedValue = collectionReconstructItem.Interest;
            document.getElementById("collectionReconstructInterestRate").value = collectionReconstructItem.InterestRate.toLocaleString();
            document.getElementById("collectionReconstructInterestAmount").value = collectionReconstructItem.InterestAmount.toLocaleString();

            document.getElementById("collectionReconstructBalanceAmount").value = collectionReconstructItem.BalanceAmount.toLocaleString();
        }

        // cllection reconstruct save
        function btnCollectionReconstructSaveOnclick() {
            document.getElementById("btnCollectionReconstructSave").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
            $("#btnCollectionReconstructSave").prop("disabled", true);
            $("#btnCollectionReconstructClose").prop("disabled", true);

            var collectionReconstructObject = new Object();
            collectionReconstructObject.CollectionId = getUrlParameter("collectionId");
            collectionReconstructObject.StartDate = cboCollectionReconstructStartDateValue;
            collectionReconstructObject.EndDate = cboCollectionReconstructEndDateValue;
            collectionReconstructObject.TermId = cboCollectionReconstructTerm.selectedItem["Id"];
            collectionReconstructObject.TermNoOfDays = cboCollectionReconstructTerm.selectedItem["NoOfDays"];
            collectionReconstructObject.TermNoOfAllowanceDays = cboCollectionReconstructTerm.selectedItem["NoOfAllowanceDays"];
            collectionReconstructObject.InterestId = cboCollectionReconstructInterest.selectedItem["Id"]
            collectionReconstructObject.InterestRate = cboCollectionReconstructInterest.selectedItem["Rate"]
            collectionReconstructObject.InterestAmount = document.getElementById('collectionReconstructInterestAmount').value;
            collectionReconstructObject.PenaltyId = cboCollectionReconstructPenalty.selectedItem["Id"];
            collectionReconstructObject.CurrentBalanceAmount = document.getElementById('collectionReconstructCurrentBalanceAmount').value;
            collectionReconstructObject.BalanceAmount = document.getElementById('collectionReconstructBalanceAmount').value;
            var collectionReconstructData = JSON.stringify(collectionReconstructObject);

            if (collectionReconstructId == 0) {
                $.ajax({
                    type: "POST",
                    url: '/api/collectionReconstruct/add',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: collectionReconstructData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");

                            $("#collectionReconstructDetailModal").modal("hide");

                            dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                            dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                            dailyCollectionFlexGrid.trackChanges = true;

                            collectionReconstructCollectionView = new wijmo.collections.CollectionView(getCollectionReconstructByCollectionId());

                            collectionReconstructFlexgrid.itemsSource = collectionReconstructCollectionView;
                            collectionReconstructFlexgrid.trackChanges = true;
                        },
                        404: function (message) {
                            toastr.error(message.responseText.replace(/"/g, ""), "Error 404 - Not Found");

                            $("#collectionReconstructDetailModal").modal("hide");

                            document.getElementById("btnCollectionReconstructSave").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnCollectionReconstructSave").prop("disabled", false);
                            $("#btnCollectionReconstructClose").prop("disabled", false);
                        },
                        400: function (message) {
                            toastr.error(message.responseText.replace(/"/g, ""), "Error 400 - Bad Request");

                            $("#collectionReconstructDetailModal").modal("hide");

                            document.getElementById("btnCollectionReconstructSave").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnCollectionReconstructSave").prop("disabled", false);
                            $("#btnCollectionReconstructClose").prop("disabled", false);
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "PUT",
                    url: '/api/collectionReconstruct/update/' + collectionReconstructId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: collectionReconstructData,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Successful");

                            $("#collectionReconstructDetailModal").modal("hide");

                            dailyCollectionCollectionView = new wijmo.collections.CollectionView(getDaiyCollection());

                            dailyCollectionFlexGrid.itemsSource = dailyCollectionCollectionView;
                            dailyCollectionFlexGrid.trackChanges = true;

                            collectionReconstructCollectionView = new wijmo.collections.CollectionView(getCollectionReconstructByCollectionId());

                            collectionReconstructFlexgrid.itemsSource = collectionReconstructCollectionView;
                            collectionReconstructFlexgrid.trackChanges = true;
                        },
                        404: function () {
                            toastr.error("Record Not Found");

                            $("#collectionReconstructDetailModal").modal("hide");

                            document.getElementById("btnCollectionReconstructSave").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnCollectionReconstructSave").prop("disabled", false);
                            $("#btnCollectionReconstructClose").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");

                            $("#collectionReconstructDetailModal").modal("hide");

                            document.getElementById("btnCollectionReconstructSave").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnCollectionReconstructSave").prop("disabled", false);
                            $("#btnCollectionReconstructClose").prop("disabled", false);
                        }
                    }
                });
            }
        }

        // btn collection reconstruct delete
        function btnCollectionReconstructDeleteButton() {
            $("#collectionReconstructDeleteConfirmationModal").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        // create reconstruct start date
        function createCollectionReconstructStartDate() {
            cboCollectionReconstructStartDate.dispose();
            cboCollectionReconstructStartDate = new wijmo.input.InputDate('#cboCollectionReconstructStartDate', {
                format: 'MM-dd-yyyy',
                value: new Date(cboCollectionReconstructStartDateValue),
                mask: '99-99-9999',
                min: new Date(cboCollectionReconstructStartDateValue),
                max: new Date(cboCollectionReconstructEndDateValue),
                onValueChanged: function () {
                    var thisDateValue = [this.value.getMonth() + 1, this.value.getDate(), this.value.getFullYear()].join('-');
                    cboCollectionReconstructStartDateValue = thisDateValue;

                    setTimeout(function () {
                        createCollectionReconstructEndDate();
                    }, 50);
                }
            });
        }

        // create reconstruct end date
        function createCollectionReconstructEndDate() {
            cboCollectionReconstructEndDate.dispose();
            cboCollectionReconstructEndDate = new wijmo.input.InputDate('#cboCollectionReconstructEndDate', {
                format: 'MM-dd-yyyy',
                value: new Date(cboCollectionReconstructEndDateValue),
                mask: '99-99-9999',
                min: new Date(cboCollectionReconstructStartDateValue),
                onValueChanged: function () {
                    var thisDateValue = [this.value.getMonth() + 1, this.value.getDate(), this.value.getFullYear()].join('-');
                    cboCollectionReconstructEndDateValue = thisDateValue;

                    setTimeout(function () {
                        createCollectionReconstructStartDate();
                    }, 50);
                }
            });
        }

        // Term
        function getTermData() {
            var termArray = new Array();
            $.ajax({
                url: '/api/term/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (termResults) {
                    var disabled = true;
                    if (termResults.length > 0) {
                        for (i = 0; i < termResults.length; i++) {
                            termArray.push({
                                Id: termResults[i]["Id"],
                                Term: termResults[i]["Term"],
                                NoOfDays: termResults[i]["NoOfDays"],
                                NoOfAllowanceDays: termResults[i]["NoOfAllowanceDays"],
                            });
                        }

                        disabled = false;
                    }

                    cboCollectionReconstructPenalty = new wijmo.input.ComboBox('#cboCollectionReconstructPenalty');
                    getPenaltyData();

                    cboCollectionReconstructTerm.dispose();
                    cboCollectionReconstructTerm = new wijmo.input.ComboBox('#cboCollectionReconstructTerm', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: termArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Term",
                        selectedValuePath: "Term",
                        onSelectedIndexChanged: function () {
                            document.getElementById("collectionReconstructNoOfDays").value = this.selectedItem["NoOfDays"];
                            document.getElementById("collectionReconstructNoOfAllowanceDays").value = this.selectedItem["NoOfAllowanceDays"];
                        }
                    });

                    document.getElementById("collectionReconstructNoOfDays").value = cboCollectionReconstructTerm.selectedItem["NoOfDays"];
                    document.getElementById("collectionReconstructNoOfAllowanceDays").value = cboCollectionReconstructTerm.selectedItem["NoOfAllowanceDays"];
                }
            });
        }

        // Penalty
        function getPenaltyData() {
            var penaltyArray = new Array();
            $.ajax({
                url: '/api/penalty/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (penaltyResults) {
                    var disabled = true;
                    if (penaltyResults.length > 0) {
                        for (i = 0; i < penaltyResults.length; i++) {
                            penaltyArray.push({
                                Id: penaltyResults[i]["Id"],
                                Penalty: penaltyResults[i]["Penalty"],
                            });
                        }

                        disabled = false;
                    }

                    cboCollectionReconstructInterest = new wijmo.input.ComboBox('#cboCollectionReconstructInterest');
                    getInterestData();

                    cboCollectionReconstructPenalty.dispose();
                    cboCollectionReconstructPenalty = new wijmo.input.ComboBox('#cboCollectionReconstructPenalty', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: penaltyArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Penalty",
                        selectedValuePath: "Penalty"
                    });
                }
            });
        }

        // Interest
        function getInterestData() {
            var interestArray = new Array();
            $.ajax({
                url: '/api/interest/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (interestResults) {
                    var disabled = true;
                    if (interestResults.length > 0) {
                        for (i = 0; i < interestResults.length; i++) {
                            interestArray.push({
                                Id: interestResults[i]["Id"],
                                Interest: interestResults[i]["Interest"],
                                Rate: interestResults[i]["Rate"],
                            });
                        }

                        disabled = false;
                    }

                    cboCollectionReconstructInterest.dispose();
                    cboCollectionReconstructInterest = new wijmo.input.ComboBox('#cboCollectionReconstructInterest', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: interestArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "Interest",
                        selectedValuePath: "Interest",
                        onSelectedIndexChanged: function () {
                            document.getElementById("collectionReconstructInterestRate").value = this.selectedItem["Rate"];

                            var currentBalanceAmount = document.getElementById("collectionReconstructCurrentBalanceAmount").value;
                            document.getElementById("collectionReconstructInterestAmount").value = ((currentBalanceAmount / 100) * this.selectedItem["Rate"]).toLocaleString();

                            document.getElementById("collectionReconstructBalanceAmount").value = (currentBalanceAmount + ((currentBalanceAmount / 100) * this.selectedItem["Rate"])).toLocaleString();
                        }
                    });

                    document.getElementById("collectionReconstructInterestRate").value = cboCollectionReconstructInterest.selectedItem["Rate"];
                }
            });
        }


        // on load page
        window.onload = function () {
            toastrModification();
            getCollectionById();
            doubleModal();
            collectionReconstructFlexgrid();

            cboCollectionReconstructStartDate = new wijmo.input.InputDate('#cboCollectionReconstructStartDate');
            createCollectionReconstructStartDate();
            cboCollectionReconstructEndDate = new wijmo.input.InputDate('#cboCollectionReconstructEndDate');
            createCollectionReconstructEndDate();

            cboCollectionReconstructTerm = new wijmo.input.ComboBox('#cboCollectionReconstructTerm');
            getTermData();

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }
        };
    </script>
</body>
</html>