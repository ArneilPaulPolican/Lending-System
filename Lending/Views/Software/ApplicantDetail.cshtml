<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="shortcut icon" href="~/Images/dlhicon.ico">

    <!-- Title -->
    <title>Applicant Detail</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>

    <div id="wrapper">
        <!-- Header -->
        @Html.Partial("SoftwareHeader")

        <div id="page-wrapper">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-lg-12">
                        <h3 class="">
                            <i class="fa fa-users fa-fw"></i>  Applicant Detail <small>Edit detail page</small>
                        </h3>
                        <ol class="breadcrumb">
                            <li>
                                <a href="/Software">Dashboard</a>
                            </li>
                            <li>
                                <a href="/Software/ApplicantList">Applicants</a>
                            </li>
                            <li class="active">
                                Applicant Detail
                            </li>
                        </ol>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="panel panel-default">
                            <div class="panel-heading" align="right">
                                <div class="dropdown">
                                    <button class="btn btn-primary" id="btnLockApplicant" onclick="btnLockApplicantOnclick()">
                                        <i class="fa fa-lock fa-fw"></i> Lock
                                    </button>
                                    <button class="btn btn-primary" id="btnUnlockApplicant" onclick="btnUnlockApplicantOnclick()">
                                        <i class="fa fa-unlock fa-fw"></i> Unlock
                                    </button>
                                    <button class="btn btn-primary" type="button" id="btnOptions" data-toggle="dropdown">
                                        <i class="fa fa-bars fa-fw"></i>
                                    </button>
                                    <ul class="dropdown-menu dropdown-menu-right">
                                        <li class="dropdown-header">Options</li>
                                        <li><a href="#" onclick="btnAddApplicantOnclick()"><i class="fa fa-plus fa-fw"></i> &nbsp; New Applicant</a></li>
                                        <li><a href="#" onclick="deleteApplicantOnclick()"><i class="fa fa-trash fa-fw"></i> &nbsp; Delete</a></li>
                                    </ul>
                                </div>
                            </div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-md-12">
                                        <ul id="myTab" class="nav nav-tabs">
                                            <li class="active">
                                                <a href="#applicantDetail" id="applicantDetailTab" data-toggle="tab">Applicant Detail </a>
                                            </li>
                                            <li>
                                                <a href="#propertiesAndAppliances" id="propertiesAndAppliancesTab" data-toggle="tab">More Details</a>
                                            </li>
                                            <li>
                                                <a href="#applicantRequirements" id="applicantRequirementsTab" data-toggle="tab">Requirements</a>
                                            </li>
                                            <li>
                                                <a href="#applicantTransactions" id="applicantTransactionsTab" data-toggle="tab">Transactions</a>
                                            </li>
                                        </ul>
                                        <br />
                                        <div id="myTabContent" class="tab-content">
                                            <div class="tab-pane fade in active" id="applicantDetail">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                Photo
                                                            </div>
                                                            <div class="panel-body">
                                                                <div class="row">
                                                                    <div class="col-md-7">
                                                                        <div id="photoDiv" style="width: 100%" align="center"></div>
                                                                    </div>
                                                                    <div class="col-md-5">
                                                                        <button class="btn btn-default  btn-block" id="btnApplicantChangePhoto" onclick="btnApplicantChangePhotoOnclick()">
                                                                            <i class="fa fa-image fa-fw"></i> Change Photo
                                                                        </button>
                                                                        <button class="btn btn-danger  btn-block" id="btnApplicantDeletePhoto" onclick="btnApplicantDeletePhotoOnclick()">
                                                                            <i class="fa fa-trash fa-fw"></i> Reset to Default
                                                                        </button>
                                                                        <br />
                                                                        <form class="form-horizontal">
                                                                            <div class="form-group">
                                                                                <div class="col-sm-offset-2 col-sm-10">
                                                                                    <div class="checkbox">
                                                                                        <label><input type="checkbox" id="isCoMaker"> <b>Is Co-Maker</b></label>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </form>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default">
                                                            <div class="panel-body">
                                                                <div class="form-horizontal">
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Applicant Number</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control" id="applicantNumber" placeholder="Last Name" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Area</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group">
                                                                                <div id="applicantArea" style="width: 100%;"></div>
                                                                                <div class="input-group-btn">
                                                                                    <button class="btn btn-primary" onclick="btnAreaDetailOnClick()">
                                                                                        <i class="fa fa-edit fa-fw"></i>
                                                                                    </button>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                Applicants Personal Detail
                                                            </div>
                                                            <div class="panel-body">
                                                                <form class="form-horizontal">
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Last Name</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantLastName" placeholder="Last Name" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">First Name</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantFirstName" placeholder="First Name" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Middle Name / Initial</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control" id="applicantMiddleName" placeholder=" " />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Birth Date</label>
                                                                        <div class="col-sm-8">
                                                                            <div id="applicantBirthDate" style="width: 100%;"></div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Civil Status</label>
                                                                        <div class="col-sm-8">
                                                                            <div id="applicantCivilStatus" style="width: 100%;"></div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">City Address</label>
                                                                        <div class="col-sm-8">
                                                                            <textarea class="form-control requiredApplicantDetail" rows="5" id="applicantCityAddress" placeholder="City Address"></textarea>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Province Address</label>
                                                                        <div class="col-sm-8">
                                                                            <textarea class="form-control requiredApplicantDetail" rows="5" id="applicantProvinceAddress" placeholder="City Address"></textarea>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Contact Number</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantContactNumber" placeholder="Contact Number" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Residence Type</label>
                                                                        <div class="col-sm-8">
                                                                            <div id="applicantResidenceType" style="width: 100%;"></div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Monthly Rent</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group numberField">
                                                                                <span class="input-group-addon">&#8369;</span>
                                                                                <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantResidenceMonthyRent" placeholder="0.00" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Land Residence</label>
                                                                        <div class="col-sm-8">
                                                                            <div id="applicantLandResidenceType" style="width: 100%;"></div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Monthly Rent</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group numberField">
                                                                                <span class="input-group-addon">&#8369;</span>
                                                                                <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantLandResidenceMonthyRent" placeholder="0.00" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Length of Stay</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantLengthOfStay" placeholder="How many months, years or days?" />
                                                                        </div>
                                                                    </div>
                                                                </form>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                Business Detail
                                                            </div>
                                                            <div class="panel-body">
                                                                <form class="form-horizontal">
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Business Address</label>
                                                                        <div class="col-sm-8">
                                                                            <textarea class="form-control requiredApplicantDetail" rows="5" id="applicantBusinessAddress" placeholder="Business Address"></textarea>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Karatula Name</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantBusinessKaratulaName" placeholder="Karatula Name" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Telephone Number</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantBusinessTelephoneNumber" placeholder="Telephone Number" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Business Years</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantBusinessYears" placeholder="How long on said business" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Merchandise</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantBBusinessMerchandise" placeholder="Business Merchandise" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Value of Stocks</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantValuesOfStocks" placeholder="0" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Beginning Capital</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group numberField">
                                                                                <span class="input-group-addon">&#8369;</span>
                                                                                <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantBusinessBeginningCapital" placeholder="0.00" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Sales are low during</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSalesLowPeriod" placeholder="Sales are low during" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Lowest daily sales</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group numberField">
                                                                                <span class="input-group-addon">&#8369;</span>
                                                                                <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantLowestDailySales" placeholder="0" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Average daily sales</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group numberField">
                                                                                <span class="input-group-addon">&#8369;</span>
                                                                                <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantAverageDailySales" placeholder="0" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </form>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                If Employed
                                                            </div>
                                                            <div class="panel-body">
                                                                <form class="form-horizontal">
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Name of Company</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedCompanyName" placeholder="Name of Company" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Company Address</label>
                                                                        <div class="col-sm-8">
                                                                            <textarea class="form-control requiredApplicantDetail" rows="5" id="applicantEmployedCompanyAddress" placeholder="Company Address"></textarea>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Position Occupied</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedPositionOccupied" placeholder="Position Occupied" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Length of Service</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedLengthOfService" placeholder="Length of Service" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Telephone Number</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedTelephoneNumber" placeholder="Telephone Number" />
                                                                        </div>
                                                                    </div>
                                                                </form>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                Spouse's Information and Income Detail
                                                            </div>
                                                            <div class="panel-body">
                                                                <form class="form-horizontal">
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Name of Spouse</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseName" placeholder="Name of Spouse" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Employer / Business</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseEmployerOrBusiness" placeholder="Employer or Business of Spouse" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Business Address</label>
                                                                        <div class="col-sm-8">
                                                                            <textarea class="form-control requiredApplicantDetail" rows="5" id="applicantSpouseBusinessAddress" placeholder="Employer or Business Address"></textarea>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Telephone Number</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseTelephoneNumber" placeholder="Telephone Number" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Position Occupied</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpousePositionOccupied" placeholder="Position Occupied" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Monthly Salary</label>
                                                                        <div class="col-sm-8">
                                                                            <div class="input-group numberField">
                                                                                <span class="input-group-addon">&#8369;</span>
                                                                                <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantSpouseMonthlySalary" placeholder="0.00" />
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Length of Service</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseLengthOfService" placeholder="Length of Service" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">No. of Children</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseNumberOfChildren" placeholder="How many children?" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">No. of Studying</label>
                                                                        <div class="col-sm-8">
                                                                            <input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseNumberOfStudying" placeholder="How many are studying?" />
                                                                        </div>
                                                                    </div>
                                                                    <div class="form-group">
                                                                        <label class="control-label col-sm-4">Schools</label>
                                                                        <div class="col-sm-8">
                                                                            <textarea class="form-control requiredApplicantDetail" rows="5" id="applicantSpouseChildrenSchools" placeholder="What Schools?"></textarea>
                                                                        </div>
                                                                    </div>
                                                                </form>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                Signature (Photo)

                                                            </div>
                                                            <div class="panel-body">
                                                                <div class="row">
                                                                    <div class="col-md-7">
                                                                        <div id="photoSignatureDiv" style="width: 100%" align="center"></div>
                                                                    </div>
                                                                    <div class="col-md-5">
                                                                        <button class="btn btn-default btn-block" id="btnApplicantChangePhotoSignature" onclick="btnApplicantChangePhotoSignatureOnclick()">
                                                                            <i class="fa fa-image fa-fw"></i> Change Photo
                                                                        </button>
                                                                        <button class="btn btn-danger btn-block" id="btnApplicantDeletePhotoSignature" onclick="btnApplicantDeletePhotoSignatureOnclick()">
                                                                            <i class="fa fa-trash fa-fw"></i> Reset to Default
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="panel panel-default">
                                                            <div class="panel-body">
                                                                <div class="row">
                                                                    <div class="col-md-6">
                                                                        <p>Created by:</p>
                                                                        <div style="padding-left: 10px;">
                                                                            <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                                                            <br />
                                                                            <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                                                                        </div>
                                                                    </div>
                                                                    <div class="col-md-6">
                                                                        <p>Updated by:</p>
                                                                        <div style="padding-left: 10px;">
                                                                            <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                                                            <br />
                                                                            <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="tab-pane fade" id="propertiesAndAppliances">
                                                <div id="coMakerApplianceOwnedsGridData">
                                                    <div class="row">
                                                        <div class="col-md-12">
                                                            <ul class="nav nav-pills" style="background-color: #f7f7f7">
                                                                <li class="active"><a data-toggle="pill" href="#realPropertiesOwned" id="realPropertiesOwnedPillTab">Real Properties Owned</a></li>
                                                                <li><a data-toggle="pill" href="#ApplianceOwned" id="appplianceOwnedPillTab">Appliance Owned</a></li>
                                                                <li><a data-toggle="pill" href="#Co-MakersStatement" id="co-MakersStatement">Co-Maker's Statement</a></li>
                                                            </ul>
                                                            <br />
                                                            <div class="tab-content">
                                                                <div id="realPropertiesOwned" class="tab-pane fade in active">
                                                                    <div class="panel panel-default">
                                                                        <div class="panel-heading">
                                                                            <table style="width: 100%">
                                                                                <tr>
                                                                                    <td>
                                                                                        Real Properties Owned
                                                                                    </td>
                                                                                    <td align="right">
                                                                                        <button class="btn btn-primary " id="btnAddApplicantRealPropertiesOwned" onclick="btnAddApplicantRealPropertiesOwnedOnclick()">
                                                                                            <i class="fa fa-plus fa-fw"></i> Add
                                                                                        </button>
                                                                                    </td>
                                                                                </tr>
                                                                            </table>
                                                                        </div>
                                                                        <div class="panel-body">
                                                                            <div id="applicantRealPropertiesOwnedFlexGrid"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div id="ApplianceOwned" class="tab-pane fade">
                                                                    <div class="panel panel-default">
                                                                        <div class="panel-heading">
                                                                            <table style="width: 100%">
                                                                                <tr>
                                                                                    <td>
                                                                                        Appliance Owned
                                                                                    </td>
                                                                                    <td align="right">
                                                                                        <button class="btn btn-primary " id="btnAddApplicantApplianceOwned" onclick="btnAddApplicantApplianceOwnedOnclick()">
                                                                                            <i class="fa fa-plus fa-fw"></i> Add
                                                                                        </button>
                                                                                    </td>
                                                                                </tr>
                                                                            </table>
                                                                        </div>
                                                                        <div class="panel-body">
                                                                            <div id="applicantApplianceOwnedFlexGrid"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                                <div id="Co-MakersStatement" class="tab-pane fade">
                                                                    <div class="panel panel-default">
                                                                        <div class="panel-heading">
                                                                            <table style="width: 100%">
                                                                                <tr>
                                                                                    <td>
                                                                                        Co-Maker's Statement
                                                                                    </td>
                                                                                    <td align="right">
                                                                                        <button class="btn btn-primary " id="btnAddApplicantDetailCoMakersStatement" onclick="btnAddApplicantDetailCoMakersStatementOnclick()">
                                                                                            <i class="fa fa-plus fa-fw"></i> Add
                                                                                        </button>
                                                                                    </td>
                                                                                </tr>
                                                                            </table>
                                                                        </div>
                                                                        <div class="panel-body">
                                                                            <div id="co-MakersStatementGrid" class="grid"></div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="tab-pane fade" id="applicantRequirements">
                                                <div class="panel panel-default">
                                                    <div class="panel-heading">
                                                        <table style="width: 100%">
                                                            <tr>
                                                                <td>
                                                                    Applicant Requirements
                                                                </td>
                                                                <td align="right">
                                                                    <button class="btn btn-primary " id="btnAddApplicantRequirements" onclick="btnAddApplicationRequirementsOnclick()">
                                                                        <i class="fa fa-plus fa-fw"></i> Add
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </table>
                                                    </div>
                                                    <div class="panel-body">
                                                        <div id="applicantRequirementsFlexgrid"></div>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="tab-pane fade" id="applicantTransactions">
                                                <ul class="nav nav-pills" style="background-color: #f7f7f7">
                                                    <li class="active"><a data-toggle="pill" href="#applicantLoans" id="applicantLoansTab">Loan History</a></li>
                                                    <li><a data-toggle="pill" href="#applicantCollections" id="applicantCollectionsTab">Collections / Posting / Index</a></li>
                                                </ul>
                                                <br />
                                                <div class="tab-content">
                                                    <div id="applicantLoans" class="tab-pane fade in active">
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                <div class="input-group">
                                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                                    <input type="text" id="applicantLoanSearchInput" class="form-control" placeholder="Search" />
                                                                </div>
                                                            </div>
                                                            <div class="panel-body">
                                                                <div id="applicantLoansFlexgrid"></div>
                                                            </div>
                                                            <div class="panel-footer">
                                                                <div class="row">
                                                                    <div class="btn-group col-md-7" id="naviagtionPageGrid">
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGrid">
                                                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                                                        </button>
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGrid">
                                                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                                                        </button>
                                                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGrid"></button>
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGrid">
                                                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                                                        </button>
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGrid">
                                                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div id="applicantCollections" class="tab-pane fade">
                                                        <div class="panel panel-default">
                                                            <div class="panel-heading">
                                                                <table border="0" style="width: 100%;">
                                                                    <tr>
                                                                        <td style="width: 90%">
                                                                            <div class="input-group">
                                                                                <span class="input-group-addon"> Transaction No. </span>
                                                                                <div id="cboLoan" style="width: 100%;"></div>
                                                                            </div>
                                                                        </td>
                                                                        <td style="width: 1%"></td>
                                                                        <td style="width: 9%">
                                                                            <button class="btn btn-primary btn-block" onclick="btnPrintPosting()"><i class="fa fa-print fa-fw"></i> Print</button>
                                                                        </td>
                                                                    </tr>
                                                                </table>
                                                            </div>
                                                            <div class="panel-heading">
                                                                <div class="input-group">
                                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                                    <input type="text" id="applicantCollectionsSearchInput" class="form-control" placeholder="Search" />
                                                                </div>
                                                            </div>
                                                            <div class="panel-body">
                                                                <div id="applicantCollectionsFlexgrid"></div>
                                                                @*<div class="panel panel-default">
                                                                        <div class="panel-body">
                                                                        </div>
                                                                    </div>*@
                                                                @*<ul class="nav nav-tabs">
                                                                        <li class="active"><a data-toggle="tab" href="#summaryCollection" id="summaryCollectionTab">Summary</a></li>
                                                                        <li><a data-toggle="tab" href="#detailCollection" id="detailCollectionTab">Detail</a></li>
                                                                    </ul>
                                                                    <br />*@
                                                                <div class="tab-content">
                                                                    @*<div id="summaryCollection" class="tab-pane fade in active">

                                                                        </div>*@
                                                                    <div id="detailCollection" class="tab-pane fade">
                                                                        <div class="panel panel-default">
                                                                            <div class="panel-heading">
                                                                                <div class="input-group">
                                                                                    <span class="input-group-addon"><i class="fa fa-search fa-fw"></i> </span>
                                                                                    <input type="text" id="applicantCollectionLinesSearchInput" class="form-control" placeholder="Search" />
                                                                                </div>
                                                                            </div>
                                                                            <div class="panel-body">
                                                                                <div id="applicantCollectionLinesFlexgrid"></div>
                                                                            </div>
                                                                            <div class="panel-footer">
                                                                                <div class="row">
                                                                                    <div class="btn-group col-md-7" id="naviagtionPageGridCollectionLines">
                                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridCollectionLines">
                                                                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                                                                        </button>
                                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridCollectionLines">
                                                                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                                                                        </button>
                                                                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridCollectionLines"></button>
                                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridCollectionLines">
                                                                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                                                                        </button>
                                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridCollectionLines">
                                                                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                                                                        </button>
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        </div>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="panel-footer">
                                                                <div class="row">
                                                                    <div class="btn-group col-md-7" id="naviagtionPageGridCollections">
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToFirstPageGridCollections">
                                                                            <span class="glyphicon glyphicon-fast-backward"></span> First
                                                                        </button>
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToPreviousPageGridCollections">
                                                                            <span class="glyphicon glyphicon-step-backward"></span> Previous
                                                                        </button>
                                                                        <button type="button" class="btn btn-default border-custom" disabled style="width: 100px" id="btnCurrentPageGridCollections"></button>
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToNextPageGridCollections">
                                                                            <span class="glyphicon glyphicon-step-forward"></span> Next
                                                                        </button>
                                                                        <button type="button" class="btn btn-default border-custom" id="btnMoveToLastPageGridCollections">
                                                                            <span class="glyphicon glyphicon-fast-forward"></span> Last
                                                                        </button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail change photo -->
    <div class="modal fade" id="applicantDetailChangePhotoModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Change Photo</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Choose an image file</label><br />
                        <input type="file" class="form-control" id="applicantImage">
                    </div>
                    <div align="center" id="divImage">
                        <img id="imageDisplay" src="#" class="img-responsive img-thumbnail" />
                        <hr />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnOkChangePhoto" onclick="btnOkChangePhotoOnclick()"><i class="fa fa-check fa-fw"></i> Update</button>
                    <button class="btn btn-danger" id="btnCloseChangePhoto" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>


    <!-- applicant detail change photo -->
    <div class="modal fade" id="applicantDetailChangePhotoModalSignature" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Change Photo</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Choose an image file</label><br />
                        <input type="file" class="form-control" id="applicantImageSignature">
                    </div>
                    <div align="center" id="divImageSignature">
                        <img id="imageDisplaySignature" src="#" class="img-responsive img-thumbnail" />
                        <hr />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnOkChangePhotoSignature" onclick="btnOkChangePhotoSignatureOnclick()"><i class="fa fa-check fa-fw"></i> Update</button>
                    <button class="btn btn-danger" id="btnCloseChangePhotoSignature" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>


    <!-- delete confirmation applicant photo modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailPhotoModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Photo</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailPhoto" onclick="btnConfirmDeleteApplicantDetailPhotoOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseApplicantDetailPhoto" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>
    <!-- delete confirmation applicant photo modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailPhotoModalSignature" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Signature Photo</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailPhotoSignature" onclick="btnConfirmDeleteApplicantDetailPhotoSignatureOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseApplicantDetailPhotoSignature" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail edit real properties owned  -->
    <div class="modal fade" id="applicantDetailRealPropertiesOwnedModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Real Properties Owned Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Real</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedReal" placeholder="Real" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Location</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedLocation" placeholder="Location" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Present Value</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedPresentValue" placeholder="Present Value" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Ecumbered To</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedEcumberedTo" placeholder="Ecumbered To" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailRealPropertiesOwned" onclick="btnSaveApplicantDetailRealPropertiesOwnedOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailRealPropertiesOwned" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant real properties owned modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailRealPropertiesOwnedModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Property</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailRealPropertiesOwned" onclick="btnConfirmDeleteApplicantDetailRealPropertiesOwnedOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailRealPropertiesOwned" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail edit appliance owned  -->
    <div class="modal fade" id="applicantDetailApplianceOwnedModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Appliance Owned Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Appliance Brand</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireApplicantApplianceOwned" id="applicantDetailApplianceOwnedBrand" placeholder="Real" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Present Value</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireApplicantApplianceOwned" id="applicantDetailApplianceOwnedPresentValue" placeholder="Present Value" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailApplianceOwned" onclick="btnSaveApplicantDetailApplianceOwnedOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailApplianceOwned" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant appliance owned modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailApplianceOwnedModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Appliance</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailApplianceOwned" onclick="btnConfirmDeleteApplicantDetailApplianceOwnedOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailApplianceOwned" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail Co makers statement detail modal -->
    <div class="modal fade" id="applicantDetailCoMakersStatementModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Co-Maker's Statement Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Co-Maker</label>
                            <div class="col-sm-8">
                                <div id="cboCoMaker"></div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnCoMakersStatementSaveChangesButton" onclick="btnSaveChangeCoMakersStatementOnclick()">
                        <i class="fa fa-save fa-fw"></i> Save
                    </button>
                    <button class="btn btn-danger" id="btnCoMakersStatementCancelChangesButton" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation coMakers statement  -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailCoMakerStatementModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Co-Maker</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailCoMakerStatement" onclick="btnConfirmDeleteApplicantDetailCoMakerStatementOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailCoMakerStatement" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail CoMaker statement edit real properties owned  -->
    <div class="modal fade" id="applicantDetailCoMakerRealPropertiesOwnedModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Co-Maker's Real Properties Owned Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Real</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireCoMakerRealPropertiesOwned" id="applicantDetailCoMakerRealPropertiesOwnedReal" placeholder="Real" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Location</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireCoMakerRealPropertiesOwned" id="applicantDetailCoMakerRealPropertiesOwnedLocation" placeholder="Location" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Present Value</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireCoMakerRealPropertiesOwned" id="applicantDetailCoMakerRealPropertiesOwnedPresentValue" placeholder="Present Value" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Ecumbered To</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireCoMakerRealPropertiesOwned" id="applicantDetailCoMakerRealPropertiesOwnedEcumberedTo" placeholder="Ecumbered To" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailCoMakerRealPropertiesOwned" onclick="btnSaveApplicantDetailCoMakerRealPropertiesOwnedOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailCoMakerRealPropertiesOwned" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant  coMakers statement  real properties owned modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailCoMakerRealPropertiesOwnedModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Property</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned" onclick="btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwnedOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailCoMakerRealPropertiesOwned" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail edit coMakers statement  appliance owned  -->
    <div class="modal fade" id="applicantDetailCoMakerApplianceOwnedModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Co-Maker's Appliance Owned Detail</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Appliance Brand</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireCoMakerApplianceOwned" id="applicantDetailCoMakerApplianceOwnedBrand" placeholder="Real" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Present Value</label>
                            <div class="col-sm-8">
                                <input type="text" class="form-control requireCoMakerApplianceOwned" id="applicantDetailCoMakerApplianceOwnedPresentValue" placeholder="Present Value" />
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailCoMakerApplianceOwned" onclick="btnSaveApplicantDetailCoMakerApplianceOwnedOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailCoMakerApplianceOwned" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation co maker appliance owned modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailCoMakerApplianceOwnedModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Appliance</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailCoMakerApplianceOwned" onclick="btnConfirmDeleteApplicantDetailCoMakerApplianceOwnedOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailCoMakerApplianceOwned" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail edit requirements  -->
    <div class="modal fade" id="applicantRequirementsDetail" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Applicant Requirements</h4>
                </div>
                <div class="modal-body">
                    <form class="form-horizontal">
                        <div class="form-group">
                            <label class="control-label col-sm-4">Requirement</label>
                            <div class="col-sm-8">
                                <div id="cboRequirement" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Note</label>
                            <div class="col-sm-8">
                                <textarea class="form-control requiredApplicantRequirements" rows="5" id="applicantRequirementNote" placeholder="Note"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-sm-4">Valid Date</label>
                            <div class="col-sm-8">
                                <div id="cboValidDate" style="width: 100%;"></div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailRequirements" onclick="btnSaveApplicantDetailRequirementsOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailRequirements" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant requirements -->
    <div class="modal fade" id="applicantRequirementsDeleteConfirm" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Requirement</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicantDetailApplicantRequirement" onclick="btnConfirmDeleteApplicantDetailApplicantRequirementOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailApplicantRequirement" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant modal -->
    <div class="modal fade" id="deleteConfirmationApplicantModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Applicant</h4>
                </div>
                <div class="modal-body">
                    Delete?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" id="btnConfirmDeleteApplicant" onclick="btnConfirmDeleteApplicantOnclick()">Delete</button>
                    <button class="btn btn-default" id="btnCloseDeleteApplicantModal" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var cboApplicantArea = new wijmo.input.ComboBox('#applicantArea');
        var cboBirthDate;
        var cboCivilStatus = new wijmo.input.ComboBox('#applicantCivilStatus');
        var cboResidenceType = new wijmo.input.ComboBox('#applicantResidenceType');
        var cboLandResidenceType = new wijmo.input.ComboBox('#applicantLandResidenceType');
        var applicantRealPropertiesOwnedCollectionView;
        var applicantRealPropertiesOwnedFlexGrid;
        var applicantApplianceOwnedCollectionView;
        var applicantApplianceOwnedFlexGrid;
        var applicantRealPropertiesOwnedId;
        var applicantApplianceOwnedId;
        var coMakerApplicantRealPropertiesOwnedCollectionView;
        var coMakerApplicantRealPropertiesOwnedFlexGrid;
        var coMakerApplicantApplianceOwnedCollectionView;
        var coMakerApplicantApplianceOwnedFlexGrid;
        var coMakerStatementCollectionView;
        var coMakerStatementFlexGrid;
        var coMakerStatementId = 0;
        var applicantDetailCoMakerRealPropertiesOwnedId = 0;
        var coMakerApplicantApplianceOwnedId = 0;
        var isLocked = false;
        var cboCoMaker;

        // cbo co maker
        function createCboCoMakerApplicant() {
            var coMakerArray = new Array();
            $.ajax({
                url: '/api/applicant/list/Co-Maker',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (coMakerResults) {
                    var disabled = true;
                    if (coMakerResults.length > 0) {
                        for (i = 0; i < coMakerResults.length; i++) {
                            coMakerArray.push({
                                Id: coMakerResults[i]["Id"],
                                ApplicantFullName: coMakerResults[i]["ApplicantFullName"],
                                ApplicantNumber: "CM-" + coMakerResults[i]["ApplicantNumber"],
                                Area: coMakerResults[i]["Area"],
                            });
                        }

                        disabled = false;
                    }

                    var template = '<table style="table-layout:fixed; width:650px; margin-top: 10px; margin-bottom: 10px;" border="0"> ' +
                                        '<col style="width: 120px;"/>' +
                                        '<col style="width: 200px;"/>' +
                                        '<col style="width: 150px;"/>' +
                                        '<thead>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Co-Maker No. </td>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Name </td>' +
                                            '<th style="word-wrap:break-word; valign="top"> Area </td>' +
                                        '</thead>' +
                                         '<tbody>' +
                                            '<tr>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{ApplicantNumber}</td>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{ApplicantFullName}</td>' +
                                                '<td style="word-wrap:break-word; valign="top">{Area}</td>' +
                                            '</tr>' +
                                        '</tbody>' +
                                   '</table>';

                    // applicant
                    cboCoMaker.dispose();
                    cboCoMaker = new wijmo.input.ComboBox('#cboCoMaker', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: coMakerArray,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "ApplicantFullName",
                        selectedValuePath: "Id",
                    });
                }
            });
        }


        // cbo birthdate
        function createCboBirthDate() {
            // applicant
            cboBirthDate = new wijmo.input.InputDate('#applicantBirthDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999'
            });
        }

        // cbo Applicant Area
        function createCboApplicantArea() {
            createCboBirthDate();
            var areaArray = new Array();
            $.ajax({
                url: '/api/area/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (areaResults) {
                    var disabled = true;
                    if (areaResults.length > 0) {
                        for (i = 0; i < areaResults.length; i++) {
                            areaArray.push({
                                Id: areaResults[i]["Id"],
                                AreaNumber: "AR-" + areaResults[i]["AreaNumber"],
                                Area: areaResults[i]["Area"],
                            });
                        }

                        disabled = false;
                    }

                    var template = '<table style="table-layout:fixed; width:550px; margin-top: 10px; margin-bottom: 10px;" border="0"> ' +
                                        '<col style="width: 120px;"/>' +
                                        '<col style="width: 200px;"/>' +
                                        '<thead>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Area No. </td>' +
                                            '<th style="word-wrap:break-word; valign="top"> Area </td>' +
                                        '</thead>' +
                                         '<tbody>' +
                                            '<tr>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{AreaNumber}</td>' +
                                                '<td style="word-wrap:break-word; valign="top">{Area}</td>' +
                                            '</tr>' +
                                        '</tbody>' +
                                   '</table>';

                    // applicant
                    cboApplicantArea.dispose();
                    cboApplicantArea = new wijmo.input.ComboBox('#applicantArea', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: areaArray,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "Area",
                        selectedValuePath: "Area",
                    });
                }
            });
        }

        // cbo civil status
        function createCboCivilStatus() {
            createCboApplicantArea();
            var civilStatusArray = new Array();
            $.ajax({
                url: '/api/civilStatus/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (civilStatusResults) {
                    var disabled = true;
                    if (civilStatusResults.length > 0) {
                        for (i = 0; i < civilStatusResults.length; i++) {
                            civilStatusArray.push({
                                Id: civilStatusResults[i]["Id"],
                                CivilStatus: civilStatusResults[i]["CivilStatus"],
                            });
                        }

                        disabled = false;
                    }

                    // applicant
                    cboCivilStatus.dispose();
                    cboCivilStatus = new wijmo.input.ComboBox('#applicantCivilStatus', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: civilStatusArray,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "CivilStatus",
                        selectedValuePath: "CivilStatus"
                    });
                }
            });
        }

        // cbo Residence Type
        function createCboResidenceType() {
            createCboCivilStatus();
            var residenceTypeArray = new Array();
            $.ajax({
                url: '/api/residenceType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (residenceTypeResults) {
                    var disabled = true;
                    if (residenceTypeResults.length > 0) {
                        for (i = 0; i < residenceTypeResults.length; i++) {
                            residenceTypeArray.push({
                                Id: residenceTypeResults[i]["Id"],
                                ResidenceType: residenceTypeResults[i]["ResidenceType"],
                            });
                        }

                        disabled = false;
                    }

                    // applicant
                    cboResidenceType.dispose();
                    cboResidenceType = new wijmo.input.ComboBox('#applicantResidenceType', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: residenceTypeArray,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "ResidenceType",
                        selectedValuePath: "ResidenceType"
                    });

                    cboLandResidenceType.dispose();
                    cboLandResidenceType = new wijmo.input.ComboBox('#applicantLandResidenceType', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: residenceTypeArray,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "ResidenceType",
                        selectedValuePath: "ResidenceType"
                    });
                }
            });
        }

        // get Applicant Detail
        function getApplicantDetail() {
            createCboResidenceType();
            $.ajax({
                url: '/api/applicant/getById/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantDetailResult) {
                    if (applicantDetailResult != null) {
                        // applicant Image
                        var imageElement = document.createElement("images");
                        var imageData = new Image();
                        imageData.src = "data:image/jpeg;base64," + applicantDetailResult.Photo;
                        imageData.className = "img-responsive img-thumbnail";
                        imageElement.appendChild(imageData);
                        var photoDivElement = document.createElement("DIV");
                        var photoDiv = document.getElementById("photoDiv").appendChild(imageElement);
                        photoDiv.appendChild(photoDivElement);

                        var imageElementSignature = document.createElement("images");
                        var imageDataSignature = new Image();
                        imageDataSignature.src = "data:image/jpeg;base64," + applicantDetailResult.PhotoSignature;
                        imageDataSignature.className = "img-responsive img-thumbnail";
                        imageElementSignature.appendChild(imageDataSignature);
                        var photoSignatureDivElement = document.createElement("DIV");
                        var photoSignatureDiv = document.getElementById("photoSignatureDiv").appendChild(imageElementSignature);
                        photoSignatureDiv.appendChild(photoSignatureDivElement);

                        document.getElementById("applicantNumber").disabled = true;

                        if (applicantDetailResult.IsCoMaker) {
                            document.getElementById("applicantNumber").value = "CM-" + applicantDetailResult.ApplicantNumber;
                        } else {
                            document.getElementById("applicantNumber").value = "AP-" + applicantDetailResult.ApplicantNumber;
                        }

                        document.getElementById("isCoMaker").checked = applicantDetailResult.IsCoMaker;
                        document.getElementById("applicantLastName").value = applicantDetailResult.ApplicantLastName;
                        document.getElementById("applicantFirstName").value = applicantDetailResult.ApplicantFirstName;
                        document.getElementById("applicantMiddleName").value = applicantDetailResult.ApplicantMiddleName;
                        cboBirthDate.value = new Date(applicantDetailResult.BirthDate);
                        cboCivilStatus.selectedValue = applicantDetailResult.CivilStatus;
                        cboApplicantArea.selectedValue = applicantDetailResult.Area;
                        cboResidenceType.selectedValue = applicantDetailResult.ResidenceType;
                        cboLandResidenceType.selectedValue = applicantDetailResult.LandResidenceType;
                        document.getElementById("applicantCityAddress").value = applicantDetailResult.CityAddress;
                        document.getElementById("applicantProvinceAddress").value = applicantDetailResult.ProvinceAddress;
                        document.getElementById("applicantContactNumber").value = applicantDetailResult.ContactNumber;
                        document.getElementById("applicantResidenceMonthyRent").value = applicantDetailResult.ResidenceMonthlyRentAmount.toLocaleString();
                        document.getElementById("applicantLandResidenceMonthyRent").value = applicantDetailResult.LandResidenceMonthlyRentAmount.toLocaleString();
                        document.getElementById("applicantLengthOfStay").value = applicantDetailResult.LengthOfStay;
                        document.getElementById("applicantBusinessAddress").value = applicantDetailResult.BusinessAddress;
                        document.getElementById("applicantBusinessKaratulaName").value = applicantDetailResult.BusinessKaratulaName;
                        document.getElementById("applicantBusinessTelephoneNumber").value = applicantDetailResult.BusinessTelephoneNumber;
                        document.getElementById("applicantBusinessYears").value = applicantDetailResult.BusinessYear;
                        document.getElementById("applicantBBusinessMerchandise").value = applicantDetailResult.BusinessMerchandise;
                        document.getElementById("applicantValuesOfStocks").value = applicantDetailResult.BusinessStockValues;
                        document.getElementById("applicantBusinessBeginningCapital").value = applicantDetailResult.BusinessBeginningCapital.toLocaleString();;
                        document.getElementById("applicantSalesLowPeriod").value = applicantDetailResult.BusinessLowSalesPeriod;
                        document.getElementById("applicantLowestDailySales").value = applicantDetailResult.BusinessLowestDailySales.toLocaleString();;
                        document.getElementById("applicantAverageDailySales").value = applicantDetailResult.BusinessAverageDailySales.toLocaleString();;
                        document.getElementById("applicantEmployedCompanyName").value = applicantDetailResult.EmployedCompany;
                        document.getElementById("applicantEmployedCompanyAddress").value = applicantDetailResult.EmployedCompanyAddress;
                        document.getElementById("applicantEmployedPositionOccupied").value = applicantDetailResult.EmployedPositionOccupied;
                        document.getElementById("applicantEmployedLengthOfService").value = applicantDetailResult.EmployedServiceLength;
                        document.getElementById("applicantEmployedTelephoneNumber").value = applicantDetailResult.EmployedTelephoneNumber;
                        document.getElementById("applicantSpouseName").value = applicantDetailResult.SpouseFullName;
                        document.getElementById("applicantSpouseEmployerOrBusiness").value = applicantDetailResult.SpouseEmployerBusiness;
                        document.getElementById("applicantSpouseBusinessAddress").value = applicantDetailResult.SpouseEmployerBusinessAddress;
                        document.getElementById("applicantSpouseTelephoneNumber").value = applicantDetailResult.SpouseBusinessTelephoneNumber;
                        document.getElementById("applicantSpousePositionOccupied").value = applicantDetailResult.SpousePositionOccupied;
                        document.getElementById("applicantSpouseMonthlySalary").value = applicantDetailResult.SpouseMonthlySalary;
                        document.getElementById("applicantSpouseLengthOfService").value = applicantDetailResult.SpouseLengthOfService;
                        document.getElementById("applicantSpouseNumberOfChildren").value = applicantDetailResult.NumberOfChildren;
                        document.getElementById("applicantSpouseNumberOfStudying").value = applicantDetailResult.Studying;
                        document.getElementById("applicantSpouseChildrenSchools").value = applicantDetailResult.Schools;
                        document.getElementById('stampCreatedBy').innerHTML = applicantDetailResult.CreatedByUser;
                        document.getElementById('stampCreatedDate').innerHTML = applicantDetailResult.CreatedDateTime;
                        document.getElementById('stampUpdatedBy').innerHTML = applicantDetailResult.UpdatedByUser;
                        document.getElementById('stampUpdatedDate').innerHTML = applicantDetailResult.UpdatedDateTime;

                        if (applicantDetailResult.IsLocked) {
                            cboBirthDate.isDisabled = true;
                            cboCivilStatus.isDisabled = true;
                            cboApplicantArea.isDisabled = true;
                            cboResidenceType.isDisabled = true;
                            cboLandResidenceType.isDisabled = true;

                            $("#btnLockApplicant").prop("disabled", true);
                            $("#btnApplicantChangePhoto").prop("disabled", true);
                            $("#btnApplicantDeletePhoto").prop("disabled", true);

                            $("#btnAddApplicantRealPropertiesOwned").prop("disabled", true);
                            $("#btnAddApplicantApplianceOwned").prop("disabled", true);
                            $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", true);
                            $("#btnAddApplicantRequirements").prop("disabled", true);

                            document.getElementById("applicantLastName").disabled = true;
                            document.getElementById("applicantFirstName").disabled = true;
                            document.getElementById("applicantMiddleName").disabled = true;
                            document.getElementById("isCoMaker").disabled = true;
                            document.getElementById("applicantCityAddress").disabled = true;
                            document.getElementById("applicantProvinceAddress").disabled = true;
                            document.getElementById("applicantContactNumber").disabled = true;
                            document.getElementById("applicantResidenceMonthyRent").disabled = true;
                            document.getElementById("applicantLandResidenceMonthyRent").disabled = true;
                            document.getElementById("applicantLengthOfStay").disabled = true;
                            document.getElementById("applicantBusinessAddress").disabled = true;
                            document.getElementById("applicantBusinessKaratulaName").disabled = true;
                            document.getElementById("applicantBusinessTelephoneNumber").disabled = true;
                            document.getElementById("applicantBusinessYears").disabled = true;
                            document.getElementById("applicantBBusinessMerchandise").disabled = true;
                            document.getElementById("applicantValuesOfStocks").disabled = true;
                            document.getElementById("applicantBusinessBeginningCapital").disabled = true;
                            document.getElementById("applicantSalesLowPeriod").disabled = true;
                            document.getElementById("applicantLowestDailySales").disabled = true;
                            document.getElementById("applicantAverageDailySales").disabled = true;
                            document.getElementById("applicantEmployedCompanyName").disabled = true;
                            document.getElementById("applicantEmployedCompanyAddress").disabled = true;
                            document.getElementById("applicantEmployedPositionOccupied").disabled = true;
                            document.getElementById("applicantEmployedLengthOfService").disabled = true;
                            document.getElementById("applicantEmployedTelephoneNumber").disabled = true;
                            document.getElementById("applicantSpouseName").disabled = true;
                            document.getElementById("applicantSpouseEmployerOrBusiness").disabled = true;
                            document.getElementById("applicantSpouseBusinessAddress").disabled = true;
                            document.getElementById("applicantSpouseTelephoneNumber").disabled = true;
                            document.getElementById("applicantSpousePositionOccupied").disabled = true;
                            document.getElementById("applicantSpouseMonthlySalary").disabled = true;
                            document.getElementById("applicantSpouseLengthOfService").disabled = true;
                            document.getElementById("applicantSpouseNumberOfChildren").disabled = true;
                            document.getElementById("applicantSpouseNumberOfStudying").disabled = true;
                            document.getElementById("applicantSpouseChildrenSchools").disabled = true;

                            $("#btnApplicantChangePhotoSignature").prop("disabled", true);
                            $("#btnApplicantDeletePhotoSignature").prop("disabled", true);
                            isLocked = true;
                        } else {
                            $("#btnUnlockApplicant").prop("disabled", true);
                            isLocked = false;
                        }

                        createFlexGridApplicantRealPropertiesOwned();
                    } else {
                        alert("The record you'd requested has no data");
                        window.history.back();
                    }
                }
            });
        }

        // form input validation
        function inputValidation() {
            var isValid = true;
            $('.requiredApplicantDetail').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // update applicant detail or update changes
        function btnSaveChangesApplicantOnclick() {
            if (inputValidation()) {
                var applicantDetailObject = new Object();
                applicantDetailObject.IsCoMaker = document.getElementById("isCoMaker").checked;
                applicantDetailObject.ApplicantLastName = document.getElementById('applicantLastName').value;
                applicantDetailObject.ApplicantFirstName = document.getElementById('applicantFirstName').value;
                applicantDetailObject.ApplicantMiddleName = document.getElementById('applicantMiddleName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.AreaId = cboApplicantArea.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ContactNumber = document.getElementById('applicantContactNumber').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.ResidenceMonthlyRentAmount = document.getElementById("applicantResidenceMonthyRent").value;
                applicantDetailObject.LandResidenceTypeId = cboLandResidenceType.selectedItem["Id"];
                applicantDetailObject.LandResidenceMonthlyRentAmount = document.getElementById("applicantLandResidenceMonthyRent").value;
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            window.setTimeout(function () {
                                location.reload();
                            }, 1500);
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // get applicant real properties owned
        function getApplicantRealPropertiesOwned() {
            var applicantRealPropertiesOwnedArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/applicantRealPropertiesOwned/listByApplicantId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantRealPropertiesOwnedResult) {
                    if (applicantRealPropertiesOwnedResult.length > 0) {
                        var btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRealPropertiesOwnedOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                        var btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRealPropertiesOwnedOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";

                        var canPerformActions = "@ViewData["CanPerformActions"]";
                        if (canPerformActions == 1) {
                            if (isLocked) {
                                btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRealPropertiesOwnedOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRealPropertiesOwnedOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            } else {
                                btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRealPropertiesOwnedOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRealPropertiesOwnedOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            }
                        } else {
                            btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRealPropertiesOwnedOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                            btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRealPropertiesOwnedOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                        }

                        for (i = 0; i < applicantRealPropertiesOwnedResult.length; i++) {
                            applicantRealPropertiesOwnedArray.push({
                                EditButton: btnEditButton,
                                DeleteButton: btnDeleteButton,
                                Id: applicantRealPropertiesOwnedResult[i]["Id"],
                                ApplicantId: applicantRealPropertiesOwnedResult[i]["ApplicantId"],
                                Applicant: applicantRealPropertiesOwnedResult[i]["Applicant"],
                                Real: applicantRealPropertiesOwnedResult[i]["Real"],
                                Location: applicantRealPropertiesOwnedResult[i]["Location"],
                                PresentValue: applicantRealPropertiesOwnedResult[i]["PresentValue"],
                                EcumberedTo: applicantRealPropertiesOwnedResult[i]["EcumberedTo"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return applicantRealPropertiesOwnedArray;
        }

        // create flexgrid for applicant real properties owned
        function createFlexGridApplicantRealPropertiesOwned() {
            createFlexGridApplicantApplianceOwned();

            applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

            // Flex Grid
            applicantRealPropertiesOwnedFlexGrid = new wijmo.grid.FlexGrid('#applicantRealPropertiesOwnedFlexGrid');
            applicantRealPropertiesOwnedFlexGrid.initialize({
                columns: [
                            {
                                "header": "Real Properties Owned",
                                "isReadOnly": true,
                                "visible": false,
                                "allowDragging": false,
                                "width": "*"
                            },
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Real",
                                "binding": "Real",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Present Value",
                                "binding": "PresentValue",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: applicantRealPropertiesOwnedCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
        }

        // add applicant real properties owned click event
        function btnAddApplicantRealPropertiesOwnedOnclick() {
            $("#applicantDetailRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requireApplicantRealPropertiesOwned').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);

            applicantRealPropertiesOwnedId = 0;
            document.getElementById('applicantDetailRealPropertiesOwnedReal').value = "NA";
            document.getElementById('applicantDetailRealPropertiesOwnedLocation').value = "NA";
            document.getElementById('applicantDetailRealPropertiesOwnedPresentValue').value = "NA";
            document.getElementById('applicantDetailRealPropertiesOwnedEcumberedTo').value = "NA";
        }

        // edit applicant real properties owned click event
        function editApplicantRealPropertiesOwnedOnclick() {
            $("#applicantDetailRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requireApplicantRealPropertiesOwned').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);

            applicantRealPropertiesOwnedCollectionView.editItem(applicantRealPropertiesOwnedCollectionView.currentItem);
            var applicantRealPropertiesOwned = applicantRealPropertiesOwnedCollectionView.currentEditItem;
            applicantRealPropertiesOwnedId = applicantRealPropertiesOwned.Id;
            document.getElementById('applicantDetailRealPropertiesOwnedReal').value = applicantRealPropertiesOwned.Real;
            document.getElementById('applicantDetailRealPropertiesOwnedLocation').value = applicantRealPropertiesOwned.Location;
            document.getElementById('applicantDetailRealPropertiesOwnedPresentValue').value = applicantRealPropertiesOwned.PresentValue;
            document.getElementById('applicantDetailRealPropertiesOwnedEcumberedTo').value = applicantRealPropertiesOwned.EcumberedTo;
        }

        // form input validation
        function inputValidationForApplicantRealPropertiesOwned() {
            var isValid = true;
            $('.requireApplicantRealPropertiesOwned').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Applicant Detail Real Properties Owned Onclick
        function btnSaveApplicantDetailRealPropertiesOwnedOnclick() {
            if (inputValidationForApplicantRealPropertiesOwned()) {
                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", true);
                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", true);

                var applicantDetailRealPropertiesOwnedObject = new Object();
                applicantDetailRealPropertiesOwnedObject.ApplicantId = getUrlParameter("id");
                applicantDetailRealPropertiesOwnedObject.Real = document.getElementById('applicantDetailRealPropertiesOwnedReal').value;
                applicantDetailRealPropertiesOwnedObject.Location = document.getElementById('applicantDetailRealPropertiesOwnedLocation').value;
                applicantDetailRealPropertiesOwnedObject.PresentValue = document.getElementById('applicantDetailRealPropertiesOwnedPresentValue').value;
                applicantDetailRealPropertiesOwnedObject.EcumberedTo = document.getElementById('applicantDetailRealPropertiesOwnedEcumberedTo').value;
                var applicantDetailRealPropertiesOwnedData = JSON.stringify(applicantDetailRealPropertiesOwnedObject);

                if (applicantRealPropertiesOwnedId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/applicantRealPropertiesOwned/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailRealPropertiesOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

                                // Flex Grid
                                applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                                applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/applicantRealPropertiesOwned/update/' + applicantRealPropertiesOwnedId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailRealPropertiesOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

                                // Flex Grid
                                applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                                applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete applicant real properties owned click event
        function deleteApplicantRealPropertiesOwnedOnclick() {
            $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "Delete";
            $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", false);
        }

        // confirm delete applicant real properties owned on click
        function btnConfirmDeleteApplicantDetailRealPropertiesOwnedOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", true);

            applicantRealPropertiesOwnedCollectionView.editItem(applicantRealPropertiesOwnedCollectionView.currentItem);
            var applicantRealPropertiesOwned = applicantRealPropertiesOwnedCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/applicantRealPropertiesOwned/delete/' + applicantRealPropertiesOwned.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal("hide");

                        applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

                        // Flex Grid
                        applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                        applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", false);
                    }
                }
            });
        }

        // get appliance owned
        function getApplicantApplianceOwned() {
            var applicantApplianceOwnedArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/applicantApplianceOwned/listByApplicantId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantApplianceOwnedResult) {
                    if (applicantApplianceOwnedResult.length > 0) {
                        for (i = 0; i < applicantApplianceOwnedResult.length; i++) {
                            var btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantApplianceOwnedOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                            var btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantApplianceOwnedOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";

                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                if (isLocked) {
                                    btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantApplianceOwnedOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                    btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantApplianceOwnedOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                                } else {
                                    btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantApplianceOwnedOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                    btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantApplianceOwnedOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";
                                }
                            } else {
                                btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantApplianceOwnedOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantApplianceOwnedOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            }

                            applicantApplianceOwnedArray.push({
                                EditButton: btnEditButton,
                                DeleteButton: btnDeleteButton,
                                Id: applicantApplianceOwnedResult[i]["Id"],
                                ApplicantId: applicantApplianceOwnedResult[i]["ApplicantId"],
                                Applicant: applicantApplianceOwnedResult[i]["Applicant"],
                                ApplianceBrand: applicantApplianceOwnedResult[i]["ApplianceBrand"],
                                PresentValue: applicantApplianceOwnedResult[i]["PresentValue"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return applicantApplianceOwnedArray;
        }

        // create flexgrid for applicant appliance owned
        function createFlexGridApplicantApplianceOwned() {
            createFlexGridCoMakerStatement();

            applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());

            // Flex Grid
            applicantApplianceOwnedFlexGrid = new wijmo.grid.FlexGrid('#applicantApplianceOwnedFlexGrid');
            applicantApplianceOwnedFlexGrid.initialize({
                columns: [
                            {
                                "header": "Appliance Owned",
                                "isReadOnly": true,
                                "visible": false,
                                "allowDragging": false,
                                "width": "*"
                            },
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Appliance Brand",
                                "binding": "ApplianceBrand",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Present Value",
                                "binding": "PresentValue",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: applicantApplianceOwnedCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            applicantApplianceOwnedFlexGrid.trackChanges = true;
        }

        // add appliance owned
        function btnAddApplicantApplianceOwnedOnclick() {
            $("#applicantDetailApplianceOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requireApplicantApplianceOwned').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);

            applicantApplianceOwnedId = 0;
            document.getElementById('applicantDetailApplianceOwnedBrand').value = "NA";
            document.getElementById('applicantDetailApplianceOwnedPresentValue').value = "NA";
        }

        // edit appliance owned
        function editApplicantApplianceOwnedOnclick() {
            $("#applicantDetailApplianceOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requireApplicantApplianceOwned').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);

            applicantApplianceOwnedCollectionView.editItem(applicantApplianceOwnedCollectionView.currentItem);
            var applicantApplianceOwned = applicantApplianceOwnedCollectionView.currentEditItem;
            applicantApplianceOwnedId = applicantApplianceOwned.Id;
            document.getElementById('applicantDetailApplianceOwnedBrand').value = applicantApplianceOwned.ApplianceBrand;
            document.getElementById('applicantDetailApplianceOwnedPresentValue').value = applicantApplianceOwned.PresentValue;
        }

        // form input validation
        function inputValidationForApplicantApplianceOwned() {
            var isValid = true;
            $('.requireApplicantApplianceOwned').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save appliance owned
        function btnSaveApplicantDetailApplianceOwnedOnclick() {
            if (inputValidationForApplicantApplianceOwned()) {
                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", true);
                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", true);

                var applicantDetailApplianceOwnedObject = new Object();
                applicantDetailApplianceOwnedObject.ApplicantId = getUrlParameter("id");
                applicantDetailApplianceOwnedObject.ApplianceBrand = document.getElementById('applicantDetailApplianceOwnedBrand').value;
                applicantDetailApplianceOwnedObject.PresentValue = document.getElementById('applicantDetailApplianceOwnedPresentValue').value;
                var applicantDetailApplianceOwnedData = JSON.stringify(applicantDetailApplianceOwnedObject);

                if (applicantApplianceOwnedId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/applicantApplianceOwned/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailApplianceOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
                                applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
                                applicantApplianceOwnedFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/applicantApplianceOwned/update/' + applicantApplianceOwnedId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailApplianceOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
                                applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
                                applicantApplianceOwnedFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete appliance owned
        function deleteApplicantApplianceOwnedOnclick() {
            $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "Delete";
            $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", false);
        }

        // confirm delete  appliance owned
        function btnConfirmDeleteApplicantDetailApplianceOwnedOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", true);

            applicantApplianceOwnedCollectionView.editItem(applicantApplianceOwnedCollectionView.currentItem);
            var applicantApplianceOwned = applicantApplianceOwnedCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/applicantApplianceOwned/delete/' + applicantApplianceOwned.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal("hide");

                        applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
                        applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
                        applicantApplianceOwnedFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", false);
                    }
                }
            });
        }

        // get applicant co-makers statement
        function getApplicantCoMakerStatement() {
            var coMakerStatementArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/applicantCoMakerStatement/listByApplicantId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantDetailCoMakersStatementResult) {
                    if (applicantDetailCoMakersStatementResult.length > 0) {
                        for (i = 0; i < applicantDetailCoMakersStatementResult.length; i++) {
                            var btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCoMakerStatementOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                            var btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCoMakerStatementOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";

                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                if (isLocked) {
                                    btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCoMakerStatementOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                    btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCoMakerStatementOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                                } else {
                                    btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCoMakerStatementOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                    btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCoMakerStatementOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>";
                                }
                            } else {
                                btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCoMakerStatementOnclick()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='btnDeleteCoMakerStatementOnclick()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            }

                            coMakerStatementArray.push({
                                EditButton: btnEditButton,
                                DeleteButton: btnDeleteButton,
                                Id: applicantDetailCoMakersStatementResult[i]["Id"],
                                CoMakerApplicantId: applicantDetailCoMakersStatementResult[i]["CoMakerApplicantId"],
                                CoMaker: applicantDetailCoMakersStatementResult[i]["CoMaker"],
                                ContactNumber: applicantDetailCoMakersStatementResult[i]["ContactNumber"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return coMakerStatementArray;
        }

        // create flexgrid for co maker statement
        function createFlexGridCoMakerStatement() {
            coMakerStatementCollectionView = new wijmo.collections.CollectionView(getApplicantCoMakerStatement());

            // Flex Grid
            coMakerStatementFlexGrid = new wijmo.grid.FlexGrid('#co-MakersStatementGrid');
            coMakerStatementFlexGrid.initialize({
                columns: [
                            {
                                "header": "Co-Maker Statement",
                                "isReadOnly": true,
                                "visible": false,
                                "allowDragging": false,
                                "width": "*"
                            },
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Co Maker",
                                "binding": "CoMaker",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Contact Number",
                                "binding": "ContactNumber",
                                "allowSorting": true,
                                "width": "1*",
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: coMakerStatementCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            coMakerStatementFlexGrid.trackChanges = true;
            //createFlexGridCoMakerRealPropertiesOwned();
            //createCoMakerApplianceOwnedFlexGrid();
        }

        // get co makers statement properties owned onclick
        function getCoMakerRealPropertiesOwnedOnclick() {
            var coMakerRealPropertiesOwnedArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/coMakerStatementRealPropertiesOwned/listByCoMakerId/' + coMakerStatementId,
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (coMakerRealPropertiesOwnedResult) {
                    if (coMakerRealPropertiesOwnedResult.length > 0) {
                        for (i = 0; i < coMakerRealPropertiesOwnedResult.length; i++) {
                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            coMakerRealPropertiesOwnedArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnEditCoMakerRealPropertiesOwned()'" + disabledButton + "><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='btnDeleteCoMakerRealPropertiesOwned()'" + disabledButton + "><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: coMakerRealPropertiesOwnedResult[i]["Id"],
                                CoMakerId: coMakerRealPropertiesOwnedResult[i]["CoMakerId"],
                                CoMaker: coMakerRealPropertiesOwnedResult[i]["CoMaker"],
                                Real: coMakerRealPropertiesOwnedResult[i]["Real"],
                                Location: coMakerRealPropertiesOwnedResult[i]["Location"],
                                PresentValue: coMakerRealPropertiesOwnedResult[i]["PresentValue"],
                                EcumberedTo: coMakerRealPropertiesOwnedResult[i]["EcumberedTo"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return coMakerRealPropertiesOwnedArray;
        }

        // create flexgrid for coMaker real properties owned
        function createFlexGridCoMakerRealPropertiesOwned() {
            coMakerApplicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getCoMakerRealPropertiesOwnedOnclick());

            // Flex Grid
            coMakerApplicantRealPropertiesOwnedFlexGrid = new wijmo.grid.FlexGrid('#coMakerRealPropertiesOwnedFlexGrid');
            coMakerApplicantRealPropertiesOwnedFlexGrid.initialize({
                columns: [
                            {
                                "header": "Real Properties Owned",
                                "isReadOnly": true,
                                "visible": false,
                                "allowDragging": false,
                                "width": "*"
                            },
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Real",
                                "binding": "Real",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Present Value",
                                "binding": "PresentValue",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: coMakerApplicantRealPropertiesOwnedCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            coMakerApplicantRealPropertiesOwnedFlexGrid.trackChanges = true;
        }

        // add real properties owned co-makers statement
        function btnAddCoMakerRealPropertiesOwnedOnclick() {
            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requireCoMakerRealPropertiesOwned').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);

            applicantDetailCoMakerRealPropertiesOwnedId = 0;
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedReal").value = "NA";
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedLocation").value = "NA";
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedPresentValue").value = "NA";
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedEcumberedTo").value = "NA";
        }

        // edit real properties owned co-makers statement
        function btnEditCoMakerRealPropertiesOwned() {
            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requireCoMakerRealPropertiesOwned').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);

            coMakerApplicantRealPropertiesOwnedCollectionView.editItem(coMakerApplicantRealPropertiesOwnedCollectionView.currentItem);
            var coMakerStatementRealProperiesOwned = coMakerApplicantRealPropertiesOwnedCollectionView.currentEditItem;
            applicantDetailCoMakerRealPropertiesOwnedId = coMakerStatementRealProperiesOwned.Id;
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedReal").value = coMakerStatementRealProperiesOwned.Real;
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedLocation").value = coMakerStatementRealProperiesOwned.Location;
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedPresentValue").value = coMakerStatementRealProperiesOwned.PresentValue;
            document.getElementById("applicantDetailCoMakerRealPropertiesOwnedEcumberedTo").value = coMakerStatementRealProperiesOwned.EcumberedTo;
        }

        // save real properties owned co-makers statement
        function btnSaveApplicantDetailCoMakerRealPropertiesOwnedOnclick() {
            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", true);
            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", true);

            var applicantDetailCoMakerRealPropertiesOwnedObject = new Object();
            applicantDetailCoMakerRealPropertiesOwnedObject.CoMakerId = coMakerStatementId;
            applicantDetailCoMakerRealPropertiesOwnedObject.Real = document.getElementById('applicantDetailCoMakerRealPropertiesOwnedReal').value;
            applicantDetailCoMakerRealPropertiesOwnedObject.Location = document.getElementById('applicantDetailCoMakerRealPropertiesOwnedLocation').value;
            applicantDetailCoMakerRealPropertiesOwnedObject.PresentValue = document.getElementById('applicantDetailCoMakerRealPropertiesOwnedPresentValue').value;
            applicantDetailCoMakerRealPropertiesOwnedObject.EcumberedTo = document.getElementById('applicantDetailCoMakerRealPropertiesOwnedEcumberedTo').value;
            var applicantDetailCoMakerRealPropertiesOwnedData = JSON.stringify(applicantDetailCoMakerRealPropertiesOwnedObject);

            if (applicantDetailCoMakerRealPropertiesOwnedId == 0) {
                $.ajax({
                    type: "POST",
                    url: '/api/coMakerStatementRealPropertiesOwned/add',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailCoMakerRealPropertiesOwnedData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");

                            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                            coMakerApplicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getCoMakerRealPropertiesOwnedOnclick());
                            coMakerApplicantRealPropertiesOwnedFlexGrid.itemsSource = coMakerApplicantRealPropertiesOwnedCollectionView;
                            coMakerApplicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                        },
                        404: function () {
                            toastr.error("Not Found");

                            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");

                            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "PUT",
                    url: '/api/coMakerStatementRealPropertiesOwned/update/' + applicantDetailCoMakerRealPropertiesOwnedId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailCoMakerRealPropertiesOwnedData,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Successful");

                            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                            coMakerApplicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getCoMakerRealPropertiesOwnedOnclick());
                            coMakerApplicantRealPropertiesOwnedFlexGrid.itemsSource = coMakerApplicantRealPropertiesOwnedCollectionView;
                            coMakerApplicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                        },
                        404: function () {
                            toastr.error("Not Found");

                            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                        },
                        400: function () {
                            toastr.error("Bad Request");

                            $("#applicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                            document.getElementById("btnSaveApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                            $("#btnSaveApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                        }
                    }
                });
            }
        }

        // delete real properties owned co-makers statement
        function btnDeleteCoMakerRealPropertiesOwned() {
            $("#deleteConfirmationApplicantDetailCoMakerRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "Delete";
            $("#btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
        }

        // confirm delete  real properties owned co-makers statement
        function btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwnedOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", true);

            coMakerApplicantRealPropertiesOwnedCollectionView.editItem(coMakerApplicantRealPropertiesOwnedCollectionView.currentItem);
            var coMakerStatementRealProperiesOwned = coMakerApplicantRealPropertiesOwnedCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/coMakerStatementRealPropertiesOwned/delete/' + coMakerStatementRealProperiesOwned.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationApplicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                        coMakerApplicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getCoMakerRealPropertiesOwnedOnclick());
                        coMakerApplicantRealPropertiesOwnedFlexGrid.itemsSource = coMakerApplicantRealPropertiesOwnedCollectionView;
                        coMakerApplicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationApplicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationApplicantDetailCoMakerRealPropertiesOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailCoMakerRealPropertiesOwned").prop("disabled", false);
                    }
                }
            });
        }

        // add co makers statement
        function btnAddApplicantDetailCoMakersStatementOnclick() {
            $("#applicantDetailCoMakersStatementModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $("#btnAddComakerApplianceOwned").prop("disabled", true);
            $("#btnAddCoMakerRealPropertiesOwned").prop("disabled", true);
            $("#btnCoMakersStatementSaveChangesButton").prop("disabled", false);
            $("#btnCoMakersStatementCancelChangesButton").prop("disabled", false);
            document.getElementById("btnCoMakersStatementSaveChangesButton").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            createCboCoMakerApplicant();

            coMakerStatementId = 0;
        }

        // edit co makers statement
        function btnEditCoMakerStatementOnclick() {
            $("#applicantDetailCoMakersStatementModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $("#btnAddComakerApplianceOwned").prop("disabled", false);
            $("#btnAddCoMakerRealPropertiesOwned").prop("disabled", false);
            $("#btnCoMakersStatementSaveChangesButton").prop("disabled", false);
            $("#btnCoMakersStatementCancelChangesButton").prop("disabled", false);
            document.getElementById("btnCoMakersStatementSaveChangesButton").innerHTML = "<i class='fa fa-save fa-fw'></i> Save"

            coMakerStatementCollectionView.editItem(coMakerStatementCollectionView.currentItem);
            var coMakerStatement = coMakerStatementCollectionView.currentEditItem;

            coMakerStatementId = coMakerStatement.Id;
            cboCoMaker.selectedValue = coMakerStatement.CoMakerApplicantId;
        }

        // save co makers statement
        function btnSaveChangeCoMakersStatementOnclick() {
            $("#btnCoMakersStatementSaveChangesButton").prop("disabled", true);
            $("#btnCoMakersStatementCancelChangesButton").prop("disabled", true);
            document.getElementById("btnCoMakersStatementSaveChangesButton").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving"

            var coMakerObject = new Object();
            coMakerObject.ApplicantId = getUrlParameter("id");
            coMakerObject.CoMakerApplicantId = cboCoMaker.selectedItem["Id"];
            var coMakerData = JSON.stringify(coMakerObject);

            if (coMakerStatementId == 0) {
                $.ajax({
                    type: "POST",
                    url: '/api/applicantCoMakerStatement/add',
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: coMakerData,
                    statusCode: {
                        200: function () {
                            toastr.success("Save Successful");

                            $("#applicantDetailCoMakersStatementModal").modal("hide");

                            coMakerStatementCollectionView = new wijmo.collections.CollectionView(getApplicantCoMakerStatement());
                            coMakerStatementFlexGrid.itemsSource = coMakerStatementCollectionView;
                            coMakerStatementFlexGrid.trackChanges = true;
                        },
                        404: function () {
                            toastr.error("Not Found");

                            $("#applicantDetailCoMakersStatementModal").modal("hide");

                            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                        },
                        400: function () {
                            toastr.error("Bad Request");

                            $("#applicantDetailCoMakersStatementModal").modal("hide");

                            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                        }
                    }
                });
            } else {
                $.ajax({
                    type: "PUT",
                    url: '/api/applicantCoMakerStatement/update/' + coMakerStatementId,
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: coMakerData,
                    statusCode: {
                        200: function () {
                            toastr.success("Update Successful");

                            $("#applicantDetailCoMakersStatementModal").modal("hide");

                            coMakerStatementCollectionView = new wijmo.collections.CollectionView(getApplicantCoMakerStatement());
                            coMakerStatementFlexGrid.itemsSource = coMakerStatementCollectionView;
                            coMakerStatementFlexGrid.trackChanges = true;
                        },
                        404: function () {
                            toastr.error("Not Found");

                            $("#applicantDetailCoMakersStatementModal").modal("hide");

                            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                        },
                        400: function () {
                            toastr.error("Bad Request");

                            $("#applicantDetailCoMakersStatementModal").modal("hide");

                            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                        }
                    }
                });
            }
        }

        // delete co makers statement
        function btnDeleteCoMakerStatementOnclick() {
            $("#deleteConfirmationApplicantDetailCoMakerStatementModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailCoMakerStatement").innerHTML = "Delete";
            $("#btnConfirmDeleteApplicantDetailCoMakerStatement").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailCoMakerStatement").prop("disabled", false);
        }

        // confirm delete co makers statement
        function btnConfirmDeleteApplicantDetailCoMakerStatementOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailCoMakerStatement").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailCoMakerStatement").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailCoMakerStatement").prop("disabled", true);

            coMakerStatementCollectionView.editItem(coMakerStatementCollectionView.currentItem);
            var coMakerStatement = coMakerStatementCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/applicantCoMakerStatement/delete/' + coMakerStatement.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $("#deleteConfirmationApplicantDetailCoMakerStatementModal").modal("hide");

                        coMakerStatementCollectionView = new wijmo.collections.CollectionView(getApplicantCoMakerStatement());
                        coMakerStatementFlexGrid.itemsSource = coMakerStatementCollectionView;
                        coMakerStatementFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");

                        $("#deleteConfirmationApplicantDetailCoMakerStatementModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailCoMakerStatement").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailCoMakerStatement").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailCoMakerStatement").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");

                        $("#deleteConfirmationApplicantDetailCoMakerStatementModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailCoMakerStatement").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailCoMakerStatement").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailCoMakerStatement").prop("disabled", false);
                    }
                }
            });
        }

        // btn change photo image
        function btnApplicantChangePhotoOnclick() {
            $("#applicantDetailChangePhotoModal").modal({
                "show": true,
                "backdrop": "static"
            });

            $("#divImage").hide();
        }


        // btn change photo image
        function btnApplicantChangePhotoSignatureOnclick() {
            $("#applicantDetailChangePhotoModalSignature").modal({
                "show": true,
                "backdrop": "static"
            });

            $("#divImageSignature").hide();
        }


        // btn delete photo image
        function btnApplicantDeletePhotoOnclick() {
            $("#deleteConfirmationApplicantDetailPhotoModal").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        function btnApplicantDeletePhotoSignatureOnclick() {
            $("#deleteConfirmationApplicantDetailPhotoModalSignature").modal({
                "show": true,
                "backdrop": "static"
            });
        }

        function btnConfirmDeleteApplicantDetailPhotoSignatureOnclick() {
            if (inputValidation()) {
                document.getElementById("btnConfirmDeleteApplicantDetailPhotoSignature").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
                $("#btnConfirmDeleteApplicantDetailPhotoSignature").prop("disabled", true);
                $("#btnCloseApplicantDetailPhotoSignature").prop("disabled", true);

                var applicantDetailObject = new Object();
                applicantDetailObject.IsCoMaker = document.getElementById("isCoMaker").checked;
                applicantDetailObject.ApplicantLastName = document.getElementById('applicantLastName').value;
                applicantDetailObject.ApplicantFirstName = document.getElementById('applicantFirstName').value;
                applicantDetailObject.ApplicantMiddleName = document.getElementById('applicantMiddleName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.AreaId = cboApplicantArea.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ContactNumber = document.getElementById('applicantContactNumber').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.ResidenceMonthlyRentAmount = document.getElementById("applicantResidenceMonthyRent").value;
                applicantDetailObject.LandResidenceTypeId = cboLandResidenceType.selectedItem["Id"];
                applicantDetailObject.LandResidenceMonthlyRentAmount = document.getElementById("applicantLandResidenceMonthyRent").value;
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            $.ajax({
                                type: "PUT",
                                url: '/api/applicant/deletePhoto/signature/' + getUrlParameter("id"),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                statusCode: {
                                    200: function () {
                                        toastr.success("Reloading the page", "Remove Photo Successful");
                                        btnSaveChangesApplicantOnclick();
                                    },
                                    404: function () {
                                        toastr.error("Not Found");

                                        document.getElementById("btnConfirmDeleteApplicantDetailPhotoSignature").innerHTML = "Delete";
                                        $("#btnConfirmDeleteApplicantDetailPhotoSignature").prop("disabled", false);
                                        $("#btnCloseApplicantDetailPhotoSignature").prop("disabled", false);
                                    },
                                    400: function () {
                                        toastr.error("Bad Request");

                                        document.getElementById("btnConfirmDeleteApplicantDetailPhotoSignature").innerHTML = "Delete";
                                        $("#btnConfirmDeleteApplicantDetailPhotoSignature").prop("disabled", false);
                                        $("#btnCloseApplicantDetailPhotoSignature").prop("disabled", false);
                                    }
                                }
                            });
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // btn confirm delete photo image
        function btnConfirmDeleteApplicantDetailPhotoOnclick() {
            if (inputValidation()) {
                document.getElementById("btnConfirmDeleteApplicantDetailPhoto").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
                $("#btnConfirmDeleteApplicantDetailPhoto").prop("disabled", true);
                $("#btnCloseApplicantDetailPhoto").prop("disabled", true);

                var applicantDetailObject = new Object();
                applicantDetailObject.IsCoMaker = document.getElementById("isCoMaker").checked;
                applicantDetailObject.ApplicantLastName = document.getElementById('applicantLastName').value;
                applicantDetailObject.ApplicantFirstName = document.getElementById('applicantFirstName').value;
                applicantDetailObject.ApplicantMiddleName = document.getElementById('applicantMiddleName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.AreaId = cboApplicantArea.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ContactNumber = document.getElementById('applicantContactNumber').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.ResidenceMonthlyRentAmount = document.getElementById("applicantResidenceMonthyRent").value;
                applicantDetailObject.LandResidenceTypeId = cboLandResidenceType.selectedItem["Id"];
                applicantDetailObject.LandResidenceMonthlyRentAmount = document.getElementById("applicantLandResidenceMonthyRent").value;
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            $.ajax({
                                type: "PUT",
                                url: '/api/applicant/deletePhoto/' + getUrlParameter("id"),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                statusCode: {
                                    200: function () {
                                        toastr.success("Reloading the page", "Remove Photo Successful");
                                        btnSaveChangesApplicantOnclick();
                                    },
                                    404: function () {
                                        toastr.error("Not Found");

                                        document.getElementById("btnConfirmDeleteApplicantDetailPhoto").innerHTML = "Delete";
                                        $("#btnConfirmDeleteApplicantDetailPhoto").prop("disabled", false);
                                        $("#btnCloseApplicantDetailPhoto").prop("disabled", false);
                                    },
                                    400: function () {
                                        toastr.error("Bad Request");

                                        document.getElementById("btnConfirmDeleteApplicantDetailPhoto").innerHTML = "Delete";
                                        $("#btnConfirmDeleteApplicantDetailPhoto").prop("disabled", false);
                                        $("#btnCloseApplicantDetailPhoto").prop("disabled", false);
                                    }
                                }
                            });
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        function btnOkChangePhotoSignatureOnclick() {
            if (inputValidation()) {
                document.getElementById("btnOkChangePhotoSignature").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Updating";
                $("#btnOkChangePhotoSignature").prop("disabled", true);
                $("#btnCloseChangePhotoSignature").prop("disabled", true);

                var applicantDetailObject = new Object();
                applicantDetailObject.IsCoMaker = document.getElementById("isCoMaker").checked;
                applicantDetailObject.ApplicantLastName = document.getElementById('applicantLastName').value;
                applicantDetailObject.ApplicantFirstName = document.getElementById('applicantFirstName').value;
                applicantDetailObject.ApplicantMiddleName = document.getElementById('applicantMiddleName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.AreaId = cboApplicantArea.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ContactNumber = document.getElementById('applicantContactNumber').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.ResidenceMonthlyRentAmount = document.getElementById("applicantResidenceMonthyRent").value;
                applicantDetailObject.LandResidenceTypeId = cboLandResidenceType.selectedItem["Id"];
                applicantDetailObject.LandResidenceMonthlyRentAmount = document.getElementById("applicantLandResidenceMonthyRent").value;
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            var applicantDetailPhotoObject = new Object();
                            applicantDetailPhotoObject.PhotoSignature = $('#imageDisplaySignature').attr('src').replace(/^data:image\/(png|jpeg);base64,/, "");
                            var applicantDetailPhotoData = JSON.stringify(applicantDetailPhotoObject);

                            $.ajax({
                                type: "PUT",
                                url: '/api/applicant/updatePhoto/signature/' + getUrlParameter("id"),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                data: applicantDetailPhotoData,
                                statusCode: {
                                    200: function () {
                                        toastr.success("Reloading the page", "Update Photo Successful");
                                        window.setTimeout(function () {
                                            location.reload();
                                        }, 1500);
                                    },
                                    404: function () {
                                        toastr.error("Not Found");

                                        document.getElementById("btnOkChangePhotoSignature").innerHTML = "<i class='fa fa-check fa-fw'></i> Upload";
                                        $("#btnOkChangePhotoSignature").prop("disabled", false);
                                        $("#btnCloseChangePhotoSignature").prop("disabled", false);
                                    },
                                    400: function () {
                                        toastr.error("Bad Request");

                                        document.getElementById("btnOkChangePhotoSignature").innerHTML = "<i class='fa fa-check fa-fw'></i> Upload";
                                        $("#btnOkChangePhotoSignature").prop("disabled", false);
                                        $("#btnCloseChangePhotoSignature").prop("disabled", false);
                                    }
                                }
                            });
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // save image
        function btnOkChangePhotoOnclick() {
            if (inputValidation()) {
                document.getElementById("btnOkChangePhoto").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Updating";
                $("#btnOkChangePhoto").prop("disabled", true);
                $("#btnCloseChangePhoto").prop("disabled", true);

                var applicantDetailObject = new Object();
                applicantDetailObject.IsCoMaker = document.getElementById("isCoMaker").checked;
                applicantDetailObject.ApplicantLastName = document.getElementById('applicantLastName').value;
                applicantDetailObject.ApplicantFirstName = document.getElementById('applicantFirstName').value;
                applicantDetailObject.ApplicantMiddleName = document.getElementById('applicantMiddleName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.AreaId = cboApplicantArea.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ContactNumber = document.getElementById('applicantContactNumber').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.ResidenceMonthlyRentAmount = document.getElementById("applicantResidenceMonthyRent").value;
                applicantDetailObject.LandResidenceTypeId = cboLandResidenceType.selectedItem["Id"];
                applicantDetailObject.LandResidenceMonthlyRentAmount = document.getElementById("applicantLandResidenceMonthyRent").value;
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            var applicantDetailPhotoObject = new Object();
                            applicantDetailPhotoObject.Photo = $('#imageDisplay').attr('src').replace(/^data:image\/(png|jpeg);base64,/, "");
                            var applicantDetailPhotoData = JSON.stringify(applicantDetailPhotoObject);

                            $.ajax({
                                type: "PUT",
                                url: '/api/applicant/updatePhoto/' + getUrlParameter("id"),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                data: applicantDetailPhotoData,
                                statusCode: {
                                    200: function () {
                                        toastr.success("Reloading the page", "Update Photo Successful");
                                        window.setTimeout(function () {
                                            location.reload();
                                        }, 1500);
                                    },
                                    404: function () {
                                        toastr.error("Not Found");

                                        document.getElementById("btnOkChangePhoto").innerHTML = "<i class='fa fa-check fa-fw'></i> Upload";
                                        $("#btnOkChangePhoto").prop("disabled", false);
                                        $("#btnCloseChangePhoto").prop("disabled", false);
                                    },
                                    400: function () {
                                        toastr.error("Bad Request");

                                        document.getElementById("btnOkChangePhoto").innerHTML = "<i class='fa fa-check fa-fw'></i> Upload";
                                        $("#btnOkChangePhoto").prop("disabled", false);
                                        $("#btnCloseChangePhoto").prop("disabled", false);
                                    }
                                }
                            });
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // Read URL image
        function readURL(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $("#divImage").show();
                    $('#imageDisplay').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        // onload image
        document.querySelector('#applicantImage').addEventListener('change', function () {
            var reader = new FileReader();
            reader.onload = function () {
                var binaryString = this.result;
            }
            reader.readAsBinaryString(this.files[0]);
        }, false);




        // Read URL image
        function readURLSignature(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $("#divImageSignature").show();
                    $('#imageDisplaySignature').attr('src', e.target.result);
                }
                reader.readAsDataURL(input.files[0]);
            }
        }

        // onload image
        document.querySelector('#applicantImageSignature').addEventListener('change', function () {
            var reader = new FileReader();
            reader.onload = function () {
                var binaryString = this.result;
            }
            reader.readAsBinaryString(this.files[0]);
        }, false);

        // convert image to hex
        function hexToBase64(str) {
            return btoa(String.fromCharCode.apply(null, str.replace(/\r|\n/g, "").replace(/([\da-fA-F]{2}) ?/g, "0x$1 ").replace(/ +$/, "").split(" ")));
        }

        // lock
        function btnLockApplicantOnclick() {
            if (inputValidation()) {
                $("#btnLockApplicant").prop("disabled", true);
                document.getElementById("btnLockApplicant").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Locking";

                $("#btnClose").prop("disabled", true);
                $("#btnAddApplicantRealPropertiesOwned").prop("disabled", true);
                $("#btnAddApplicantApplianceOwned").prop("disabled", true);
                $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", true);
                $("#btnApplicantChangePhoto").prop("disabled", true);
                $("#btnApplicantDeletePhoto").prop("disabled", true);
                $("#btnOptions").prop("disabled", true);

                var applicantDetailObject = new Object();
                applicantDetailObject.IsCoMaker = document.getElementById("isCoMaker").checked;
                applicantDetailObject.ApplicantLastName = document.getElementById('applicantLastName').value;
                applicantDetailObject.ApplicantFirstName = document.getElementById('applicantFirstName').value;
                applicantDetailObject.ApplicantMiddleName = document.getElementById('applicantMiddleName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.AreaId = cboApplicantArea.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ContactNumber = document.getElementById('applicantContactNumber').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.ResidenceMonthlyRentAmount = document.getElementById("applicantResidenceMonthyRent").value;
                applicantDetailObject.LandResidenceTypeId = cboLandResidenceType.selectedItem["Id"];
                applicantDetailObject.LandResidenceMonthlyRentAmount = document.getElementById("applicantLandResidenceMonthyRent").value;
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            $.ajax({
                                type: "PUT",
                                url: '/api/applicant/lock/' + getUrlParameter("id"),
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                statusCode: {
                                    200: function () {
                                        toastr.success("Reloading the page", "Lock Successful");
                                        window.setTimeout(function () {
                                            location.reload();
                                        }, 1500);
                                    },
                                    404: function () {
                                        toastr.error("Not Found");
                                        $("#btnLockApplicant").prop("disabled", false);
                                        document.getElementById("btnLockApplicant").innerHTML = "<i class='fa fa-lock fa-fw'></i> Lock";
                                        $("#btnClose").prop("disabled", false);
                                        $("#btnAddApplicantRealPropertiesOwned").prop("disabled", false);
                                        $("#btnAddApplicantApplianceOwned").prop("disabled", false);
                                        $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", false);
                                        $("#btnApplicantChangePhoto").prop("disabled", true);
                                        $("#btnApplicantDeletePhoto").prop("disabled", true);
                                    },
                                    400: function () {
                                        toastr.error("Bad Request");
                                        $("#btnLockApplicant").prop("disabled", false);
                                        document.getElementById("btnLockApplicant").innerHTML = "<i class='fa fa-lock fa-fw'></i> Lock";
                                        $("#btnClose").prop("disabled", false);
                                        $("#btnAddApplicantRealPropertiesOwned").prop("disabled", false);
                                        $("#btnAddApplicantApplianceOwned").prop("disabled", false);
                                        $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", false);
                                        $("#btnApplicantChangePhoto").prop("disabled", false);
                                        $("#btnApplicantDeletePhoto").prop("disabled", false);
                                    }
                                }
                            });
                        },
                        404: function () {
                            toastr.error("Not Found");
                        },
                        400: function () {
                            toastr.error("Bad Request");
                        }
                    }
                });
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // Unlock
        function btnUnlockApplicantOnclick() {
            $("#btnUnlockApplicant").prop("disabled", true);
            document.getElementById("btnUnlockApplicant").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Unlocking";

            $("#btnClose").prop("disabled", true);
            $("#btnAddApplicantRealPropertiesOwned").prop("disabled", true);
            $("#btnAddApplicantApplianceOwned").prop("disabled", true);
            $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", true);
            $("#btnOptions").prop("disabled", true);

            $.ajax({
                type: "PUT",
                url: '/api/applicant/unlock/' + getUrlParameter("id"),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Reloading the page", "Unlock Successful");
                        window.setTimeout(function () {
                            location.reload();
                        }, 1500);
                    },
                    404: function () {
                        toastr.error("Record Not Found");
                        $("#btnUnlockApplicant").prop("disabled", false);
                        document.getElementById("btnUnlockApplicant").innerHTML = "<i class='fa fa-lock fa-fw'></i> Unlock";
                        $("#btnClose").prop("disabled", false);
                        $("#btnAddApplicantRealPropertiesOwned").prop("disabled", false);
                        $("#btnAddApplicantApplianceOwned").prop("disabled", false);
                        $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $("#btnUnlockApplicant").prop("disabled", false);
                        document.getElementById("btnUnlockApplicant").innerHTML = "<i class='fa fa-lock fa-fw'></i> Unlock";
                        $("#btnClose").prop("disabled", false);
                        $("#btnAddApplicantRealPropertiesOwned").prop("disabled", false);
                        $("#btnAddApplicantApplianceOwned").prop("disabled", false);
                        $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", false);
                    }
                }
            });
        }

        var applicantRequirementCollectionView;
        var applicantRequirementsFlexgrid;
        var cboRequirement;
        var cboValidDate;
        var applicantRequirementId;

        // get Interests
        function getApplicantRequirements() {
            var applicantRequirements = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/applicantRequirements/listByApplicantId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantRequirementsResults) {
                    if (applicantRequirementsResults.length > 0) {
                        for (i = 0; i < applicantRequirementsResults.length; i++) {

                            var disabledButton = "disabled";
                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                disabledButton = "";
                            }

                            var canPerformActions = "@ViewData["CanPerformActions"]";
                            if (canPerformActions == 1) {
                                if (isLocked) {
                                    btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRequirements()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                    btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRequirements()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                                } else {
                                    btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRequirements()'><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                    btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRequirements()'><i class='fa fa-trash fa-fw'></i> Delete</button>";
                                }
                            } else {
                                btnEditButton = "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRequirements()' disabled><i class='fa fa-edit fa-fw'></i> Edit</button>";
                                btnDeleteButton = "<button class='btn btn-danger btn-xs btn-block' onclick='deleteApplicantRequirements()' disabled><i class='fa fa-trash fa-fw'></i> Delete</button>";
                            }

                            var newDate = new Date(applicantRequirementsResults[i]["ValidDateUntil"]);
                            var validDate = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            applicantRequirements.push({
                                EditButton: btnEditButton,
                                DeleteButton: btnDeleteButton,
                                Id: applicantRequirementsResults[i]["Id"],
                                ApplicantId: applicantRequirementsResults[i]["ApplicantId"],
                                RequirementId: applicantRequirementsResults[i]["RequirementId"],
                                Requirement: applicantRequirementsResults[i]["Requirement"],
                                Note: applicantRequirementsResults[i]["Note"],
                                ValidDateUntil: validDate
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return applicantRequirements;
        }

        // add new applicnat requirements
        function btnAddApplicationRequirementsOnclick() {
            $("#applicantRequirementsDetail").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredApplicantRequirements').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailRequirements").prop("disabled", false);
            $("#btnCloseApplicantDetailRequirements").prop("disabled", false);

            applicantRequirementId = 0;
            createCboRequirement();
            document.getElementById("applicantRequirementNote").value = "NA";
            createCboValidDate();
        }

        // edit applicnat requirements
        function editApplicantRequirements() {
            $("#applicantRequirementsDetail").modal({
                "show": true,
                "backdrop": "static"
            });

            $('.requiredApplicantRequirements').each(function () {
                $(this).css({
                    "border": "",
                });
            });

            document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailRequirements").prop("disabled", false);
            $("#btnCloseApplicantDetailRequirements").prop("disabled", false);

            applicantRequirementCollectionView.editItem(applicantRequirementCollectionView.currentItem);
            var applicantRequirementEditItem = applicantRequirementCollectionView.currentEditItem;

            applicantRequirementId = applicantRequirementEditItem.Id;
            cboRequirement.selectedValue = applicantRequirementEditItem.Requirement;
            document.getElementById("applicantRequirementNote").value = applicantRequirementEditItem.Note;
            cboValidDate.value = new Date(applicantRequirementEditItem.ValidDateUntil);
        }

        // cbo requirement
        function createCboRequirement() {
            var requirementArray = new Array();
            $.ajax({
                url: '/api/requirements/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (requirementResults) {
                    var disabled = true;
                    if (requirementResults.length > 0) {
                        for (i = 0; i < requirementResults.length; i++) {
                            requirementArray.push({
                                Id: requirementResults[i]["Id"],
                                Requirement: requirementResults[i]["Requirement"],
                                Description: requirementResults[i]["Description"],
                            });
                        }

                        disabled = false;
                    }

                    var template = '<table style="table-layout:fixed; width:550px; margin-top: 10px; margin-bottom: 10px;" border="0"> ' +
                                        '<col style="width: 120px;"/>' +
                                        '<col style="width: 200px;"/>' +
                                        '<thead>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Requirement </td>' +
                                            '<th style="word-wrap:break-word; valign="top"> Description </td>' +
                                        '</thead>' +
                                         '<tbody>' +
                                            '<tr>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{Requirement}</td>' +
                                                '<td style="word-wrap:break-word; valign="top">{Description}</td>' +
                                            '</tr>' +
                                        '</tbody>' +
                                   '</table>';

                    cboRequirement.dispose();
                    cboRequirement = new wijmo.input.ComboBox('#cboRequirement', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: requirementArray,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "Requirement",
                        selectedValuePath: "Requirement",
                    });
                }
            });
        }

        // form input validation
        function inputValidationForRequirements() {
            var isValid = true;
            $('.requiredApplicantRequirements').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Interests
        function btnSaveApplicantDetailRequirementsOnclick() {
            if (inputValidationForRequirements()) {
                document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveApplicantDetailRequirements").prop("disabled", true);
                $("#btnCloseApplicantDetailRequirements").prop("disabled", true);

                var applicantRequirementObject = new Object();
                applicantRequirementObject.ApplicantId = getUrlParameter("id");
                applicantRequirementObject.RequirementId = cboRequirement.selectedItem["Id"];
                applicantRequirementObject.Note = document.getElementById('applicantRequirementNote').value;
                applicantRequirementObject.ValidDateUntil = cboValidDate.value;
                var applicantRequirementData = JSON.stringify(applicantRequirementObject);

                if (applicantRequirementId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/applicantRequirements/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantRequirementData,
                        statusCode: {
                            200: function () {
                                toastr.success("Save Successful");

                                $("#applicantRequirementsDetail").modal("hide");

                                applicantRequirementCollectionView = new wijmo.collections.CollectionView(getApplicantRequirements());
                                applicantRequirementsFlexgrid.itemsSource = applicantRequirementCollectionView;
                                applicantRequirementsFlexgrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#applicantRequirementsDetail").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRequirements").prop("disabled", false);
                                $("#btnCloseApplicantDetailRequirements").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#applicantRequirementsDetail").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRequirements").prop("disabled", false);
                                $("#btnCloseApplicantDetailRequirements").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/applicantRequirements/update/' + applicantRequirementId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantRequirementData,
                        statusCode: {
                            200: function () {
                                toastr.success("Update Successful");

                                $("#applicantRequirementsDetail").modal("hide");

                                applicantRequirementCollectionView = new wijmo.collections.CollectionView(getApplicantRequirements());
                                applicantRequirementsFlexgrid.itemsSource = applicantRequirementCollectionView;
                                applicantRequirementsFlexgrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("Not Found");

                                $("#applicantRequirementsDetail").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRequirements").prop("disabled", false);
                                $("#btnCloseApplicantDetailRequirements").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Bad Request");

                                $("#applicantRequirementsDetail").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRequirements").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRequirements").prop("disabled", false);
                                $("#btnCloseApplicantDetailRequirements").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Invalid Entry");
            }
        }

        // delete Interests
        function deleteApplicantRequirements() {
            $("#applicantRequirementsDeleteConfirm").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailApplicantRequirement").innerHTML = "Delete";
            $("#btnConfirmDeleteApplicantDetailApplicantRequirement").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailApplicantRequirement").prop("disabled", false);
        }
        function btnConfirmDeleteApplicantDetailApplicantRequirementOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailApplicantRequirement").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailApplicantRequirement").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailApplicantRequirement").prop("disabled", true);

            applicantRequirementCollectionView.editItem(applicantRequirementCollectionView.currentItem);
            var id = applicantRequirementCollectionView.currentEditItem.Id;
            $.ajax({
                url: '/api/applicantRequirements/delete/' + id,
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");

                        $('#applicantRequirementsDeleteConfirm').modal('hide');

                        applicantRequirementCollectionView = new wijmo.collections.CollectionView(getApplicantRequirements());
                        applicantRequirementsFlexgrid.itemsSource = applicantRequirementCollectionView;
                        applicantRequirementsFlexgrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("Not Found");
                        $('#applicantRequirementsDeleteConfirm').modal('hide');

                        document.getElementById("btnConfirmDeleteApplicantDetailApplicantRequirement").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailApplicantRequirement").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailApplicantRequirement").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#applicantRequirementsDeleteConfirm').modal('hide');

                        document.getElementById("btnConfirmDeleteApplicantDetailApplicantRequirement").innerHTML = "Delete";
                        $("#btnConfirmDeleteApplicantDetailApplicantRequirement").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailApplicantRequirement").prop("disabled", false);
                    }
                }
            });
        }

        //  applicant Requirements flexgrid
        function createApplicantRequirementsFlexgrid() {
            NProgress.start();
            toastrModification();

            applicantRequirementCollectionView = new wijmo.collections.CollectionView(getApplicantRequirements());

            // Flex Grid
            applicantRequirementsFlexgrid = new wijmo.grid.FlexGrid('#applicantRequirementsFlexgrid');
            applicantRequirementsFlexgrid.initialize({
                columns: [
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Requirement",
                                "binding": "Requirement",
                                "allowSorting": true,
                                "width": "2*"
                            },
                            {
                                "header": "Note",
                                "binding": "Note",
                                "allowSorting": true,
                                "width": "2.5*"
                            },
                            {
                                "header": "Valid Date",
                                "binding": "ValidDateUntil",
                                "allowSorting": true,
                                "width": "1.5*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: applicantRequirementCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            applicantRequirementsFlexgrid.trackChanges = true;
        }

        // valid date
        function createCboValidDate() {
            cboValidDate.dispose();
            cboValidDate = new wijmo.input.InputDate('#cboValidDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999'
            });
        }

        // loan app
        function btnLoanNumberOnclick() {
            loanHistoryCollectionView.editItem(loanHistoryCollectionView.currentItem);
            var currentItem = loanHistoryCollectionView.currentEditItem;

            if (currentItem.IsLoanApplication) {
                var link = '/Software/LoanApplicationDetail?id=' + currentItem.Id;
                window.open(link, "_blank");
            } else {
                if (currentItem.IsLoanReconstruct) {
                    var link = '/Software/ReconstructDetail?id=' + currentItem.Id;
                    window.open(link, "_blank");
                } else {
                    if (currentItem.IsLoanRenew) {
                        var link = '/Software/RenewDetail?id=' + currentItem.Id;
                        window.open(link, "_blank");
                    } else {
                        var link = '/Software/LoanApplicationDetail?id=' + currentItem.Id;
                        window.open(link, "_blank");
                    }
                }
            }
        }

        // applicant loans
        function getApplicantLoans(transactionType) {
            var applicantLoans = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/loanHistory/list/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (loanHistorysResults) {
                    if (loanHistorysResults.length > 0) {
                        var btnLoanNumber = "<button class='btn btn-primary btn-xs btn-block' onclick='btnLoanNumberOnclick()'><i class='fa fa-edit fa-fw'></i> Detail</button>";

                        for (i = 0; i < loanHistorysResults.length; i++) {
                            var newDate = new Date(loanHistorysResults[i]["LoanDate"]);
                            var loanDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            var newMaturityDate = new Date(loanHistorysResults[i]["MaturityDate"]);
                            var maturityDateValue = ('0' + (newMaturityDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newMaturityDate.getDate()).slice(-2) + '-' + newMaturityDate.getFullYear();

                            applicantLoans.push({
                                Id: loanHistorysResults[i]["Id"],
                                BtnLoanNumber: btnLoanNumber,
                                LoanId: loanHistorysResults[i]["LoanId"],
                                LoanDate: loanDateValue,
                                MaturityDate: maturityDateValue,
                                LoanNumber: loanHistorysResults[i]["LoanNumber"],
                                Area: loanHistorysResults[i]["Area"],
                                Particulars: loanHistorysResults[i]["Particulars"],
                                PrincipalAmount: loanHistorysResults[i]["PrincipalAmount"],
                                InterestAmount: loanHistorysResults[i]["InterestAmount"],
                                DeductionAmount: loanHistorysResults[i]["DeductionAmount"],
                                PreviousBalanceAmount: loanHistorysResults[i]["PreviousBalanceAmount"],
                                NetAmount: loanHistorysResults[i]["NetAmount"],
                                NetCollectionAmount: loanHistorysResults[i]["NetCollectionAmount"],
                                CollectibleAmount: loanHistorysResults[i]["CollectibleAmount"],
                                TotalPaidAmount: loanHistorysResults[i]["TotalPaidAmount"],
                                TotalPenaltyAmount: loanHistorysResults[i]["TotalPenaltyAmount"],
                                TotalBalanceAmount: loanHistorysResults[i]["TotalBalanceAmount"],
                                IsLocked: loanHistorysResults[i]["IsLocked"],
                                IsLoanApplication: loanHistorysResults[i]["IsLoanApplication"],
                                IsLoanReconstruct: loanHistorysResults[i]["IsLoanReconstruct"],
                                IsLoanRenew: loanHistorysResults[i]["IsLoanRenew"],
                                IsReturnRelease: loanHistorysResults[i]["IsReturnRelease"],
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return applicantLoans;
        }

        var applicantLoansFlexgrid;
        var applicantLoansCollectionView;
        var applicantReconstructedLoansCollectionView;
        var applicantReconstructedLoansFlexgrid;

        // loan app
        function btnLoanNumberOnclick() {
            applicantLoansCollectionView.editItem(applicantLoansCollectionView.currentItem);
            var currentItem = applicantLoansCollectionView.currentEditItem;

            if (currentItem.IsLoanApplication) {
                var link = '/Software/LoanApplicationDetail?id=' + currentItem.Id;
                window.open(link, "_blank");
            } else {
                if (currentItem.IsLoanReconstruct) {
                    var link = '/Software/ReconstructDetail?id=' + currentItem.Id;
                    window.open(link, "_blank");
                } else {
                    if (currentItem.IsLoanRenew) {
                        var link = '/Software/RenewDetail?id=' + currentItem.Id;
                        window.open(link, "_blank");
                    } else {
                        var link = '/Software/LoanApplicationDetail?id=' + currentItem.Id;
                        window.open(link, "_blank");
                    }
                }
            }
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsLoanApplications() {
            if (applicantLoansCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGrid').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGrid').style.display = 'block';
            btnCurrentPageGrid.innerHTML = (applicantLoansCollectionView.pageIndex + 1) + ' / ' + applicantLoansCollectionView.pageCount;
        }

        // create applicant loan flexgrid
        function createApplicantLoansFlexgrid() {
            applicantLoansCollectionView = new wijmo.collections.CollectionView(getApplicantLoans("Loans"));
            applicantLoansCollectionView.canFilter = true;
            applicantLoansCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantLoanSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                applicantLoansCollectionView.refresh();
            });

            applicantLoansCollectionView.filter = function (item) {
                return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            applicantLoansCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanApplications();
            });

            // Flex Grid
            applicantLoansFlexgrid = new wijmo.grid.FlexGrid('#applicantLoansFlexgrid');
            applicantLoansFlexgrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "BtnLoanNumber",
                                "width": 100,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Is RL",
                                "binding": "IsReturnRelease",
                                "allowSorting": true,
                                "width": 60,
                            },
                            {
                                "header": "Date",
                                "binding": "LoanDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Due Date",
                                "binding": "MaturityDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Trn. No.",
                                "binding": "LoanNumber",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 300,
                            },
                            {
                                "header": "Principal",
                                "binding": "PrincipalAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Interest",
                                "binding": "InterestAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Deduction / Additionals",
                                "binding": "DeductionAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Prev. Balance",
                                "binding": "PreviousBalanceAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Net",
                                "binding": "NetAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Net Collection",
                                "binding": "NetCollectionAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Collectible",
                                "binding": "CollectibleAmount",
                                "allowSorting": true,
                                "width": 160,
                            },
                            {
                                "header": "Total Paid",
                                "binding": "TotalPaidAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Total Penalty",
                                "binding": "TotalPenaltyAmount",
                                "allowSorting": true,
                                "width": 180,
                            },
                            {
                                "header": "Total Balance",
                                "binding": "TotalBalanceAmount",
                                "allowSorting": true,
                                "width": 180,
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: applicantLoansCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            applicantLoansFlexgrid.trackChanges = true;

            //Navigation button
            btnFirstPageGrid = document.getElementById('btnMoveToFirstPageGrid');
            btnPreviousPageGrid = document.getElementById('btnMoveToPreviousPageGrid');
            btnNextPageGrid = document.getElementById('btnMoveToNextPageGrid');
            btnLastPageGrid = document.getElementById('btnMoveToLastPageGrid');
            btnCurrentPageGrid = document.getElementById('btnCurrentPageGrid');

            updateNavigateButtonsLoanApplications();

            btnFirstPageGrid.addEventListener('click', function () {
                applicantLoansCollectionView.moveToFirstPage();
                updateNavigateButtonsLoanApplications();
            });
            btnPreviousPageGrid.addEventListener('click', function () {
                applicantLoansCollectionView.moveToPreviousPage();
                updateNavigateButtonsLoanApplications();
            });
            btnNextPageGrid.addEventListener('click', function () {
                applicantLoansCollectionView.moveToNextPage();
                updateNavigateButtonsLoanApplications();
            });
            btnLastPageGrid.addEventListener('click', function () {
                applicantLoansCollectionView.moveToLastPage();
                updateNavigateButtonsLoanApplications();
            });
        }

        // on load function
        window.onload = function () {
            $("#applicantImage").change(function () {
                readURL(this);
                $('#imageDisplay').show();
            });

            $("#applicantImageSignature").change(function () {
                readURLSignature(this);
                $('#imageDisplaySignature').show();
            });

            NProgress.start();
            toastrModification();
            getApplicantDetail();
            doubleModal();

            var canPerformActions = "@ViewData["CanPerformActions"]";
            if (canPerformActions == 1) {
                $('#btnClose').prop('disabled', false);
            } else {
                $(':button').prop('disabled', true);
                $('#btnClose').prop('disabled', false);
                getUserRightsMessageError();
            }

            cboRequirement = new wijmo.input.ComboBox('#cboRequirement');
            createCboRequirement();
            cboValidDate = new wijmo.input.InputDate('#cboValidDate');
            createCboValidDate();

            cboLoan = new wijmo.input.ComboBox('#cboLoan');

            cboCoMaker = new wijmo.input.ComboBox('#cboCoMaker');
            createCboCoMakerApplicant();
        }

        // appliance owned pills and tabs
        $('#co-MakersStatement').click(function () {
            NProgress.start();
            $("#Co-MakersStatement").show();
            $("#realPropertiesOwned").hide();
            $("#ApplianceOwned").hide();

            coMakerStatementCollectionView = new wijmo.collections.CollectionView(getApplicantCoMakerStatement());
            coMakerStatementFlexGrid.itemsSource = coMakerStatementCollectionView;
            coMakerStatementFlexGrid.trackChanges = true;
        });

        // appliance owned pills and tabs
        $('#appplianceOwnedPillTab').click(function () {
            NProgress.start();
            $("#Co-MakersStatement").hide();
            $("#realPropertiesOwned").hide();
            $("#ApplianceOwned").show();

            applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
            applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
            applicantApplianceOwnedFlexGrid.trackChanges = true;
        });

        // appliance real properties owned pills and tabs
        $('#realPropertiesOwnedPillTab').click(function () {
            NProgress.start();
            $("#Co-MakersStatement").hide();
            $("#realPropertiesOwned").show();
            $("#ApplianceOwned").hide();

            applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());
            applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
            applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
        });

        // appliance real properties owned pills and tabs
        $('#propertiesAndAppliancesTab').click(function () {
            NProgress.start();
            $("#coMakerApplianceOwnedsGridData").hide();
            setTimeout(function () {
                $("#coMakerApplianceOwnedsGridData").show();
                applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());
                applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
            }, 200);
        });

        // appliance real properties owned pills and tabs
        $('#applicantRequirementsTab').click(function () {
            NProgress.start();
            $("#coMakerApplianceOwnedsGridData").hide();

            createApplicantRequirementsFlexgrid();
            window.createApplicantRequirementsFlexgrid = function () {
                return true;
            }

            setTimeout(function () {
                $("#coMakerApplianceOwnedsGridData").show();
                applicantRequirementCollectionView = new wijmo.collections.CollectionView(getApplicantRequirements());
                applicantRequirementsFlexgrid.itemsSource = applicantRequirementCollectionView;
                applicantRequirementsFlexgrid.trackChanges = true;
            }, 200);
        });

        function refreshApplicantLoanGrid() {
            applicantLoansCollectionView = new wijmo.collections.CollectionView(getApplicantLoans("Loans"));
            applicantLoansCollectionView.canFilter = true;
            applicantLoansCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantLoanSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                applicantLoansCollectionView.refresh();
            });

            applicantLoansCollectionView.filter = function (item) {
                return !filterText || (item.LoanNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            applicantLoansCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsLoanApplications();
            });

            // Flex Grid
            applicantLoansFlexgrid.itemsSource = applicantLoansCollectionView;
            applicantLoansFlexgrid.trackChanges = true;
        }

        // appliance real properties owned pills and tabs
        $('#applicantTransactionsTab').click(function () {
            NProgress.start();
            $("#applicantTransactions").hide();

            createApplicantLoansFlexgrid();
            window.createApplicantLoansFlexgrid = function () {
                return true;
            }

            setTimeout(function () {
                $("#applicantTransactions").show();
                refreshApplicantLoanGrid();
            }, 200);
        });

        $('#applicantLoansTab').click(function () {
            NProgress.start();
            $("#applicantLoans").show();
            $("#applicantCollections").hide();

            refreshApplicantLoanGrid();
        });

        var cboLoan;
        function createComboBoxLoan() {
            var loanNumbers = new Array();
            $.ajax({
                url: '/api/loan/list/byApplicantId/forViewCollection/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (loanNumbersResults) {
                    var disabled = true;
                    if (loanNumbersResults.length > 0) {
                        for (i = 0; i < loanNumbersResults.length; i++) {
                            var newDate = new Date(loanNumbersResults[i]["LoanDate"]);
                            var loanDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            loanNumbers.push({
                                Id: loanNumbersResults[i]["Id"],
                                LoanNumberDetail: loanNumbersResults[i]["LoanNumberDetail"],
                                LoanDate: loanNumbersResults[i]["LoanDate"],
                                MaturityDate: loanNumbersResults[i]["MaturityDate"],
                                CollectibleAmount: loanNumbersResults[i]["CollectibleAmount"].toLocaleString(),
                                TotalPaidAmount: loanNumbersResults[i]["TotalPaidAmount"].toLocaleString(),
                                TotalBalanceAmount: loanNumbersResults[i]["TotalBalanceAmount"].toLocaleString(),
                                TotalPenaltyAmount: loanNumbersResults[i]["TotalPenaltyAmount"].toLocaleString(),
                                IsLoanApplication: loanNumbersResults[i]["IsLoanApplication"],
                                IsLoanRenew: loanNumbersResults[i]["IsLoanRenew"],
                                IsLoanReconstruct: loanNumbersResults[i]["IsLoanReconstruct"],
                                Particulars: loanNumbersResults[i]["Particulars"]
                            });
                        }

                        disabled = false;
                    }

                    var template = '<table style="table-layout:fixed; width:850px; margin-top: 10px; margin-bottom: 10px;" border="0"> ' +
                                        '<col style="width: 120px;"/>' +
                                        '<col style="width: 100px;"/>' +
                                        '<col style="width: 150px;"/>' +
                                        '<col style="width: 10px;"/>' +
                                        '<col style="width: 150px;"/>' +
                                        '<col style="width: 10px;"/>' +
                                        '<col style="width: 120px;"/>' +
                                        '<thead>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Loan No. </td>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Due Date </td>' +
                                            '<th style="word-wrap:break-word; padding-right: 50px;" valign="top"> Particulars </td>' +
                                            '<th style="word-wrap:break-word; padding-right: 30px;" valign="top" colspan="2"> Collectible </th>' +
                                            '<th style="word-wrap:break-word;" valign="top" colspan="2"> Balance </th>' +
                                        '</thead>' +
                                         '<tbody>' +
                                            '<tr>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{LoanNumberDetail}</td>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{MaturityDate}</td>' +
                                                '<td style="word-wrap:break-word; padding-right: 50px;" valign="top">{Particulars}</td>' +
                                                '<td style="padding: 0px; margin: 0px;" valign="top"> &#8369 </td>' +
                                                '<td style="text-align: right; word-wrap:break-word; padding-right: 30px;" valign="top"> {CollectibleAmount}</td>' +
                                                '<td style="padding: 0px; margin: 0px;" valign="top"> &#8369 </td>' +
                                                '<td style="text-align: right; word-wrap:break-word;" valign="top"> {TotalBalanceAmount}</td>' +
                                            '</tr>' +
                                        '</tbody>' +
                                   '</table>';

                    cboLoan.dispose();
                    cboLoan = new wijmo.input.ComboBox('#cboLoan', {
                        isDisabled: disabled,
                        placeholder: "Select",
                        itemsSource: loanNumbers,
                        isEditable: false,
                        isRequired: true,
                        displayMemberPath: "LoanNumberDetail",
                        selectedValuePath: "LoanNumberDetail",
                        headerPath: 'LoanNumberDetail',
                        formatItem: function (s, e) {
                            var html = wijmo.format(template, e.data);
                            e.item.innerHTML = html;
                        },
                        onSelectedIndexChanged: function () {
                            NProgress.start();
                            setTimeout(function () {
                                refreshApplicantCollectionsGrid();
                                refreshApplicantCollectionLinesGrid();
                            }, 200);
                        }
                    });

                    if (loanNumbersResults.length > 0) {
                        createCollectionFlexGrid();
                        window.createCollectionFlexGrid = function () {
                            return true;
                        }
                    } else {
                        NProgress.done();
                    }
                }
            });
        }

        // applicant collections
        function getApplicantCollections() {
            var collectionListArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collections/list/ByApplicantId/' + getUrlParameter("id") + '/' + cboLoan.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionListResult) {
                    if (collectionListResult.length > 0) {
                        for (i = 0; i < collectionListResult.length; i++) {
                            var newDate = new Date(collectionListResult[i]["CollectionDate"]);
                            var collectionDateValue = ('0' + (newDate.getMonth() + 1)).slice(-2) + '-' + ('0' + newDate.getDate()).slice(-2) + '-' + newDate.getFullYear();

                            collectionListArray.push({
                                HoverButton: "<button class='btn btn-primary btn-xs btn-block' onclick='onClickCollectionDetail()'><i class='fa fa-edit fa-fw'></i> Detail</button>",
                                Id: collectionListResult[i]["Id"],
                                CollectionNumber: "CL-" + collectionListResult[i]["CollectionNumber"],
                                CollectionDate: collectionDateValue,
                                Applicant: collectionListResult[i]["Applicant"],
                                LoanId: collectionListResult[i]["LoanId"],
                                LoanNumberDetail: collectionListResult[i]["LoanNumberDetail"],
                                LoanId: collectionListResult[i]["LoanId"],
                                LoanNumber: collectionListResult[i]["LoanNumber"],
                                Particulars: collectionListResult[i]["Particulars"],
                                CollectionStatus: collectionListResult[i]["CollectionStatus"],
                                TotalPaidAmount: collectionListResult[i]["TotalPaidAmount"],
                                TotalPenaltyAmount: collectionListResult[i]["TotalPenaltyAmount"],
                                PreparedByUserId: collectionListResult[i]["PreparedByUserId"],
                                PreparedByUser: collectionListResult[i]["PreparedByUser"],
                                IsLocked: collectionListResult[i]["IsLocked"],
                                CreatedByUserId: collectionListResult[i]["CreatedByUserId"],
                                CreatedByUser: collectionListResult[i]["CreatedByUser"],
                                CreatedDateTime: collectionListResult[i]["CreatedDateTime"],
                                UpdatedByUserId: collectionListResult[i]["UpdatedByUserId"],
                                UpdatedByUser: collectionListResult[i]["UpdatedByUser"],
                                UpdatedDateTime: collectionListResult[i]["UpdatedDateTime"]
                            });
                        }
                    }

                    NProgress.done();
                }
            });
            return collectionListArray;
        }

        var collectionCollectionView;
        var collectionFlexGrid;

        // Navigation Buttons for loan application
        function updateNavigateButtonsCollections() {
            if (collectionCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridCollections').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridCollections').style.display = 'block';
            btnCurrentPageGridCollections.innerHTML = (collectionCollectionView.pageIndex + 1) + ' / ' + collectionCollectionView.pageCount;
        }

        // create collection flexgrid
        function createCollectionFlexGrid() {
            collectionCollectionView = new wijmo.collections.CollectionView(getApplicantCollections());
            collectionCollectionView.canFilter = true;
            collectionCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionsSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionCollectionView.refresh();
            });

            collectionCollectionView.filter = function (item) {
                return !filterText || (item.CollectionNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsCollections();
            });

            // Flex Grid
            collectionFlexGrid = new wijmo.grid.FlexGrid('#applicantCollectionsFlexgrid');
            collectionFlexGrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "HoverButton",
                                "width": 100,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "L",
                                "binding": "IsLocked",
                                "width": 35,
                                "align": "center",
                                "allowSorting": true,
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Date",
                                "binding": "CollectionDate",
                                "allowSorting": true,
                                "width": 100,
                            },
                            {
                                "header": "Collection No.",
                                "binding": "CollectionNumber",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Status",
                                "binding": "CollectionStatus",
                                "allowSorting": true,
                                "width": 200,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 300,
                            },
                            {
                                "header": "Paid",
                                "binding": "TotalPaidAmount",
                                "allowSorting": true,
                                "width": 130
                            },
                            {
                                "header": "Penalty",
                                "binding": "TotalPenaltyAmount",
                                "allowSorting": true,
                                "width": 130
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: collectionCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridCollections = document.getElementById('btnMoveToFirstPageGridCollections');
            btnPreviousPageGridCollections = document.getElementById('btnMoveToPreviousPageGridCollections');
            btnNextPageGridCollections = document.getElementById('btnMoveToNextPageGridCollections');
            btnLastPageGridCollections = document.getElementById('btnMoveToLastPageGridCollections');
            btnCurrentPageGridCollections = document.getElementById('btnCurrentPageGridCollections');

            updateNavigateButtonsCollections();

            btnFirstPageGridCollections.addEventListener('click', function () {
                collectionCollectionView.moveToFirstPage();
                updateNavigateButtonsCollections();
            });
            btnPreviousPageGridCollections.addEventListener('click', function () {
                collectionCollectionView.moveToPreviousPage();
                updateNavigateButtonsCollections();
            });
            btnNextPageGridCollections.addEventListener('click', function () {
                collectionCollectionView.moveToNextPage();
                updateNavigateButtonsCollections();
            });
            btnLastPageGridCollections.addEventListener('click', function () {
                collectionCollectionView.moveToLastPage();
                updateNavigateButtonsCollections();
            });
        }

        function refreshApplicantCollectionsGrid() {
            collectionCollectionView = new wijmo.collections.CollectionView(getApplicantCollections());
            collectionCollectionView.canFilter = true;
            collectionCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionsSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionCollectionView.refresh();
            });

            collectionCollectionView.filter = function (item) {
                return !filterText || (item.CollectionNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1);
            }

            collectionCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsCollections();
            });

            // Flex Grid
            collectionFlexGrid.itemsSource = collectionCollectionView;
            collectionFlexGrid.trackChanges = true;
        }

        $('#applicantCollectionsTab').click(function () {
            NProgress.start();
            $("#applicantLoans").hide();
            $("#applicantReconstructedLoans").hide();
            $("#applicantRenews").hide();
            $("#applicantCollections").show();

            createComboBoxLoan();

            setTimeout(function () {
                if (cboLoan.itemsSource.length > 0) {
                    refreshApplicantCollectionsGrid();
                } else {
                    NProgress.done();
                    document.getElementById('btnCurrentPageGridCollections').innerHTML = '0 / 0';
                }
            }, 200);
        });

        function detailApplicantLoansOnclick() {
            applicantLoansCollectionView.editItem(applicantLoansCollectionView.currentItem);
            var currentItem = applicantLoansCollectionView.currentEditItem;
            window.open("/Software/LoanApplicationDetail?id=" + currentItem.Id, "_blank");
        }

        function detailApplicantReconstructedLoansOnclick() {
            applicantReconstructedLoansCollectionView.editItem(applicantReconstructedLoansCollectionView.currentItem);
            var currentItem = applicantReconstructedLoansCollectionView.currentEditItem;
            window.open("/Software/ReconstructDetail?id=" + currentItem.Id, "_blank");
        }

        function detailApplicantRenewLoansOnclick() {
            applicantRenewLoansCollectionView.editItem(applicantRenewLoansCollectionView.currentItem);
            var currentItem = applicantRenewLoansCollectionView.currentEditItem;
            window.open("/Software/RenewDetail?id=" + currentItem.Id, "_blank");
        }

        function onClickCollectionDetail() {
            collectionCollectionView.editItem(collectionCollectionView.currentItem);
            var currentItem = collectionCollectionView.currentEditItem;
            window.open("/Software/CollectionDetail?id=" + currentItem.Id, "_blank");
        }


        // add new applicant
        function btnAddApplicantOnclick() {
            $("#btnLockApplicant").prop("disabled", true);
            $("#btnUnlockApplicant").prop("disabled", true);
            $("#btnClose").prop("disabled", true);
            $("#btnAddApplicantRealPropertiesOwned").prop("disabled", true);
            $("#btnAddApplicantApplianceOwned").prop("disabled", true);
            $("#btnAddApplicantDetailCoMakersStatement").prop("disabled", true);
            $("#btnApplicantChangePhoto").prop("disabled", true);
            $("#btnApplicantDeletePhoto").prop("disabled", true);
            $("#btnOptions").prop("disabled", true);
            document.getElementById("btnOptions").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Adding";

            $.ajax({
                type: "POST",
                url: '/api/applicant/add',
                contentType: "application/json; charset=utf-8",
                success: function (id) {
                    if (id > 0) {
                        toastr.success("Adding Successful");
                        window.setTimeout(function () {
                            window.location = '/Software/ApplicantDetail?id=' + id;
                        }, 1500);
                    } else {
                        toastr.error("Internal Server Error");
                    }
                }
            });
        }

        // delete applicant
        function deleteApplicantOnclick() {
            if (isLocked) {
                toastr.info("Record Locked");
            } else {
                $("#deleteConfirmationApplicantModal").modal({
                    "show": true,
                    "backdrop": "static"
                });

                document.getElementById("btnConfirmDeleteApplicant").innerHTML = "Delete";
                $("#btnConfirmDeleteApplicant").prop("disabled", false);
                $("#btnCloseDeleteApplicantModal").prop("disabled", false);
            }
        }

        function btnConfirmDeleteApplicantOnclick() {
            document.getElementById("btnConfirmDeleteApplicant").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicant").prop("disabled", true);
            $("#btnCloseDeleteApplicantModal").prop("disabled", true);

            $.ajax({
                url: '/api/applicant/delete/' + getUrlParameter("id"),
                type: "DELETE",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("Delete Successful");
                        window.setTimeout(function () {
                            window.location = "/Software/ApplicantList";
                        }, 1500);
                    },
                    404: function () {
                        toastr.error("Delete Not Found");
                        $('#deleteConfirmationApplicantModal').modal('hide');
                        $("#btnConfirmDeleteApplicant").prop("disabled", false);
                        $("#btnCloseDeleteApplicantModal").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Bad Request");
                        $('#deleteConfirmationApplicantModal').modal('hide');
                        $("#btnConfirmDeleteApplicant").prop("disabled", false);
                        $("#btnCloseDeleteApplicantModal").prop("disabled", false);
                    }
                }
            });
        }

        // applicant collections
        function getApplicantCollectionLines() {
            var collectionLinesArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/collectionLines/listByLoanId/' + cboLoan.selectedItem["Id"],
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (collectionLinesResults) {
                    if (collectionLinesResults.length > 0) {
                        for (i = 0; i < collectionLinesResults.length; i++) {

                            var thisDate = new Date(collectionLinesResults[i]["PayDate"]);

                            var weekday = new Array(7);
                            var day = "";

                            if (thisDate.getDay() == 0) {
                                day = "Sunday";
                            } else {
                                if (thisDate.getDay() == 1) {
                                    day = "Monday";
                                } else {
                                    if (thisDate.getDay() == 2) {
                                        day = "Tuesday";
                                    } else {
                                        if (thisDate.getDay() == 3) {
                                            day = "Wednesday";
                                        } else {
                                            if (thisDate.getDay() == 4) {
                                                day = "Thursday";
                                            } else {
                                                if (thisDate.getDay() == 5) {
                                                    day = "Friday";
                                                } else {
                                                    if (thisDate.getDay() == 6) {
                                                        day = "Saturday";
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            var thisDateValue = [thisDate.getMonth() + 1, thisDate.getDate(), thisDate.getFullYear()].join('-') + " " + day;
                            collectionLinesArray.push({
                                HoverButton: "<button class='btn btn-primary btn-xs btn-block' onclick='btnCollectionLinesDetail()'><i class='fa fa-edit fa-fw'></i> Detail</button>",
                                Id: collectionLinesResults[i]["Id"],
                                CollectionId: collectionLinesResults[i]["CollectionId"],
                                CollectionNumber: "CL-" + collectionLinesResults[i]["CollectionNumber"],
                                PayDate: thisDateValue,
                                PayDateValue: [thisDate.getMonth() + 1, thisDate.getDate(), thisDate.getFullYear()].join('-'),
                                Particulars: collectionLinesResults[i]["Particulars"],
                                Status: collectionLinesResults[i]["Status"],
                                PenaltyAmount: collectionLinesResults[i]["PenaltyAmount"],
                                PaidAmount: collectionLinesResults[i]["PaidAmount"]
                            });

                        }
                    }

                    NProgress.done();
                }
            });
            return collectionLinesArray;
        }

        var collectionLinesCollectionView;
        var collectionLinesFlexGrid;

        function btnCollectionLinesDetail() {
            collectionLinesCollectionView.editItem(collectionLinesCollectionView.currentItem);
            var currentItem = collectionLinesCollectionView.currentEditItem;
            window.open("/Software/CollectionDetail?id=" + currentItem.CollectionId, "_blank");
        }

        // Navigation Buttons for loan application
        function updateNavigateButtonsCollectionLines() {
            if (collectionLinesCollectionView.pageSize <= 0) {
                document.getElementById('naviagtionPageGridCollectionLines').style.display = 'none';
                return;
            }
            document.getElementById('naviagtionPageGridCollectionLines').style.display = 'block';
            btnCurrentPageGridCollectionLines.innerHTML = (collectionLinesCollectionView.pageIndex + 1) + ' / ' + collectionLinesCollectionView.pageCount;
        }

        // create collection flexgrid
        function createCollectionLinesFlexGrid() {
            collectionLinesCollectionView = new wijmo.collections.CollectionView(getApplicantCollectionLines());
            collectionLinesCollectionView.canFilter = true;
            collectionLinesCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionLinesSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionLinesCollectionView.refresh();
            });

            collectionLinesCollectionView.filter = function (item) {
                return !filterText || (item.CollectionNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Status.toLowerCase().indexOf(filterText) > -1);
            }

            collectionLinesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsCollectionLines();
            });

            // Flex Grid
            collectionLinesFlexGrid = new wijmo.grid.FlexGrid('#applicantCollectionLinesFlexgrid');
            collectionLinesFlexGrid.initialize({
                columns: [
                            {
                                "header": "Detail",
                                "binding": "HoverButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Collection No.",
                                "binding": "CollectionNumber",
                                "allowSorting": true,
                                "width": 170,
                            },
                            {
                                "header": "Pay Date",
                                "binding": "PayDate",
                                "allowSorting": true,
                                "width": 210,
                            },
                            {
                                "header": "Status",
                                "binding": "Status",
                                "allowSorting": true,
                                "width": 200,
                            },
                            {
                                "header": "Paid",
                                "binding": "PaidAmount",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Penalty",
                                "binding": "PenaltyAmount",
                                "allowSorting": true,
                                "width": 150,
                            },
                            {
                                "header": "Particulars",
                                "binding": "Particulars",
                                "allowSorting": true,
                                "width": 300,
                            },
                ],
                autoGenerateColumns: false,
                itemsSource: collectionLinesCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            collectionLinesFlexGrid.trackChanges = true;

            //Navigation button
            btnFirstPageGridCollectionLines = document.getElementById('btnMoveToFirstPageGridCollectionLines');
            btnPreviousPageGridCollectionLines = document.getElementById('btnMoveToPreviousPageGridCollectionLines');
            btnNextPageGridCollectionLines = document.getElementById('btnMoveToNextPageGridCollectionLines');
            btnLastPageGridCollectionLines = document.getElementById('btnMoveToLastPageGridCollectionLines');
            btnCurrentPageGridCollectionLines = document.getElementById('btnCurrentPageGridCollectionLines');

            updateNavigateButtonsCollectionLines();

            btnFirstPageGridCollectionLines.addEventListener('click', function () {
                collectionLinesCollectionView.moveToFirstPage();
                updateNavigateButtonsCollectionLines();
            });
            btnPreviousPageGridCollectionLines.addEventListener('click', function () {
                collectionLinesCollectionView.moveToPreviousPage();
                updateNavigateButtonsCollectionLines();
            });
            btnNextPageGridCollectionLines.addEventListener('click', function () {
                collectionLinesCollectionView.moveToNextPage();
                updateNavigateButtonsCollectionLines();
            });
            btnLastPageGridCollectionLines.addEventListener('click', function () {
                collectionLinesCollectionView.moveToLastPage();
                updateNavigateButtonsCollectionLines();
            });
        }

        function refreshApplicantCollectionLinesGrid() {
            collectionLinesCollectionView = new wijmo.collections.CollectionView(getApplicantCollectionLines());
            collectionLinesCollectionView.canFilter = true;
            collectionLinesCollectionView.pageSize = 15;

            var filterText = '';
            $('#applicantCollectionLinesSearchInput').keyup(function () {
                filterText = this.value.toLowerCase();
                collectionLinesCollectionView.refresh();
            });

            collectionLinesCollectionView.filter = function (item) {
                return !filterText || (item.CollectionNumber.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Particulars.toLowerCase().indexOf(filterText) > -1)
                                   || (item.Status.toLowerCase().indexOf(filterText) > -1);
            }

            collectionLinesCollectionView.collectionChanged.addHandler(function (sender, args) {
                updateNavigateButtonsCollectionLines();
            });

            // Flex Grid
            collectionLinesFlexGrid.itemsSource = collectionLinesCollectionView;
            collectionLinesFlexGrid.trackChanges = true;
        }

        $('#detailCollectionTab').click(function () {
            NProgress.start();
            $("#summaryCollection").hide();
            $("#detailCollection").show();

            setTimeout(function () {
                if (cboLoan.itemsSource.length > 0) {
                    createCollectionLinesFlexGrid();
                    window.createCollectionLinesFlexGrid = function () {
                        return true;
                    }

                    refreshApplicantCollectionLinesGrid();
                } else {
                    NProgress.done();
                    document.getElementById('btnCurrentPageGridCollectionLines').innerHTML = '0 / 0';
                }
            }, 200);
        });

        $('#summaryCollectionTab').click(function () {
            NProgress.start();
            $("#summaryCollection").show();
            $("#detailCollection").hide();

            setTimeout(function () {
                if (cboLoan.itemsSource.length > 0) {
                    setTimeout(function () {
                        refreshApplicantCollectionsGrid();
                    }, 100);
                } else {
                    NProgress.done();
                    document.getElementById('btnCurrentPageGridCollections').innerHTML = '0 / 0';
                }
            }, 200);
        });

        // print collectibles
        function btnPrintPosting() {
            if (isLocked) {
                if (cboLoan.itemsSource.length > 0) {
                    window.open("/RepCollectiblesPDF/Collectibles?loanId=" + cboLoan.selectedItem["Id"], "_blank");
                } else {
                    toastr.error("No Loan Transaction");
                }
            } else {
                toastr.error("Not Locked");
            }
        }


        function btnAreaDetailOnClick() {
            var link = '/Software/AreaDetail?id=' + cboApplicantArea.selectedItem["Id"];
            window.open(link, "_blank");
        }
    </script>
</body>
</html>