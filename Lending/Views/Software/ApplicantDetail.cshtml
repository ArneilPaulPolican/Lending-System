<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Title -->
    <title>DLH - Applicant Detail</title>

    <!-- Styles -->
    @Styles.Render("~/Content/css")
</head>
<body>
    <!-- Header -->
    @Html.Partial("HomeHeader")

    <section class="software-section">
        <div class="container">
            <div class="row">
                <div class="col-lg-3">
                    <div class="list-group">
                        <a href="/Software" class="list-group-item">
                            <i class="fa fa-dashboard fa-fw"></i> &nbsp; Dashboard
                        </a>
                        <a href="/Software/ApplicantList" class="list-group-item active">
                            <i class="fa fa-users fa-fw"></i> &nbsp; Applicant
                        </a>
                        <a href="/Software/LoanApplicationList" class="list-group-item">
                            <i class="fa fa-file-text-o fa-fw"></i> &nbsp; Loan Application
                        </a>
                        <a href="#" class="list-group-item"><i class="fa fa-cc-visa fa-fw"></i> &nbsp; Collection</a>
                        <a href="/Software/AreaList" class="list-group-item">
                            <i class="fa fa-map-pin fa-fw"></i> &nbsp; Area
                        </a>
                        <a href="#" class="list-group-item"><i class="fa fa-key fa-fw"></i> &nbsp; Users</a>
                        <a href="#" class="list-group-item"><i class="fa fa-print fa-fw"></i> &nbsp; Reports</a>
                    </div>
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            User security stamp
                        </div>
                        <div class="panel-body">
                            <p>Created by:</p>
                            <div style="padding-left: 10px;">
                                <i class="fa fa-key fa-fw"></i> <label id="stampCreatedBy">NA</label>
                                <br />
                                <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampCreatedDate">mm/dd/yyyy</span></small>
                            </div>
                            <hr />
                            <p>Updated by:</p>
                            <div style="padding-left: 10px;">
                                <i class="fa fa-key fa-fw"></i> <label id="stampUpdatedBy">NA</label>
                                <br />
                                <small><i class="fa fa-calendar fa-fw"></i> &nbsp;<span id="stampUpdatedDate">mm/dd/yyyy</span></small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-lg-9">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            <table style="width: 100%">
                                <tr>
                                    <td>
                                        <h4>Applicant Detail</h4>
                                    </td>
                                    <td align="right">
                                        <button class="btn btn-primary" id="btnSaveChanges" onclick="btnSaveChangesApplicantOnclick()">
                                            <i class="fa fa-save fa-fw"></i> Save Changes
                                        </button>
                                        <button class="btn btn-primary" id="btnPDF">
                                            <i class="fa fa-file-pdf-o fa-fw"></i> PDF
                                        </button>
                                        <button class="btn btn-danger" id="btnClose" onclick="window.location = '/Software/ApplicantList'">
                                            <i class="fa fa-close fa-fw"></i> Close
                                        </button>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-md-3">
                                    <img class="img-responsive img-thumbnail" src="~/Images/landing-page/me.jpg" />
                                    <hr />
                                    <button class="btn btn-default btn-sm btn-block"><i class="fa fa-search-plus fa-fw"></i> Preview</button>
                                    <button class="btn btn-default btn-sm btn-block"><i class="fa fa-image fa-fw"></i> Change Photo</button>
                                    <button class="btn btn-danger btn-sm btn-block"><i class="fa fa-trash fa-fw"></i> Delete this photo</button>
                                    <br />
                                </div>
                                <div class="col-md-9">
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            Applicant Personal Information
                                        </div>
                                        <div class="panel-body">
                                            <dl class="dl-horizontal">
                                                <dt>Applicant Code</dt>
                                                <dd>
                                                    <input type="text" class="form-control" id="applicantCode" />
                                                </dd>
                                                <dt>Applicant Name</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantFullName" placeholder="Full Name" /></dd>
                                                <dt>Birth Date</dt>
                                                <dd>
                                                    <div id="applicantBirthDate"></div> &nbsp; <span id="fullDateString"></span>
                                                </dd>
                                                <dt>Civil Status</dt>
                                                <dd><div id="applicantCivilStatus"></div></dd>
                                                <dt>City Address</dt>
                                                <dd><textarea class="form-control requiredApplicantDetail" id="applicantCityAddress" placeholder="City Address"></textarea></dd>
                                                <dt>Province Address</dt>
                                                <dd><textarea class="form-control requiredApplicantDetail" id="applicantProvinceAddress" placeholder="Province Address"></textarea></dd>
                                                <dt>Residence Type</dt>
                                                <dd><div id="applicantResidenceType"></div></dd>
                                                <dt>Length of Stay</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantLengthOfStay" placeholder="How many months, years or days?" /></dd>
                                            </dl>
                                        </div>
                                    </div>
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            Business Detail
                                        </div>
                                        <div class="panel-body">
                                            <dl class="dl-horizontal">
                                                <dt>Business Address</dt>
                                                <dd><textarea class="form-control requiredApplicantDetail" id="applicantBusinessAddress" placeholder="Business Address"></textarea></dd>
                                                <dt>Karatula Name</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantBusinessKaratulaName" placeholder="Karatula Name" /></dd>
                                                <dt>Telephone Number</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantBusinessTelephoneNumber" placeholder="Telephone Number" /></dd>
                                                <dt>Business Years</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantBusinessYears" placeholder="How long on said business" /></dd>
                                                <dt>Merchandise</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantBBusinessMerchandise" placeholder="Business Merchandise" /></dd>
                                                <dt>Value of Stocks</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail numberField" id="applicantValuesOfStocks" placeholder="0" /></dd>
                                                <dt>Beginning Capital</dt>
                                                <dd>
                                                    <div class="input-group numberField">
                                                        <span class="input-group-addon">&#8369;</span>
                                                        <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantBusinessBeginningCapital" placeholder="0.00" />
                                                    </div>
                                                </dd>
                                                <dt>Sales are low during</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSalesLowPeriod" placeholder="Sales are low during" /></dd>
                                                <dt>Lowest daily sales</dt>
                                                <dd>
                                                    <div class="input-group numberField">
                                                        <span class="input-group-addon">&#8369;</span>
                                                        <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantLowestDailySales" placeholder="0" />
                                                    </div>
                                                </dd>
                                                <dt>Average daily sales</dt>
                                                <dd>
                                                    <div class="input-group numberField">
                                                        <span class="input-group-addon">&#8369;</span>
                                                        <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantAverageDailySales" placeholder="0" />
                                                    </div>
                                                </dd>
                                            </dl>
                                        </div>
                                    </div>
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            If Employed
                                        </div>
                                        <div class="panel-body">
                                            <dl class="dl-horizontal">
                                                <dt>Name of Company</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedCompanyName" placeholder="Name of Company" /></dd>
                                                <dt>Company Address</dt>
                                                <dd><textarea class="form-control requiredApplicantDetail" id="applicantEmployedCompanyAddress" placeholder="Company Address"></textarea></dd>
                                                <dt>Position Occupied</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedPositionOccupied" placeholder="Position Occupied" /></dd>
                                                <dt>Length of Service</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedLengthOfService" placeholder="Length of Service" /></dd>
                                                <dt>Telephone Number</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantEmployedTelephoneNumber" placeholder="Telephone Number" /></dd>
                                            </dl>
                                        </div>
                                    </div>
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            Spouse's Information and Income Detail
                                        </div>
                                        <div class="panel-body">
                                            <dl class="dl-horizontal">
                                                <dt>Name of Spouse</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseName" placeholder="Name of Spouse" /></dd>
                                                <dt>Employer or Business</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseEmployerOrBusiness" placeholder="Employer or Business of Spouse" /></dd>
                                                <dt>Business Address</dt>
                                                <dd><textarea class="form-control requiredApplicantDetail" id="applicantSpouseBusinessAddress" placeholder="Employer or Business Address"></textarea></dd>
                                                <dt>Telephone Number</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseTelephoneNumber" placeholder="Telephone Number" /></dd>
                                                <dt>Position Occupied</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpousePositionOccupied" placeholder="Position Occupied" /></dd>
                                                <dt>Monthly Salary</dt>
                                                <dd>
                                                    <div class="input-group numberField">
                                                        <span class="input-group-addon">&#8369;</span>
                                                        <input type="text" class="form-control requiredApplicantDetail numberField" id="applicantSpouseMonthlySalary" placeholder="0.00" />
                                                    </div>
                                                </dd>
                                                <dt>Length of Service</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseLengthOfService" placeholder="Length of Service" /></dd>
                                                <dt>Number of Children</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseNumberOfChildren" placeholder="How many children?" /></dd>
                                                <dt>Number of Studying</dt>
                                                <dd><input type="text" class="form-control requiredApplicantDetail" id="applicantSpouseNumberOfStudying" placeholder="How many are studying?" /></dd>
                                                <dt>Schools</dt>
                                                <dd><textarea class="form-control requiredApplicantDetail" id="applicantSpouseChildrenSchools" placeholder="What Schools?"></textarea></dd>
                                            </dl>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <ul class="nav nav-pills nav-stacked" style="background-color: #f7f7f7">
                                        <li class="active"><a data-toggle="pill" href="#realPropertiesOwned" id="realPropertiesOwnedPillTab">Real Properties Owned</a></li>
                                        <li><a data-toggle="pill" href="#ApplianceOwned" id="appplianceOwnedPillTab">Appliance Owned</a></li>
                                    </ul>
                                    <br />
                                </div>
                                <div class="col-md-9">
                                    <div class="tab-content">
                                        <div id="realPropertiesOwned" class="tab-pane fade in active">
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <table style="width: 100%">
                                                        <tr>
                                                            <td>
                                                                Real Properties Owned
                                                            </td>
                                                            <td align="right">
                                                                <button class="btn btn-primary btn-sm" onclick="btnAddApplicantRealPropertiesOwnedOnclick()">
                                                                    <i class="fa fa-plus fa-fw"></i> Add
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                                <div class="panel-body">
                                                    <div id="applicantRealPropertiesOwnedFlexGrid"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="ApplianceOwned" class="tab-pane fade">
                                            <div class="panel panel-default">
                                                <div class="panel-heading">
                                                    <table style="width: 100%">
                                                        <tr>
                                                            <td>
                                                                Appliance Owned
                                                            </td>
                                                            <td align="right">
                                                                <button class="btn btn-primary btn-sm" onclick="btnAddApplicantApplianceOwnedOnclick()">
                                                                    <i class="fa fa-plus fa-fw"></i> Add
                                                                </button>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </div>
                                                <div class="panel-body">
                                                    <div id="applicantApplianceOwnedFlexGrid"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="panel-footer" align="right">
                            <button class="btn btn-primary" id="btnSaveChangesButtom" onclick="btnSaveChangesApplicantOnclick()">
                                <i class="fa fa-save fa-fw"></i> Save Changes
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- applicant detail edit real properties owned  -->
    <div class="modal fade" id="applicantDetailRealPropertiesOwnedModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Real Properties Owned Detail</h4>
                </div>
                <div class="modal-body">
                    <dl class="dl-horizontal">
                        <dt>Real</dt>
                        <dd><input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedReal" placeholder="Real" /></dd>
                        <dt>Location</dt>
                        <dd><input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedLocation" placeholder="Location" /></dd>
                        <dt>Present Value</dt>
                        <dd><input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedPresentValue" placeholder="Present Value" /></dd>
                        <dt>Ecumbered To</dt>
                        <dd><input type="text" class="form-control requireApplicantRealPropertiesOwned" id="applicantDetailRealPropertiesOwnedEcumberedTo" placeholder="Ecumbered To" /></dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailRealPropertiesOwned" onclick="btnSaveApplicantDetailRealPropertiesOwnedOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailRealPropertiesOwned" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant real properties owned modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailRealPropertiesOwnedModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Property</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this property?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteApplicantDetailRealPropertiesOwned" onclick="btnConfirmDeleteApplicantDetailRealPropertiesOwnedOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailRealPropertiesOwned" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- applicant detail edit appliance owned  -->
    <div class="modal fade" id="applicantDetailApplianceOwnedModal" role="dialog">
        <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Appliance Owned Detail</h4>
                </div>
                <div class="modal-body">
                    <dl class="dl-horizontal">
                        <dt>Appliance Brand</dt>
                        <dd><input type="text" class="form-control requireApplicantApplianceOwned" id="applicantDetailApplianceOwnedBrand" placeholder="Real" /></dd>
                        <dt>Present Value</dt>
                        <dd><input type="text" class="form-control requireApplicantApplianceOwned" id="applicantDetailApplianceOwnedPresentValue" placeholder="Present Value" /></dd>
                    </dl>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" id="btnSaveApplicantDetailApplianceOwned" onclick="btnSaveApplicantDetailApplianceOwnedOnclick()"><i class="fa fa-save fa-fw"></i> Save</button>
                    <button class="btn btn-danger" id="btnCloseApplicantDetailApplianceOwned" data-dismiss="modal"><i class="fa fa-close fa-fw"></i> Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- delete confirmation applicant appliance owned modal -->
    <div class="modal fade" id="deleteConfirmationApplicantDetailApplianceOwnedModal" role="dialog">
        <div class="modal-dialog modal-sm">
            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Delete Appliance</h4>
                </div>
                <div class="modal-body">
                    Are you sure that you want to delete this appliance?
                </div>
                <div class="modal-footer">
                    <button class="btn btn-default" id="btnConfirmDeleteApplicantDetailApplianceOwned" onclick="btnConfirmDeleteApplicantDetailApplianceOwnedOnclick()">Yes</button>
                    <button class="btn btn-default" id="btnCloseDeleteModalApplicantDetailApplianceOwned" data-dismiss="modal">No</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    @Html.Partial("HomeFooter")

    <!-- Scripts -->
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        // global variables
        var cboBirthDate;
        var cboCivilStatus = new wijmo.input.ComboBox('#applicantCivilStatus');
        var cboResidenceType = new wijmo.input.ComboBox('#applicantResidenceType');
        var applicantRealPropertiesOwnedCollectionView;
        var applicantRealPropertiesOwnedFlexGrid;
        var applicantApplianceOwnedCollectionView;
        var applicantApplianceOwnedFlexGrid;
        var applicantRealPropertiesOwnedId;
        var applicantApplianceOwnedId;


        // on load birthdate label string
        function onLoadBirthDateLabelString(cboBirthDate) {
            var birthDateValue = cboBirthDate.value.getMonth() + 1;
            var month = "";

            if (birthDateValue == 1) {
                month = "January";
            } else if (birthDateValue == 2) {
                month = "February";
            } else if (birthDateValue == 3) {
                month = "March";
            } else if (birthDateValue == 4) {
                month = "April";
            } else if (birthDateValue == 5) {
                month = "May";
            } else if (birthDateValue == 6) {
                month = "June";
            } else if (birthDateValue == 7) {
                month = "July";
            } else if (birthDateValue == 8) {
                month = "August";
            } else if (birthDateValue == 9) {
                month = "September";
            } else if (birthDateValue == 10) {
                month = "October";
            } else if (birthDateValue == 11) {
                month = "November";
            } else if (birthDateValue == 12) {
                month = "December";
            } else {
                month = "";
            }

            document.getElementById("fullDateString").innerHTML = month + " " + cboBirthDate.value.getDate() + ", " + cboBirthDate.value.getFullYear();
        }

        // cbo birthdate
        function createCboBirthDate() {
            cboBirthDate = new wijmo.input.InputDate('#applicantBirthDate', {
                format: 'MM-dd-yyyy',
                value: new Date(),
                mask: '99-99-9999',
                onValueChanged: function () {
                    var birthDateValue = this.value.getMonth() + 1;
                    var month = "";

                    if (birthDateValue == 1) {
                        month = "January";
                    } else if (birthDateValue == 2) {
                        month = "February";
                    } else if (birthDateValue == 3) {
                        month = "March";
                    } else if (birthDateValue == 4) {
                        month = "April";
                    } else if (birthDateValue == 5) {
                        month = "May";
                    } else if (birthDateValue == 6) {
                        month = "June";
                    } else if (birthDateValue == 7) {
                        month = "July";
                    } else if (birthDateValue == 8) {
                        month = "August";
                    } else if (birthDateValue == 9) {
                        month = "September";
                    } else if (birthDateValue == 10) {
                        month = "October";
                    } else if (birthDateValue == 11) {
                        month = "November";
                    } else if (birthDateValue == 12) {
                        month = "December";
                    } else {
                        month = "";
                    }

                    document.getElementById("fullDateString").innerHTML = month + " " + this.value.getDate() + ", " + this.value.getFullYear();
                }
            });

            // on load function birthdate label string
            onLoadBirthDateLabelString(cboBirthDate);
        }

        // cbo civil status
        function createCboCivilStatus(civilStatusSelectedValue) {
            var civilStatusArray = new Array();
            $.ajax({
                url: '/api/civilStatus/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (civilStatusResults) {
                    var disabled = true;
                    if (civilStatusResults.length > 0) {
                        for (i = 0; i < civilStatusResults.length; i++) {
                            civilStatusArray.push({
                                Id: civilStatusResults[i]["Id"],
                                CivilStatus: civilStatusResults[i]["CivilStatus"],
                            });
                        }

                        disabled = false;
                    }

                    cboCivilStatus.dispose();
                    cboCivilStatus = new wijmo.input.ComboBox('#applicantCivilStatus', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: civilStatusArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "CivilStatus",
                        selectedValuePath: "CivilStatus",
                        selectedValue: civilStatusSelectedValue.toString()
                    });
                }
            });
        }

        // cbo Residence Type
        function createCboResidenceType(residenceTypeSelectedValue) {
            var residenceTypeArray = new Array();
            $.ajax({
                url: '/api/residenceType/list',
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                data: {},
                success: function (residenceTypeResults) {
                    var disabled = true;
                    if (residenceTypeResults.length > 0) {
                        for (i = 0; i < residenceTypeResults.length; i++) {
                            residenceTypeArray.push({
                                Id: residenceTypeResults[i]["Id"],
                                ResidenceType: residenceTypeResults[i]["ResidenceType"],
                            });
                        }

                        disabled = false;
                    }

                    cboResidenceType.dispose();
                    cboResidenceType = new wijmo.input.ComboBox('#applicantResidenceType', {
                        disabled: disabled,
                        placeholder: "Select",
                        itemsSource: residenceTypeArray,
                        isEditable: false,
                        required: true,
                        displayMemberPath: "ResidenceType",
                        selectedValuePath: "ResidenceType",
                        selectedValue: residenceTypeSelectedValue.toString(),
                    });
                }
            });
        }

        // get Applicant Detail
        function getApplicantDetail() {
            $.ajax({
                url: '/api/applicant/getById/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantDetailResult) {
                    createCboBirthDate();
                    if (applicantDetailResult != null) {
                        document.getElementById("applicantCode").disabled = true;

                        document.getElementById("applicantCode").value = applicantDetailResult.ApplicantCode;
                        document.getElementById("applicantFullName").value = applicantDetailResult.FullName;
                        cboBirthDate.value = new Date(applicantDetailResult.BirthDate);
                        createCboCivilStatus(applicantDetailResult.CivilStatus);
                        document.getElementById("applicantCityAddress").value = applicantDetailResult.CityAddress;
                        document.getElementById("applicantProvinceAddress").value = applicantDetailResult.ProvinceAddress;
                        createCboResidenceType(applicantDetailResult.ResidenceType);
                        document.getElementById("applicantLengthOfStay").value = applicantDetailResult.LengthOfStay;
                        document.getElementById("applicantBusinessAddress").value = applicantDetailResult.BusinessAddress;
                        document.getElementById("applicantBusinessKaratulaName").value = applicantDetailResult.BusinessKaratulaName;
                        document.getElementById("applicantBusinessTelephoneNumber").value = applicantDetailResult.BusinessTelephoneNumber;
                        document.getElementById("applicantBusinessYears").value = applicantDetailResult.BusinessYear;
                        document.getElementById("applicantBBusinessMerchandise").value = applicantDetailResult.BusinessMerchandise;
                        document.getElementById("applicantValuesOfStocks").value = applicantDetailResult.BusinessStockValues;
                        document.getElementById("applicantBusinessBeginningCapital").value = applicantDetailResult.BusinessBeginningCapital;
                        document.getElementById("applicantSalesLowPeriod").value = applicantDetailResult.BusinessLowSalesPeriod;
                        document.getElementById("applicantLowestDailySales").value = applicantDetailResult.BusinessLowestDailySales;
                        document.getElementById("applicantAverageDailySales").value = applicantDetailResult.BusinessAverageDailySales;
                        document.getElementById("applicantEmployedCompanyName").value = applicantDetailResult.EmployedCompany;
                        document.getElementById("applicantEmployedCompanyAddress").value = applicantDetailResult.EmployedCompanyAddress;
                        document.getElementById("applicantEmployedPositionOccupied").value = applicantDetailResult.EmployedPositionOccupied;
                        document.getElementById("applicantEmployedLengthOfService").value = applicantDetailResult.EmployedServiceLength;
                        document.getElementById("applicantEmployedTelephoneNumber").value = applicantDetailResult.EmployedTelephoneNumber;
                        document.getElementById("applicantSpouseName").value = applicantDetailResult.SpouseFullName;
                        document.getElementById("applicantSpouseEmployerOrBusiness").value = applicantDetailResult.SpouseEmployerBusiness;
                        document.getElementById("applicantSpouseBusinessAddress").value = applicantDetailResult.SpouseEmployerBusinessAddress;
                        document.getElementById("applicantSpouseTelephoneNumber").value = applicantDetailResult.SpouseBusinessTelephoneNumber;
                        document.getElementById("applicantSpousePositionOccupied").value = applicantDetailResult.SpousePositionOccupied;
                        document.getElementById("applicantSpouseMonthlySalary").value = applicantDetailResult.SpouseMonthlySalary;
                        document.getElementById("applicantSpouseLengthOfService").value = applicantDetailResult.SpouseLengthOfService;
                        document.getElementById("applicantSpouseNumberOfChildren").value = applicantDetailResult.NumberOfChildren;
                        document.getElementById("applicantSpouseNumberOfStudying").value = applicantDetailResult.Studying;
                        document.getElementById("applicantSpouseChildrenSchools").value = applicantDetailResult.Schools;
                        document.getElementById('stampCreatedBy').innerHTML = applicantDetailResult.CreatedByUser;
                        document.getElementById('stampCreatedDate').innerHTML = applicantDetailResult.CreatedDateTime;
                        document.getElementById('stampUpdatedBy').innerHTML = applicantDetailResult.UpdatedByUser;
                        document.getElementById('stampUpdatedDate').innerHTML = applicantDetailResult.UpdatedDateTime;
                        createFlexGridApplicantRealPropertiesOwned();
                        createFlexGridApplicantApplianceOwned();
                    } else {
                        alert("The applicant Id you request has no data");
                        window.history.back();
                    }

                    NProgress.done();
                }
            });
        }

        // form input validation
        function inputValidation() {
            var isValid = true;
            $('.requiredApplicantDetail').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // update applicant detail or update changes
        function btnSaveChangesApplicantOnclick() {
            if (inputValidation()) {
                document.getElementById("btnSaveChanges").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving Changes";
                document.getElementById("btnSaveChangesButtom").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving Changes";

                $("#btnSaveChanges").prop("disabled", true);
                $("#btnSaveChangesButtom").prop("disabled", true);
                $("#btnPDF").prop("disabled", true);
                $("#btnClose").prop("disabled", true);

                var applicantDetailObject = new Object();
                applicantDetailObject.FullName = document.getElementById('applicantFullName').value;
                applicantDetailObject.BirthDate = cboBirthDate.value;
                applicantDetailObject.CivilStatusId = cboCivilStatus.selectedItem["Id"];
                applicantDetailObject.CityAddress = document.getElementById('applicantCityAddress').value;
                applicantDetailObject.ProvinceAddress = document.getElementById('applicantProvinceAddress').value;
                applicantDetailObject.ResidenceTypeId = cboResidenceType.selectedItem["Id"];
                applicantDetailObject.LengthOfStay = document.getElementById('applicantLengthOfStay').value;
                applicantDetailObject.BusinessAddress = document.getElementById('applicantBusinessAddress').value;
                applicantDetailObject.BusinessKaratulaName = document.getElementById('applicantBusinessKaratulaName').value;
                applicantDetailObject.BusinessTelephoneNumber = document.getElementById('applicantBusinessTelephoneNumber').value;
                applicantDetailObject.BusinessYear = document.getElementById('applicantBusinessYears').value;
                applicantDetailObject.BusinessMerchandise = document.getElementById('applicantBBusinessMerchandise').value;
                applicantDetailObject.BusinessStockValues = document.getElementById('applicantValuesOfStocks').value;
                applicantDetailObject.BusinessBeginningCapital = document.getElementById('applicantBusinessBeginningCapital').value;
                applicantDetailObject.BusinessLowSalesPeriod = document.getElementById('applicantSalesLowPeriod').value;
                applicantDetailObject.BusinessLowestDailySales = document.getElementById('applicantLowestDailySales').value;
                applicantDetailObject.BusinessAverageDailySales = document.getElementById('applicantAverageDailySales').value;
                applicantDetailObject.EmployedCompany = document.getElementById('applicantEmployedCompanyName').value;
                applicantDetailObject.EmployedCompanyAddress = document.getElementById('applicantEmployedCompanyAddress').value;
                applicantDetailObject.EmployedPositionOccupied = document.getElementById('applicantEmployedPositionOccupied').value;
                applicantDetailObject.EmployedServiceLength = document.getElementById('applicantEmployedLengthOfService').value;
                applicantDetailObject.EmployedTelephoneNumber = document.getElementById('applicantEmployedTelephoneNumber').value;
                applicantDetailObject.SpouseFullName = document.getElementById('applicantSpouseName').value;
                applicantDetailObject.SpouseEmployerBusiness = document.getElementById('applicantSpouseEmployerOrBusiness').value;
                applicantDetailObject.SpouseEmployerBusinessAddress = document.getElementById('applicantSpouseBusinessAddress').value;
                applicantDetailObject.SpouseBusinessTelephoneNumber = document.getElementById('applicantSpouseTelephoneNumber').value;
                applicantDetailObject.SpousePositionOccupied = document.getElementById('applicantSpousePositionOccupied').value;
                applicantDetailObject.SpouseMonthlySalary = document.getElementById('applicantSpouseMonthlySalary').value;
                applicantDetailObject.SpouseLengthOfService = document.getElementById('applicantSpouseLengthOfService').value;
                applicantDetailObject.NumberOfChildren = document.getElementById('applicantSpouseNumberOfChildren').value;
                applicantDetailObject.Studying = document.getElementById('applicantSpouseNumberOfStudying').value;
                applicantDetailObject.Schools = document.getElementById('applicantSpouseChildrenSchools').value;
                var applicantDetailData = JSON.stringify(applicantDetailObject);

                $.ajax({
                    type: "PUT",
                    url: '/api/applicant/update/' + getUrlParameter("id"),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    data: applicantDetailData,
                    statusCode: {
                        200: function () {
                            toastr.success("Reloading the page...", "Update Successful");
                            window.setTimeout(function () {
                                location.reload();
                            }, 1500);
                        },
                        404: function () {
                            document.getElementById("btnSaveChanges").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                            document.getElementById("btnSaveChangesButtom").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";

                            toastr.error("The record that you're updating is not found in database", "Record Not Found");

                            $("#btnSaveChanges").prop("disabled", false);
                            $("#btnSaveChangesButtom").prop("disabled", false);
                            $("#btnPDF").prop("disabled", false);
                            $("#btnClose").prop("disabled", false);
                        },
                        400: function () {
                            document.getElementById("btnSaveChanges").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";
                            document.getElementById("btnSaveChangesButtom").innerHTML = "<i class='fa fa-save fa-fw'></i> Save Changes";

                            toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                            $("#btnSaveChanges").prop("disabled", false);
                            $("#btnSaveChangesButtom").prop("disabled", false);
                            $("#btnPDF").prop("disabled", false);
                            $("#btnClose").prop("disabled", false);
                        }
                    }
                });
            } else {
                toastr.error("Please fill out the empty fields.", "Invalid Entry");
            }
        }

        // get applicant real properties owned
        function getApplicantRealPropertiesOwned() {
            var applicantRealPropertiesOwnedArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/applicantRealPropertiesOwned/listByApplicantId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantRealPropertiesOwnedResult) {
                    if (applicantRealPropertiesOwnedResult.length > 0) {
                        for (i = 0; i < applicantRealPropertiesOwnedResult.length; i++) {
                            applicantRealPropertiesOwnedArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantRealPropertiesOwnedOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteApplicantRealPropertiesOwnedOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: applicantRealPropertiesOwnedResult[i]["Id"],
                                ApplicantId: applicantRealPropertiesOwnedResult[i]["ApplicantId"],
                                Applicant: applicantRealPropertiesOwnedResult[i]["Applicant"],
                                Real: applicantRealPropertiesOwnedResult[i]["Real"],
                                Location: applicantRealPropertiesOwnedResult[i]["Location"],
                                PresentValue: applicantRealPropertiesOwnedResult[i]["PresentValue"],
                                EcumberedTo: applicantRealPropertiesOwnedResult[i]["EcumberedTo"]
                            });
                        }
                    }
                }
            });
            return applicantRealPropertiesOwnedArray;
        }

        // create flexgrid for applicant real properties owned
        function createFlexGridApplicantRealPropertiesOwned() {
            applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

            // Flex Grid
            applicantRealPropertiesOwnedFlexGrid = new wijmo.grid.FlexGrid('#applicantRealPropertiesOwnedFlexGrid');
            applicantRealPropertiesOwnedFlexGrid.initialize({
                columns: [
                            {
                                "header": "Real Properties Owned",
                                "isReadOnly": true,
                                "visible": false,
                                "allowDragging": false,
                                "width": "*"
                            },
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Real",
                                "binding": "Real",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Present Value",
                                "binding": "PresentValue",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: applicantRealPropertiesOwnedCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
        }

        // add applicant real properties owned click event
        function btnAddApplicantRealPropertiesOwnedOnclick() {
            $("#applicantDetailRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);

            applicantRealPropertiesOwnedId = 0;
            document.getElementById('applicantDetailRealPropertiesOwnedReal').value = "";
            document.getElementById('applicantDetailRealPropertiesOwnedLocation').value = "";
            document.getElementById('applicantDetailRealPropertiesOwnedPresentValue').value = "";
            document.getElementById('applicantDetailRealPropertiesOwnedEcumberedTo').value = "";
        }

        // edit applicant real properties owned click event
        function editApplicantRealPropertiesOwnedOnclick() {
            $("#applicantDetailRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);

            applicantRealPropertiesOwnedCollectionView.editItem(applicantRealPropertiesOwnedCollectionView.currentItem);
            var applicantRealPropertiesOwned = applicantRealPropertiesOwnedCollectionView.currentEditItem;
            applicantRealPropertiesOwnedId = applicantRealPropertiesOwned.Id;
            document.getElementById('applicantDetailRealPropertiesOwnedReal').value = applicantRealPropertiesOwned.Real;
            document.getElementById('applicantDetailRealPropertiesOwnedLocation').value = applicantRealPropertiesOwned.Location;
            document.getElementById('applicantDetailRealPropertiesOwnedPresentValue').value = applicantRealPropertiesOwned.PresentValue;
            document.getElementById('applicantDetailRealPropertiesOwnedEcumberedTo').value = applicantRealPropertiesOwned.EcumberedTo;
        }

        // form input validation
        function inputValidationForApplicantRealPropertiesOwned() {
            var isValid = true;
            $('.requireApplicantRealPropertiesOwned').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save Applicant Detail Real Properties Owned Onclick
        function btnSaveApplicantDetailRealPropertiesOwnedOnclick() {
            if (inputValidationForApplicantRealPropertiesOwned()) {
                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", true);
                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", true);

                var applicantDetailRealPropertiesOwnedObject = new Object();
                applicantDetailRealPropertiesOwnedObject.ApplicantId = getUrlParameter("id");
                applicantDetailRealPropertiesOwnedObject.Real = document.getElementById('applicantDetailRealPropertiesOwnedReal').value;
                applicantDetailRealPropertiesOwnedObject.Location = document.getElementById('applicantDetailRealPropertiesOwnedLocation').value;
                applicantDetailRealPropertiesOwnedObject.PresentValue = document.getElementById('applicantDetailRealPropertiesOwnedPresentValue').value;
                applicantDetailRealPropertiesOwnedObject.EcumberedTo = document.getElementById('applicantDetailRealPropertiesOwnedEcumberedTo').value;
                var applicantDetailRealPropertiesOwnedData = JSON.stringify(applicantDetailRealPropertiesOwnedObject);

                if (applicantRealPropertiesOwnedId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/applicantRealPropertiesOwned/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailRealPropertiesOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("The data was successfully saved.", "Save Successful");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

                                // Flex Grid
                                applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                                applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/applicantRealPropertiesOwned/update/' + applicantRealPropertiesOwnedId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailRealPropertiesOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("The data was successfully updated.", "Update Successful");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

                                // Flex Grid
                                applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                                applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("The record that you're updating is not found in database", "Record Not Found");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                                $("#applicantDetailRealPropertiesOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailRealPropertiesOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailRealPropertiesOwned").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Please fill out the empty fields.", "Invalid Entry");
            }
        }

        // delete applicant real properties owned click event
        function deleteApplicantRealPropertiesOwnedOnclick() {
            $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "Yes";
            $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", false);
        }

        // confirm delete applicant real properties owned on click
        function btnConfirmDeleteApplicantDetailRealPropertiesOwnedOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", true);

            applicantRealPropertiesOwnedCollectionView.editItem(applicantRealPropertiesOwnedCollectionView.currentItem);
            var applicantRealPropertiesOwned = applicantRealPropertiesOwnedCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/applicantRealPropertiesOwned/delete/' + applicantRealPropertiesOwned.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("The data was successfully deleted.", "Delete Successful");

                        $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal("hide");

                        applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());

                        // Flex Grid
                        applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
                        applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("The record that you're deleting is not found in database", "Record Not Found");

                        $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "Yes";
                        $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                        $("#deleteConfirmationApplicantDetailRealPropertiesOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailRealPropertiesOwned").innerHTML = "Yes";
                        $("#btnConfirmDeleteApplicantDetailRealPropertiesOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailRealPropertiesOwned").prop("disabled", false);
                    }
                }
            });
        }

        // get appliance owned
        function getApplicantApplianceOwned() {
            var applicantApplianceOwnedArray = new wijmo.collections.ObservableArray;
            $.ajax({
                url: '/api/applicantApplianceOwned/listByApplicantId/' + getUrlParameter("id"),
                cache: false,
                type: 'GET',
                contentType: 'application/json; charset=utf-8',
                success: function (applicantApplianceOwnedResult) {
                    if (applicantApplianceOwnedResult.length > 0) {
                        for (i = 0; i < applicantApplianceOwnedResult.length; i++) {
                            applicantApplianceOwnedArray.push({
                                EditButton: "<button class='btn btn-primary btn-xs btn-block' onclick='editApplicantApplianceOwnedOnclick()'><i class='fa fa-edit fa-fw'></i> Edit</button>",
                                DeleteButton: "<button class='btn btn-danger btn-xs btn-block'  onclick='deleteApplicantApplianceOwnedOnclick()'><i class='fa fa-trash fa-fw'></i> Delete</button>",
                                Id: applicantApplianceOwnedResult[i]["Id"],
                                ApplicantId: applicantApplianceOwnedResult[i]["ApplicantId"],
                                Applicant: applicantApplianceOwnedResult[i]["Applicant"],
                                ApplianceBrand: applicantApplianceOwnedResult[i]["ApplianceBrand"],
                                PresentValue: applicantApplianceOwnedResult[i]["PresentValue"]
                            });
                        }
                    }
                }
            });
            return applicantApplianceOwnedArray;
        }

        // create flexgrid for applicant appliance owned
        function createFlexGridApplicantApplianceOwned() {
            applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());

            // Flex Grid
            applicantApplianceOwnedFlexGrid = new wijmo.grid.FlexGrid('#applicantApplianceOwnedFlexGrid');
            applicantApplianceOwnedFlexGrid.initialize({
                columns: [
                            {
                                "header": "Appliance Owned",
                                "isReadOnly": true,
                                "visible": false,
                                "allowDragging": false,
                                "width": "*"
                            },
                            {
                                "header": "Edit",
                                "binding": "EditButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Delete",
                                "binding": "DeleteButton",
                                "width": 80,
                                "align": "center",
                                "allowResizing": false,
                                "isContentHtml": true
                            },
                            {
                                "header": "Appliance Brand",
                                "binding": "ApplianceBrand",
                                "allowSorting": true,
                                "width": "2*",
                            },
                            {
                                "header": "Present Value",
                                "binding": "PresentValue",
                                "allowSorting": true,
                                "width": "2*"
                            }
                ],
                autoGenerateColumns: false,
                itemsSource: applicantApplianceOwnedCollectionView,
                isReadOnly: true,
                autoSizeMode: wijmo.grid.AutoSizeMode.Both,
                allowDragging: wijmo.grid.AllowDragging.None,
                selectionMode: wijmo.grid.SelectionMode.Row
            });

            applicantApplianceOwnedFlexGrid.trackChanges = true;
        }

        // add appliance owned 
        function btnAddApplicantApplianceOwnedOnclick() {
            $("#applicantDetailApplianceOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);

            applicantApplianceOwnedId = 0;
            document.getElementById('applicantDetailApplianceOwnedBrand').value = "";
            document.getElementById('applicantDetailApplianceOwnedPresentValue').value = "";
        }

        // edit appliance owned 
        function editApplicantApplianceOwnedOnclick() {
            $("#applicantDetailApplianceOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
            $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
            $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);

            applicantApplianceOwnedCollectionView.editItem(applicantApplianceOwnedCollectionView.currentItem);
            var applicantApplianceOwned = applicantApplianceOwnedCollectionView.currentEditItem;
            applicantApplianceOwnedId = applicantApplianceOwned.Id;
            document.getElementById('applicantDetailApplianceOwnedBrand').value = applicantApplianceOwned.ApplianceBrand;
            document.getElementById('applicantDetailApplianceOwnedPresentValue').value = applicantApplianceOwned.PresentValue;
        }

        // form input validation
        function inputValidationForApplicantApplianceOwned() {
            var isValid = true;
            $('.requireApplicantApplianceOwned').each(function () {
                if ($.trim($(this).val()) == '') {
                    isValid = false;
                    $(this).css({
                        "border": "1px solid red"
                    });
                } else {
                    $(this).css({
                        "border": "",
                    });
                }
            });

            return isValid;
        }

        // save appliance owned 
        function btnSaveApplicantDetailApplianceOwnedOnclick() {
            if (inputValidationForApplicantApplianceOwned()) {
                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Saving";
                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", true);
                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", true);

                var applicantDetailApplianceOwnedObject = new Object();
                applicantDetailApplianceOwnedObject.ApplicantId = getUrlParameter("id");
                applicantDetailApplianceOwnedObject.ApplianceBrand = document.getElementById('applicantDetailApplianceOwnedBrand').value;
                applicantDetailApplianceOwnedObject.PresentValue = document.getElementById('applicantDetailApplianceOwnedPresentValue').value;
                var applicantDetailApplianceOwnedData = JSON.stringify(applicantDetailApplianceOwnedObject);

                if (applicantApplianceOwnedId == 0) {
                    $.ajax({
                        type: "POST",
                        url: '/api/applicantApplianceOwned/add',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailApplianceOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("The data was successfully saved.", "Save Successful");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
                                applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
                                applicantApplianceOwnedFlexGrid.trackChanges = true;
                            },
                            400: function () {
                                toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            }
                        }
                    });
                } else {
                    $.ajax({
                        type: "PUT",
                        url: '/api/applicantApplianceOwned/update/' + applicantApplianceOwnedId,
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: applicantDetailApplianceOwnedData,
                        statusCode: {
                            200: function () {
                                toastr.success("The data was successfully updated.", "Update Successful");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
                                applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
                                applicantApplianceOwnedFlexGrid.trackChanges = true;
                            },
                            404: function () {
                                toastr.error("The record that you're updating is not found in database", "Record Not Found");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            },
                            400: function () {
                                toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                                $("#applicantDetailApplianceOwnedModal").modal("hide");

                                document.getElementById("btnSaveApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-save fa-fw'></i> Save";
                                $("#btnSaveApplicantDetailApplianceOwned").prop("disabled", false);
                                $("#btnCloseApplicantDetailApplianceOwned").prop("disabled", false);
                            }
                        }
                    });
                }
            } else {
                toastr.error("Please fill out the empty fields.", "Invalid Entry");
            }
        }

        // delete appliance owned 
        function deleteApplicantApplianceOwnedOnclick() {
            $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal({
                "show": true,
                "backdrop": "static"
            });

            document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "Yes";
            $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", false);
            $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", false);
        }

        // confirm delete  appliance owned 
        function btnConfirmDeleteApplicantDetailApplianceOwnedOnclick() {
            document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "<i class='fa fa-spinner fa-spin fa-fw'></i> Deleting";
            $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", true);
            $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", true);

            applicantApplianceOwnedCollectionView.editItem(applicantApplianceOwnedCollectionView.currentItem);
            var applicantApplianceOwned = applicantApplianceOwnedCollectionView.currentEditItem;

            $.ajax({
                type: "DELETE",
                url: '/api/applicantApplianceOwned/delete/' + applicantApplianceOwned.Id,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                statusCode: {
                    200: function () {
                        toastr.success("The data was successfully deleted.", "Delete Successful");

                        $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal("hide");

                        applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
                        applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
                        applicantApplianceOwnedFlexGrid.trackChanges = true;
                    },
                    404: function () {
                        toastr.error("The record that you're deleting is not found in database", "Record Not Found");

                        $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "Yes";
                        $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", false);
                    },
                    400: function () {
                        toastr.error("Invalid entry or Internal Server Error occured.", "Bad Request");

                        $("#deleteConfirmationApplicantDetailApplianceOwnedModal").modal("hide");

                        document.getElementById("btnConfirmDeleteApplicantDetailApplianceOwned").innerHTML = "Yes";
                        $("#btnConfirmDeleteApplicantDetailApplianceOwned").prop("disabled", false);
                        $("#btnCloseDeleteModalApplicantDetailApplianceOwned").prop("disabled", false);
                    }
                }
            });
        }

        // on load function
        window.onload = function () {
            NProgress.start();
            toastrModification();
            getApplicantDetail();
        }

        // appliance owned pills and tabs
        $('#appplianceOwnedPillTab').click(function () {
            $("#realPropertiesOwned").hide();
            $("#ApplianceOwned").show();
            
            applicantApplianceOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantApplianceOwned());
            applicantApplianceOwnedFlexGrid.itemsSource = applicantApplianceOwnedCollectionView;
            applicantApplianceOwnedFlexGrid.trackChanges = true;
        });

        // appliance real properties owned pills and tabs
        $('#realPropertiesOwnedPillTab').click(function () {
            $("#realPropertiesOwned").show();
            $("#ApplianceOwned").hide();

            applicantRealPropertiesOwnedCollectionView = new wijmo.collections.CollectionView(getApplicantRealPropertiesOwned());
            applicantRealPropertiesOwnedFlexGrid.itemsSource = applicantRealPropertiesOwnedCollectionView;
            applicantRealPropertiesOwnedFlexGrid.trackChanges = true;
        });

        // Applicant key event - full name
        $('#applicantFullName').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - city address
        $('#applicantCityAddress').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - province address
        $('#applicantProvinceAddress').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - length of stay
        $('#applicantLengthOfStay').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business address
        $('#applicantBusinessAddress').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business karatula name
        $('#applicantBusinessKaratulaName').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business telephone number
        $('#applicantBusinessTelephoneNumber').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business years
        $('#applicantBusinessYears').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business merchandise
        $('#applicantBBusinessMerchandise').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business values of stocks
        $('#applicantValuesOfStocks').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business beginning capital
        $('#applicantBusinessBeginningCapital').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business sales low period
        $('#applicantSalesLowPeriod').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business lowest daily sales
        $('#applicantLowestDailySales').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - business average daily sales
        $('#applicantAverageDailySales').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - employed company
        $('#applicantEmployedCompanyName').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - employed address
        $('#applicantEmployedCompanyAddress').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - employed position occupied
        $('#applicantEmployedPositionOccupied').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - employed length of service
        $('#applicantEmployedLengthOfService').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - employed tel number
        $('#applicantEmployedTelephoneNumber').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse name
        $('#applicantSpouseName').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse employer or business
        $('#applicantSpouseEmployerOrBusiness').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse employer or business add
        $('#applicantSpouseBusinessAddress').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse business telephone number
        $('#applicantSpouseTelephoneNumber').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse position occupied
        $('#applicantSpousePositionOccupied').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse monthly salary
        $('#applicantSpouseMonthlySalary').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse length of service
        $('#applicantSpouseLengthOfService').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse number of children
        $('#applicantSpouseNumberOfChildren').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse number of children are studying
        $('#applicantSpouseNumberOfStudying').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });

        // Applicant key event - applicant spouse childrens schools
        $('#applicantSpouseChildrenSchools').keyup(function () {
            if ($.trim($(this).val()) == '') {
                $(this).css({
                    "border": "1px solid red"
                });
            } else {
                $(this).css({
                    "border": "",
                });
            }
        });
    </script>
</body>
</html>