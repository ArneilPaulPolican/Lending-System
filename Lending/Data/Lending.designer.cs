#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lending.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="lending")]
	public partial class LendingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAspNetRole(AspNetRole instance);
    partial void UpdateAspNetRole(AspNetRole instance);
    partial void DeleteAspNetRole(AspNetRole instance);
    partial void InserttblResidenceType(tblResidenceType instance);
    partial void UpdatetblResidenceType(tblResidenceType instance);
    partial void DeletetblResidenceType(tblResidenceType instance);
    partial void InsertAspNetUserClaim(AspNetUserClaim instance);
    partial void UpdateAspNetUserClaim(AspNetUserClaim instance);
    partial void DeleteAspNetUserClaim(AspNetUserClaim instance);
    partial void InsertAspNetUserLogin(AspNetUserLogin instance);
    partial void UpdateAspNetUserLogin(AspNetUserLogin instance);
    partial void DeleteAspNetUserLogin(AspNetUserLogin instance);
    partial void InsertAspNetUserRole(AspNetUserRole instance);
    partial void UpdateAspNetUserRole(AspNetUserRole instance);
    partial void DeleteAspNetUserRole(AspNetUserRole instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InserttblApplicant(tblApplicant instance);
    partial void UpdatetblApplicant(tblApplicant instance);
    partial void DeletetblApplicant(tblApplicant instance);
    partial void InserttblApplicantApplianceOwned(tblApplicantApplianceOwned instance);
    partial void UpdatetblApplicantApplianceOwned(tblApplicantApplianceOwned instance);
    partial void DeletetblApplicantApplianceOwned(tblApplicantApplianceOwned instance);
    partial void InserttblApplicantBusinessIncomeInformation(tblApplicantBusinessIncomeInformation instance);
    partial void UpdatetblApplicantBusinessIncomeInformation(tblApplicantBusinessIncomeInformation instance);
    partial void DeletetblApplicantBusinessIncomeInformation(tblApplicantBusinessIncomeInformation instance);
    partial void InserttblApplicantEmployeeInformation(tblApplicantEmployeeInformation instance);
    partial void UpdatetblApplicantEmployeeInformation(tblApplicantEmployeeInformation instance);
    partial void DeletetblApplicantEmployeeInformation(tblApplicantEmployeeInformation instance);
    partial void InserttblApplicantRealPropertiesOwned(tblApplicantRealPropertiesOwned instance);
    partial void UpdatetblApplicantRealPropertiesOwned(tblApplicantRealPropertiesOwned instance);
    partial void DeletetblApplicantRealPropertiesOwned(tblApplicantRealPropertiesOwned instance);
    partial void InserttblApplicantSpouse(tblApplicantSpouse instance);
    partial void UpdatetblApplicantSpouse(tblApplicantSpouse instance);
    partial void DeletetblApplicantSpouse(tblApplicantSpouse instance);
    partial void InserttblCivilStatus(tblCivilStatus instance);
    partial void UpdatetblCivilStatus(tblCivilStatus instance);
    partial void DeletetblCivilStatus(tblCivilStatus instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    #endregion
		
		public LendingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LendingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LendingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LendingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LendingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AspNetRole> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRole>();
			}
		}
		
		public System.Data.Linq.Table<tblResidenceType> tblResidenceTypes
		{
			get
			{
				return this.GetTable<tblResidenceType>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaim>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogin>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRole>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicant> tblApplicants
		{
			get
			{
				return this.GetTable<tblApplicant>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicantApplianceOwned> tblApplicantApplianceOwneds
		{
			get
			{
				return this.GetTable<tblApplicantApplianceOwned>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicantBusinessIncomeInformation> tblApplicantBusinessIncomeInformations
		{
			get
			{
				return this.GetTable<tblApplicantBusinessIncomeInformation>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicantEmployeeInformation> tblApplicantEmployeeInformations
		{
			get
			{
				return this.GetTable<tblApplicantEmployeeInformation>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicantRealPropertiesOwned> tblApplicantRealPropertiesOwneds
		{
			get
			{
				return this.GetTable<tblApplicantRealPropertiesOwned>();
			}
		}
		
		public System.Data.Linq.Table<tblApplicantSpouse> tblApplicantSpouses
		{
			get
			{
				return this.GetTable<tblApplicantSpouse>();
			}
		}
		
		public System.Data.Linq.Table<tblCivilStatus> tblCivilStatus
		{
			get
			{
				return this.GetTable<tblCivilStatus>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRole()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblResidenceType")]
	public partial class tblResidenceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ResidenceType;
		
		private int _CreatedByUserId;
		
		private System.DateTime _CreatedDateTime;
		
		private int _UpdatedByUserId;
		
		private System.DateTime _UpdatedDateTime;
		
		private EntitySet<tblApplicant> _tblApplicants;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<tblUser> _tblUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnResidenceTypeChanging(string value);
    partial void OnResidenceTypeChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnUpdatedByUserIdChanging(int value);
    partial void OnUpdatedByUserIdChanged();
    partial void OnUpdatedDateTimeChanging(System.DateTime value);
    partial void OnUpdatedDateTimeChanged();
    #endregion
		
		public tblResidenceType()
		{
			this._tblApplicants = new EntitySet<tblApplicant>(new Action<tblApplicant>(this.attach_tblApplicants), new Action<tblApplicant>(this.detach_tblApplicants));
			this._tblUser = default(EntityRef<tblUser>);
			this._tblUser1 = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ResidenceType
		{
			get
			{
				return this._ResidenceType;
			}
			set
			{
				if ((this._ResidenceType != value))
				{
					this.OnResidenceTypeChanging(value);
					this.SendPropertyChanging();
					this._ResidenceType = value;
					this.SendPropertyChanged("ResidenceType");
					this.OnResidenceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedByUserId", DbType="Int NOT NULL")]
		public int UpdatedByUserId
		{
			get
			{
				return this._UpdatedByUserId;
			}
			set
			{
				if ((this._UpdatedByUserId != value))
				{
					if (this._tblUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedByUserId = value;
					this.SendPropertyChanged("UpdatedByUserId");
					this.OnUpdatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDateTime
		{
			get
			{
				return this._UpdatedDateTime;
			}
			set
			{
				if ((this._UpdatedDateTime != value))
				{
					this.OnUpdatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDateTime = value;
					this.SendPropertyChanged("UpdatedDateTime");
					this.OnUpdatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblResidenceType_tblApplicant", Storage="_tblApplicants", ThisKey="Id", OtherKey="ResidenceTypeId")]
		public EntitySet<tblApplicant> tblApplicants
		{
			get
			{
				return this._tblApplicants;
			}
			set
			{
				this._tblApplicants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblResidenceType", Storage="_tblUser", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblResidenceTypes.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblResidenceTypes.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblResidenceType1", Storage="_tblUser1", ThisKey="UpdatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public tblUser tblUser1
		{
			get
			{
				return this._tblUser1.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser1.Entity;
				if (((previousValue != value) 
							|| (this._tblUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser1.Entity = null;
						previousValue.tblResidenceTypes1.Remove(this);
					}
					this._tblUser1.Entity = value;
					if ((value != null))
					{
						value.tblResidenceTypes1.Add(this);
						this._UpdatedByUserId = value.Id;
					}
					else
					{
						this._UpdatedByUserId = default(int);
					}
					this.SendPropertyChanged("tblUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblApplicants(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblResidenceType = this;
		}
		
		private void detach_tblApplicants(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblResidenceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaim()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private string _UserId;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogin()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRole> _AspNetRole;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRole()
		{
			this._AspNetRole = default(EntityRef<AspNetRole>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRole_AspNetUserRole", Storage="_AspNetRole", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRole AspNetRole
		{
			get
			{
				return this._AspNetRole.Entity;
			}
			set
			{
				AspNetRole previousValue = this._AspNetRole.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRole.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRole.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRole");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUser", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private System.Nullable<bool> _EmailConfirmed;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private System.Nullable<bool> _PhoneNumberConfirmed;
		
		private System.Nullable<bool> _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private System.Nullable<bool> _LockoutEnabled;
		
		private System.Nullable<int> _AccessFailedCount;
		
		private EntitySet<AspNetUserClaim> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogin> _AspNetUserLogins;
		
		private EntitySet<AspNetUserRole> _AspNetUserRoles;
		
		private EntitySet<tblUser> _tblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(System.Nullable<bool> value);
    partial void OnEmailConfirmedChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(System.Nullable<bool> value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(System.Nullable<bool> value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(System.Nullable<bool> value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(System.Nullable<int> value);
    partial void OnAccessFailedCountChanged();
    #endregion
		
		public AspNetUser()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaim>(new Action<AspNetUserClaim>(this.attach_AspNetUserClaims), new Action<AspNetUserClaim>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogin>(new Action<AspNetUserLogin>(this.attach_AspNetUserLogins), new Action<AspNetUserLogin>(this.detach_AspNetUserLogins));
			this._AspNetUserRoles = new EntitySet<AspNetUserRole>(new Action<AspNetUserRole>(this.attach_AspNetUserRoles), new Action<AspNetUserRole>(this.detach_AspNetUserRoles));
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit")]
		public System.Nullable<bool> EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit")]
		public System.Nullable<bool> PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit")]
		public System.Nullable<bool> TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit")]
		public System.Nullable<bool> LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int")]
		public System.Nullable<int> AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserClaim", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaim> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserLogin", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogin> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_AspNetUserRole", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRole> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_tblUser", Storage="_tblUsers", ThisKey="Id", OtherKey="AspUserId")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaim entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogin entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRole entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicant")]
	public partial class tblApplicant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ApplicantCode;
		
		private string _FullName;
		
		private System.DateTime _BirthDate;
		
		private int _CivilStatusId;
		
		private string _CityAddress;
		
		private string _ProvinceAddress;
		
		private int _ResidenceTypeId;
		
		private decimal _LengthOfStay;
		
		private int _CreatedByUserId;
		
		private System.DateTime _CreatedDateTime;
		
		private int _UpdatedByUserId;
		
		private System.DateTime _UpdatedDateTime;
		
		private EntitySet<tblApplicantApplianceOwned> _tblApplicantApplianceOwneds;
		
		private EntitySet<tblApplicantBusinessIncomeInformation> _tblApplicantBusinessIncomeInformations;
		
		private EntitySet<tblApplicantEmployeeInformation> _tblApplicantEmployeeInformations;
		
		private EntitySet<tblApplicantRealPropertiesOwned> _tblApplicantRealPropertiesOwneds;
		
		private EntityRef<tblResidenceType> _tblResidenceType;
		
		private EntityRef<tblCivilStatus> _tblCivilStatus;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<tblUser> _tblUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicantCodeChanging(string value);
    partial void OnApplicantCodeChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnBirthDateChanging(System.DateTime value);
    partial void OnBirthDateChanged();
    partial void OnCivilStatusIdChanging(int value);
    partial void OnCivilStatusIdChanged();
    partial void OnCityAddressChanging(string value);
    partial void OnCityAddressChanged();
    partial void OnProvinceAddressChanging(string value);
    partial void OnProvinceAddressChanged();
    partial void OnResidenceTypeIdChanging(int value);
    partial void OnResidenceTypeIdChanged();
    partial void OnLengthOfStayChanging(decimal value);
    partial void OnLengthOfStayChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnUpdatedByUserIdChanging(int value);
    partial void OnUpdatedByUserIdChanged();
    partial void OnUpdatedDateTimeChanging(System.DateTime value);
    partial void OnUpdatedDateTimeChanged();
    #endregion
		
		public tblApplicant()
		{
			this._tblApplicantApplianceOwneds = new EntitySet<tblApplicantApplianceOwned>(new Action<tblApplicantApplianceOwned>(this.attach_tblApplicantApplianceOwneds), new Action<tblApplicantApplianceOwned>(this.detach_tblApplicantApplianceOwneds));
			this._tblApplicantBusinessIncomeInformations = new EntitySet<tblApplicantBusinessIncomeInformation>(new Action<tblApplicantBusinessIncomeInformation>(this.attach_tblApplicantBusinessIncomeInformations), new Action<tblApplicantBusinessIncomeInformation>(this.detach_tblApplicantBusinessIncomeInformations));
			this._tblApplicantEmployeeInformations = new EntitySet<tblApplicantEmployeeInformation>(new Action<tblApplicantEmployeeInformation>(this.attach_tblApplicantEmployeeInformations), new Action<tblApplicantEmployeeInformation>(this.detach_tblApplicantEmployeeInformations));
			this._tblApplicantRealPropertiesOwneds = new EntitySet<tblApplicantRealPropertiesOwned>(new Action<tblApplicantRealPropertiesOwned>(this.attach_tblApplicantRealPropertiesOwneds), new Action<tblApplicantRealPropertiesOwned>(this.detach_tblApplicantRealPropertiesOwneds));
			this._tblResidenceType = default(EntityRef<tblResidenceType>);
			this._tblCivilStatus = default(EntityRef<tblCivilStatus>);
			this._tblUser = default(EntityRef<tblUser>);
			this._tblUser1 = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ApplicantCode
		{
			get
			{
				return this._ApplicantCode;
			}
			set
			{
				if ((this._ApplicantCode != value))
				{
					this.OnApplicantCodeChanging(value);
					this.SendPropertyChanging();
					this._ApplicantCode = value;
					this.SendPropertyChanged("ApplicantCode");
					this.OnApplicantCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="DateTime NOT NULL")]
		public System.DateTime BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilStatusId", DbType="Int NOT NULL")]
		public int CivilStatusId
		{
			get
			{
				return this._CivilStatusId;
			}
			set
			{
				if ((this._CivilStatusId != value))
				{
					if (this._tblCivilStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCivilStatusIdChanging(value);
					this.SendPropertyChanging();
					this._CivilStatusId = value;
					this.SendPropertyChanged("CivilStatusId");
					this.OnCivilStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityAddress", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CityAddress
		{
			get
			{
				return this._CityAddress;
			}
			set
			{
				if ((this._CityAddress != value))
				{
					this.OnCityAddressChanging(value);
					this.SendPropertyChanging();
					this._CityAddress = value;
					this.SendPropertyChanged("CityAddress");
					this.OnCityAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceAddress", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProvinceAddress
		{
			get
			{
				return this._ProvinceAddress;
			}
			set
			{
				if ((this._ProvinceAddress != value))
				{
					this.OnProvinceAddressChanging(value);
					this.SendPropertyChanging();
					this._ProvinceAddress = value;
					this.SendPropertyChanged("ProvinceAddress");
					this.OnProvinceAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceTypeId", DbType="Int NOT NULL")]
		public int ResidenceTypeId
		{
			get
			{
				return this._ResidenceTypeId;
			}
			set
			{
				if ((this._ResidenceTypeId != value))
				{
					if (this._tblResidenceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidenceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResidenceTypeId = value;
					this.SendPropertyChanged("ResidenceTypeId");
					this.OnResidenceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LengthOfStay", DbType="Decimal(18,0) NOT NULL")]
		public decimal LengthOfStay
		{
			get
			{
				return this._LengthOfStay;
			}
			set
			{
				if ((this._LengthOfStay != value))
				{
					this.OnLengthOfStayChanging(value);
					this.SendPropertyChanging();
					this._LengthOfStay = value;
					this.SendPropertyChanged("LengthOfStay");
					this.OnLengthOfStayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedByUserId", DbType="Int NOT NULL")]
		public int UpdatedByUserId
		{
			get
			{
				return this._UpdatedByUserId;
			}
			set
			{
				if ((this._UpdatedByUserId != value))
				{
					if (this._tblUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedByUserId = value;
					this.SendPropertyChanged("UpdatedByUserId");
					this.OnUpdatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDateTime
		{
			get
			{
				return this._UpdatedDateTime;
			}
			set
			{
				if ((this._UpdatedDateTime != value))
				{
					this.OnUpdatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDateTime = value;
					this.SendPropertyChanged("UpdatedDateTime");
					this.OnUpdatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantApplianceOwned", Storage="_tblApplicantApplianceOwneds", ThisKey="Id", OtherKey="ApplicantId")]
		public EntitySet<tblApplicantApplianceOwned> tblApplicantApplianceOwneds
		{
			get
			{
				return this._tblApplicantApplianceOwneds;
			}
			set
			{
				this._tblApplicantApplianceOwneds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantBusinessIncomeInformation", Storage="_tblApplicantBusinessIncomeInformations", ThisKey="Id", OtherKey="ApplicantId")]
		public EntitySet<tblApplicantBusinessIncomeInformation> tblApplicantBusinessIncomeInformations
		{
			get
			{
				return this._tblApplicantBusinessIncomeInformations;
			}
			set
			{
				this._tblApplicantBusinessIncomeInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantEmployeeInformation", Storage="_tblApplicantEmployeeInformations", ThisKey="Id", OtherKey="ApplicantId")]
		public EntitySet<tblApplicantEmployeeInformation> tblApplicantEmployeeInformations
		{
			get
			{
				return this._tblApplicantEmployeeInformations;
			}
			set
			{
				this._tblApplicantEmployeeInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantRealPropertiesOwned", Storage="_tblApplicantRealPropertiesOwneds", ThisKey="Id", OtherKey="ApplicantId")]
		public EntitySet<tblApplicantRealPropertiesOwned> tblApplicantRealPropertiesOwneds
		{
			get
			{
				return this._tblApplicantRealPropertiesOwneds;
			}
			set
			{
				this._tblApplicantRealPropertiesOwneds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblResidenceType_tblApplicant", Storage="_tblResidenceType", ThisKey="ResidenceTypeId", OtherKey="Id", IsForeignKey=true)]
		public tblResidenceType tblResidenceType
		{
			get
			{
				return this._tblResidenceType.Entity;
			}
			set
			{
				tblResidenceType previousValue = this._tblResidenceType.Entity;
				if (((previousValue != value) 
							|| (this._tblResidenceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblResidenceType.Entity = null;
						previousValue.tblApplicants.Remove(this);
					}
					this._tblResidenceType.Entity = value;
					if ((value != null))
					{
						value.tblApplicants.Add(this);
						this._ResidenceTypeId = value.Id;
					}
					else
					{
						this._ResidenceTypeId = default(int);
					}
					this.SendPropertyChanged("tblResidenceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCivilStatus_tblApplicant", Storage="_tblCivilStatus", ThisKey="CivilStatusId", OtherKey="Id", IsForeignKey=true)]
		public tblCivilStatus tblCivilStatus
		{
			get
			{
				return this._tblCivilStatus.Entity;
			}
			set
			{
				tblCivilStatus previousValue = this._tblCivilStatus.Entity;
				if (((previousValue != value) 
							|| (this._tblCivilStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCivilStatus.Entity = null;
						previousValue.tblApplicants.Remove(this);
					}
					this._tblCivilStatus.Entity = value;
					if ((value != null))
					{
						value.tblApplicants.Add(this);
						this._CivilStatusId = value.Id;
					}
					else
					{
						this._CivilStatusId = default(int);
					}
					this.SendPropertyChanged("tblCivilStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblApplicant", Storage="_tblUser", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblApplicants.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblApplicants.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblApplicant1", Storage="_tblUser1", ThisKey="UpdatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public tblUser tblUser1
		{
			get
			{
				return this._tblUser1.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser1.Entity;
				if (((previousValue != value) 
							|| (this._tblUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser1.Entity = null;
						previousValue.tblApplicants1.Remove(this);
					}
					this._tblUser1.Entity = value;
					if ((value != null))
					{
						value.tblApplicants1.Add(this);
						this._UpdatedByUserId = value.Id;
					}
					else
					{
						this._UpdatedByUserId = default(int);
					}
					this.SendPropertyChanged("tblUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblApplicantApplianceOwneds(tblApplicantApplianceOwned entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = this;
		}
		
		private void detach_tblApplicantApplianceOwneds(tblApplicantApplianceOwned entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = null;
		}
		
		private void attach_tblApplicantBusinessIncomeInformations(tblApplicantBusinessIncomeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = this;
		}
		
		private void detach_tblApplicantBusinessIncomeInformations(tblApplicantBusinessIncomeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = null;
		}
		
		private void attach_tblApplicantEmployeeInformations(tblApplicantEmployeeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = this;
		}
		
		private void detach_tblApplicantEmployeeInformations(tblApplicantEmployeeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = null;
		}
		
		private void attach_tblApplicantRealPropertiesOwneds(tblApplicantRealPropertiesOwned entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = this;
		}
		
		private void detach_tblApplicantRealPropertiesOwneds(tblApplicantRealPropertiesOwned entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicantApplianceOwned")]
	public partial class tblApplicantApplianceOwned : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ApplicantId;
		
		private string _ApplianceBrand;
		
		private string _PresentValue;
		
		private EntityRef<tblApplicant> _tblApplicant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicantIdChanging(int value);
    partial void OnApplicantIdChanged();
    partial void OnApplianceBrandChanging(string value);
    partial void OnApplianceBrandChanged();
    partial void OnPresentValueChanging(string value);
    partial void OnPresentValueChanged();
    #endregion
		
		public tblApplicantApplianceOwned()
		{
			this._tblApplicant = default(EntityRef<tblApplicant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantId", DbType="Int NOT NULL")]
		public int ApplicantId
		{
			get
			{
				return this._ApplicantId;
			}
			set
			{
				if ((this._ApplicantId != value))
				{
					if (this._tblApplicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantId = value;
					this.SendPropertyChanged("ApplicantId");
					this.OnApplicantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplianceBrand", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ApplianceBrand
		{
			get
			{
				return this._ApplianceBrand;
			}
			set
			{
				if ((this._ApplianceBrand != value))
				{
					this.OnApplianceBrandChanging(value);
					this.SendPropertyChanging();
					this._ApplianceBrand = value;
					this.SendPropertyChanged("ApplianceBrand");
					this.OnApplianceBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentValue", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PresentValue
		{
			get
			{
				return this._PresentValue;
			}
			set
			{
				if ((this._PresentValue != value))
				{
					this.OnPresentValueChanging(value);
					this.SendPropertyChanging();
					this._PresentValue = value;
					this.SendPropertyChanged("PresentValue");
					this.OnPresentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantApplianceOwned", Storage="_tblApplicant", ThisKey="ApplicantId", OtherKey="Id", IsForeignKey=true)]
		public tblApplicant tblApplicant
		{
			get
			{
				return this._tblApplicant.Entity;
			}
			set
			{
				tblApplicant previousValue = this._tblApplicant.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicant.Entity = null;
						previousValue.tblApplicantApplianceOwneds.Remove(this);
					}
					this._tblApplicant.Entity = value;
					if ((value != null))
					{
						value.tblApplicantApplianceOwneds.Add(this);
						this._ApplicantId = value.Id;
					}
					else
					{
						this._ApplicantId = default(int);
					}
					this.SendPropertyChanged("tblApplicant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicantBusinessIncomeInformation")]
	public partial class tblApplicantBusinessIncomeInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ApplicantId;
		
		private System.Nullable<int> _ApplicantSpouseId;
		
		private string _BusinessAddress;
		
		private string _KaratulaName;
		
		private string _TelephoneNumber;
		
		private decimal _BusinessYear;
		
		private string _Merchandise;
		
		private decimal _StockValues;
		
		private decimal _BeginningCapital;
		
		private string _LowSalesPeriod;
		
		private decimal _LowestDailySales;
		
		private decimal _AverageDailySales;
		
		private EntityRef<tblApplicant> _tblApplicant;
		
		private EntityRef<tblApplicantSpouse> _tblApplicantSpouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicantIdChanging(int value);
    partial void OnApplicantIdChanged();
    partial void OnApplicantSpouseIdChanging(System.Nullable<int> value);
    partial void OnApplicantSpouseIdChanged();
    partial void OnBusinessAddressChanging(string value);
    partial void OnBusinessAddressChanged();
    partial void OnKaratulaNameChanging(string value);
    partial void OnKaratulaNameChanged();
    partial void OnTelephoneNumberChanging(string value);
    partial void OnTelephoneNumberChanged();
    partial void OnBusinessYearChanging(decimal value);
    partial void OnBusinessYearChanged();
    partial void OnMerchandiseChanging(string value);
    partial void OnMerchandiseChanged();
    partial void OnStockValuesChanging(decimal value);
    partial void OnStockValuesChanged();
    partial void OnBeginningCapitalChanging(decimal value);
    partial void OnBeginningCapitalChanged();
    partial void OnLowSalesPeriodChanging(string value);
    partial void OnLowSalesPeriodChanged();
    partial void OnLowestDailySalesChanging(decimal value);
    partial void OnLowestDailySalesChanged();
    partial void OnAverageDailySalesChanging(decimal value);
    partial void OnAverageDailySalesChanged();
    #endregion
		
		public tblApplicantBusinessIncomeInformation()
		{
			this._tblApplicant = default(EntityRef<tblApplicant>);
			this._tblApplicantSpouse = default(EntityRef<tblApplicantSpouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantId", DbType="Int NOT NULL")]
		public int ApplicantId
		{
			get
			{
				return this._ApplicantId;
			}
			set
			{
				if ((this._ApplicantId != value))
				{
					if (this._tblApplicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantId = value;
					this.SendPropertyChanged("ApplicantId");
					this.OnApplicantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantSpouseId", DbType="Int")]
		public System.Nullable<int> ApplicantSpouseId
		{
			get
			{
				return this._ApplicantSpouseId;
			}
			set
			{
				if ((this._ApplicantSpouseId != value))
				{
					if (this._tblApplicantSpouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantSpouseIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantSpouseId = value;
					this.SendPropertyChanged("ApplicantSpouseId");
					this.OnApplicantSpouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessAddress", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BusinessAddress
		{
			get
			{
				return this._BusinessAddress;
			}
			set
			{
				if ((this._BusinessAddress != value))
				{
					this.OnBusinessAddressChanging(value);
					this.SendPropertyChanging();
					this._BusinessAddress = value;
					this.SendPropertyChanged("BusinessAddress");
					this.OnBusinessAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KaratulaName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string KaratulaName
		{
			get
			{
				return this._KaratulaName;
			}
			set
			{
				if ((this._KaratulaName != value))
				{
					this.OnKaratulaNameChanging(value);
					this.SendPropertyChanging();
					this._KaratulaName = value;
					this.SendPropertyChanged("KaratulaName");
					this.OnKaratulaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelephoneNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TelephoneNumber
		{
			get
			{
				return this._TelephoneNumber;
			}
			set
			{
				if ((this._TelephoneNumber != value))
				{
					this.OnTelephoneNumberChanging(value);
					this.SendPropertyChanging();
					this._TelephoneNumber = value;
					this.SendPropertyChanged("TelephoneNumber");
					this.OnTelephoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BusinessYear", DbType="Decimal(18,0) NOT NULL")]
		public decimal BusinessYear
		{
			get
			{
				return this._BusinessYear;
			}
			set
			{
				if ((this._BusinessYear != value))
				{
					this.OnBusinessYearChanging(value);
					this.SendPropertyChanging();
					this._BusinessYear = value;
					this.SendPropertyChanged("BusinessYear");
					this.OnBusinessYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Merchandise", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Merchandise
		{
			get
			{
				return this._Merchandise;
			}
			set
			{
				if ((this._Merchandise != value))
				{
					this.OnMerchandiseChanging(value);
					this.SendPropertyChanging();
					this._Merchandise = value;
					this.SendPropertyChanged("Merchandise");
					this.OnMerchandiseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockValues", DbType="Decimal(18,0) NOT NULL")]
		public decimal StockValues
		{
			get
			{
				return this._StockValues;
			}
			set
			{
				if ((this._StockValues != value))
				{
					this.OnStockValuesChanging(value);
					this.SendPropertyChanging();
					this._StockValues = value;
					this.SendPropertyChanged("StockValues");
					this.OnStockValuesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginningCapital", DbType="Decimal(18,0) NOT NULL")]
		public decimal BeginningCapital
		{
			get
			{
				return this._BeginningCapital;
			}
			set
			{
				if ((this._BeginningCapital != value))
				{
					this.OnBeginningCapitalChanging(value);
					this.SendPropertyChanging();
					this._BeginningCapital = value;
					this.SendPropertyChanged("BeginningCapital");
					this.OnBeginningCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowSalesPeriod", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LowSalesPeriod
		{
			get
			{
				return this._LowSalesPeriod;
			}
			set
			{
				if ((this._LowSalesPeriod != value))
				{
					this.OnLowSalesPeriodChanging(value);
					this.SendPropertyChanging();
					this._LowSalesPeriod = value;
					this.SendPropertyChanged("LowSalesPeriod");
					this.OnLowSalesPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowestDailySales", DbType="Decimal(18,0) NOT NULL")]
		public decimal LowestDailySales
		{
			get
			{
				return this._LowestDailySales;
			}
			set
			{
				if ((this._LowestDailySales != value))
				{
					this.OnLowestDailySalesChanging(value);
					this.SendPropertyChanging();
					this._LowestDailySales = value;
					this.SendPropertyChanged("LowestDailySales");
					this.OnLowestDailySalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageDailySales", DbType="Decimal(18,0) NOT NULL")]
		public decimal AverageDailySales
		{
			get
			{
				return this._AverageDailySales;
			}
			set
			{
				if ((this._AverageDailySales != value))
				{
					this.OnAverageDailySalesChanging(value);
					this.SendPropertyChanging();
					this._AverageDailySales = value;
					this.SendPropertyChanged("AverageDailySales");
					this.OnAverageDailySalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantBusinessIncomeInformation", Storage="_tblApplicant", ThisKey="ApplicantId", OtherKey="Id", IsForeignKey=true)]
		public tblApplicant tblApplicant
		{
			get
			{
				return this._tblApplicant.Entity;
			}
			set
			{
				tblApplicant previousValue = this._tblApplicant.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicant.Entity = null;
						previousValue.tblApplicantBusinessIncomeInformations.Remove(this);
					}
					this._tblApplicant.Entity = value;
					if ((value != null))
					{
						value.tblApplicantBusinessIncomeInformations.Add(this);
						this._ApplicantId = value.Id;
					}
					else
					{
						this._ApplicantId = default(int);
					}
					this.SendPropertyChanged("tblApplicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicantSpouse_tblApplicantBusinessIncomeInformation", Storage="_tblApplicantSpouse", ThisKey="ApplicantSpouseId", OtherKey="Id", IsForeignKey=true)]
		public tblApplicantSpouse tblApplicantSpouse
		{
			get
			{
				return this._tblApplicantSpouse.Entity;
			}
			set
			{
				tblApplicantSpouse previousValue = this._tblApplicantSpouse.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicantSpouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicantSpouse.Entity = null;
						previousValue.tblApplicantBusinessIncomeInformations.Remove(this);
					}
					this._tblApplicantSpouse.Entity = value;
					if ((value != null))
					{
						value.tblApplicantBusinessIncomeInformations.Add(this);
						this._ApplicantSpouseId = value.Id;
					}
					else
					{
						this._ApplicantSpouseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblApplicantSpouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicantEmployeeInformation")]
	public partial class tblApplicantEmployeeInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ApplicantId;
		
		private System.Nullable<int> _ApplicantSpouseId;
		
		private string _Company;
		
		private string _Address;
		
		private string _ContactNumber;
		
		private string _PositionOccupied;
		
		private decimal _ServiceLength;
		
		private decimal _MonthlySalary;
		
		private EntityRef<tblApplicant> _tblApplicant;
		
		private EntityRef<tblApplicantSpouse> _tblApplicantSpouse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicantIdChanging(int value);
    partial void OnApplicantIdChanged();
    partial void OnApplicantSpouseIdChanging(System.Nullable<int> value);
    partial void OnApplicantSpouseIdChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnPositionOccupiedChanging(string value);
    partial void OnPositionOccupiedChanged();
    partial void OnServiceLengthChanging(decimal value);
    partial void OnServiceLengthChanged();
    partial void OnMonthlySalaryChanging(decimal value);
    partial void OnMonthlySalaryChanged();
    #endregion
		
		public tblApplicantEmployeeInformation()
		{
			this._tblApplicant = default(EntityRef<tblApplicant>);
			this._tblApplicantSpouse = default(EntityRef<tblApplicantSpouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantId", DbType="Int NOT NULL")]
		public int ApplicantId
		{
			get
			{
				return this._ApplicantId;
			}
			set
			{
				if ((this._ApplicantId != value))
				{
					if (this._tblApplicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantId = value;
					this.SendPropertyChanged("ApplicantId");
					this.OnApplicantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantSpouseId", DbType="Int")]
		public System.Nullable<int> ApplicantSpouseId
		{
			get
			{
				return this._ApplicantSpouseId;
			}
			set
			{
				if ((this._ApplicantSpouseId != value))
				{
					if (this._tblApplicantSpouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantSpouseIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantSpouseId = value;
					this.SendPropertyChanged("ApplicantSpouseId");
					this.OnApplicantSpouseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionOccupied", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PositionOccupied
		{
			get
			{
				return this._PositionOccupied;
			}
			set
			{
				if ((this._PositionOccupied != value))
				{
					this.OnPositionOccupiedChanging(value);
					this.SendPropertyChanging();
					this._PositionOccupied = value;
					this.SendPropertyChanged("PositionOccupied");
					this.OnPositionOccupiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceLength", DbType="Decimal(18,0) NOT NULL")]
		public decimal ServiceLength
		{
			get
			{
				return this._ServiceLength;
			}
			set
			{
				if ((this._ServiceLength != value))
				{
					this.OnServiceLengthChanging(value);
					this.SendPropertyChanging();
					this._ServiceLength = value;
					this.SendPropertyChanged("ServiceLength");
					this.OnServiceLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthlySalary", DbType="Decimal(18,0) NOT NULL")]
		public decimal MonthlySalary
		{
			get
			{
				return this._MonthlySalary;
			}
			set
			{
				if ((this._MonthlySalary != value))
				{
					this.OnMonthlySalaryChanging(value);
					this.SendPropertyChanging();
					this._MonthlySalary = value;
					this.SendPropertyChanged("MonthlySalary");
					this.OnMonthlySalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantEmployeeInformation", Storage="_tblApplicant", ThisKey="ApplicantId", OtherKey="Id", IsForeignKey=true)]
		public tblApplicant tblApplicant
		{
			get
			{
				return this._tblApplicant.Entity;
			}
			set
			{
				tblApplicant previousValue = this._tblApplicant.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicant.Entity = null;
						previousValue.tblApplicantEmployeeInformations.Remove(this);
					}
					this._tblApplicant.Entity = value;
					if ((value != null))
					{
						value.tblApplicantEmployeeInformations.Add(this);
						this._ApplicantId = value.Id;
					}
					else
					{
						this._ApplicantId = default(int);
					}
					this.SendPropertyChanged("tblApplicant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicantSpouse_tblApplicantEmployeeInformation", Storage="_tblApplicantSpouse", ThisKey="ApplicantSpouseId", OtherKey="Id", IsForeignKey=true)]
		public tblApplicantSpouse tblApplicantSpouse
		{
			get
			{
				return this._tblApplicantSpouse.Entity;
			}
			set
			{
				tblApplicantSpouse previousValue = this._tblApplicantSpouse.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicantSpouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicantSpouse.Entity = null;
						previousValue.tblApplicantEmployeeInformations.Remove(this);
					}
					this._tblApplicantSpouse.Entity = value;
					if ((value != null))
					{
						value.tblApplicantEmployeeInformations.Add(this);
						this._ApplicantSpouseId = value.Id;
					}
					else
					{
						this._ApplicantSpouseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblApplicantSpouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicantRealPropertiesOwned")]
	public partial class tblApplicantRealPropertiesOwned : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ApplicantId;
		
		private string _Real;
		
		private string _Location;
		
		private string _PresentValue;
		
		private string _EcumberedTo;
		
		private EntityRef<tblApplicant> _tblApplicant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicantIdChanging(int value);
    partial void OnApplicantIdChanged();
    partial void OnRealChanging(string value);
    partial void OnRealChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnPresentValueChanging(string value);
    partial void OnPresentValueChanged();
    partial void OnEcumberedToChanging(string value);
    partial void OnEcumberedToChanged();
    #endregion
		
		public tblApplicantRealPropertiesOwned()
		{
			this._tblApplicant = default(EntityRef<tblApplicant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantId", DbType="Int NOT NULL")]
		public int ApplicantId
		{
			get
			{
				return this._ApplicantId;
			}
			set
			{
				if ((this._ApplicantId != value))
				{
					if (this._tblApplicant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicantIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantId = value;
					this.SendPropertyChanged("ApplicantId");
					this.OnApplicantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Real", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Real
		{
			get
			{
				return this._Real;
			}
			set
			{
				if ((this._Real != value))
				{
					this.OnRealChanging(value);
					this.SendPropertyChanging();
					this._Real = value;
					this.SendPropertyChanged("Real");
					this.OnRealChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresentValue", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string PresentValue
		{
			get
			{
				return this._PresentValue;
			}
			set
			{
				if ((this._PresentValue != value))
				{
					this.OnPresentValueChanging(value);
					this.SendPropertyChanging();
					this._PresentValue = value;
					this.SendPropertyChanged("PresentValue");
					this.OnPresentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcumberedTo", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string EcumberedTo
		{
			get
			{
				return this._EcumberedTo;
			}
			set
			{
				if ((this._EcumberedTo != value))
				{
					this.OnEcumberedToChanging(value);
					this.SendPropertyChanging();
					this._EcumberedTo = value;
					this.SendPropertyChanged("EcumberedTo");
					this.OnEcumberedToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicant_tblApplicantRealPropertiesOwned", Storage="_tblApplicant", ThisKey="ApplicantId", OtherKey="Id", IsForeignKey=true)]
		public tblApplicant tblApplicant
		{
			get
			{
				return this._tblApplicant.Entity;
			}
			set
			{
				tblApplicant previousValue = this._tblApplicant.Entity;
				if (((previousValue != value) 
							|| (this._tblApplicant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblApplicant.Entity = null;
						previousValue.tblApplicantRealPropertiesOwneds.Remove(this);
					}
					this._tblApplicant.Entity = value;
					if ((value != null))
					{
						value.tblApplicantRealPropertiesOwneds.Add(this);
						this._ApplicantId = value.Id;
					}
					else
					{
						this._ApplicantId = default(int);
					}
					this.SendPropertyChanged("tblApplicant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblApplicantSpouse")]
	public partial class tblApplicantSpouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ApplicantId;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private decimal _NumberOfChildren;
		
		private decimal _Studying;
		
		private string _Schools;
		
		private EntitySet<tblApplicantBusinessIncomeInformation> _tblApplicantBusinessIncomeInformations;
		
		private EntitySet<tblApplicantEmployeeInformation> _tblApplicantEmployeeInformations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnApplicantIdChanging(int value);
    partial void OnApplicantIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnNumberOfChildrenChanging(decimal value);
    partial void OnNumberOfChildrenChanged();
    partial void OnStudyingChanging(decimal value);
    partial void OnStudyingChanged();
    partial void OnSchoolsChanging(string value);
    partial void OnSchoolsChanged();
    #endregion
		
		public tblApplicantSpouse()
		{
			this._tblApplicantBusinessIncomeInformations = new EntitySet<tblApplicantBusinessIncomeInformation>(new Action<tblApplicantBusinessIncomeInformation>(this.attach_tblApplicantBusinessIncomeInformations), new Action<tblApplicantBusinessIncomeInformation>(this.detach_tblApplicantBusinessIncomeInformations));
			this._tblApplicantEmployeeInformations = new EntitySet<tblApplicantEmployeeInformation>(new Action<tblApplicantEmployeeInformation>(this.attach_tblApplicantEmployeeInformations), new Action<tblApplicantEmployeeInformation>(this.detach_tblApplicantEmployeeInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicantId", DbType="Int NOT NULL")]
		public int ApplicantId
		{
			get
			{
				return this._ApplicantId;
			}
			set
			{
				if ((this._ApplicantId != value))
				{
					this.OnApplicantIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicantId = value;
					this.SendPropertyChanged("ApplicantId");
					this.OnApplicantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfChildren", DbType="Decimal(18,0) NOT NULL")]
		public decimal NumberOfChildren
		{
			get
			{
				return this._NumberOfChildren;
			}
			set
			{
				if ((this._NumberOfChildren != value))
				{
					this.OnNumberOfChildrenChanging(value);
					this.SendPropertyChanging();
					this._NumberOfChildren = value;
					this.SendPropertyChanged("NumberOfChildren");
					this.OnNumberOfChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Studying", DbType="Decimal(18,0) NOT NULL")]
		public decimal Studying
		{
			get
			{
				return this._Studying;
			}
			set
			{
				if ((this._Studying != value))
				{
					this.OnStudyingChanging(value);
					this.SendPropertyChanging();
					this._Studying = value;
					this.SendPropertyChanged("Studying");
					this.OnStudyingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Schools", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				if ((this._Schools != value))
				{
					this.OnSchoolsChanging(value);
					this.SendPropertyChanging();
					this._Schools = value;
					this.SendPropertyChanged("Schools");
					this.OnSchoolsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicantSpouse_tblApplicantBusinessIncomeInformation", Storage="_tblApplicantBusinessIncomeInformations", ThisKey="Id", OtherKey="ApplicantSpouseId")]
		public EntitySet<tblApplicantBusinessIncomeInformation> tblApplicantBusinessIncomeInformations
		{
			get
			{
				return this._tblApplicantBusinessIncomeInformations;
			}
			set
			{
				this._tblApplicantBusinessIncomeInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblApplicantSpouse_tblApplicantEmployeeInformation", Storage="_tblApplicantEmployeeInformations", ThisKey="Id", OtherKey="ApplicantSpouseId")]
		public EntitySet<tblApplicantEmployeeInformation> tblApplicantEmployeeInformations
		{
			get
			{
				return this._tblApplicantEmployeeInformations;
			}
			set
			{
				this._tblApplicantEmployeeInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblApplicantBusinessIncomeInformations(tblApplicantBusinessIncomeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicantSpouse = this;
		}
		
		private void detach_tblApplicantBusinessIncomeInformations(tblApplicantBusinessIncomeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicantSpouse = null;
		}
		
		private void attach_tblApplicantEmployeeInformations(tblApplicantEmployeeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicantSpouse = this;
		}
		
		private void detach_tblApplicantEmployeeInformations(tblApplicantEmployeeInformation entity)
		{
			this.SendPropertyChanging();
			entity.tblApplicantSpouse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCivilStatus")]
	public partial class tblCivilStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CivilStatus;
		
		private int _CreatedByUserId;
		
		private System.DateTime _CreatedDateTime;
		
		private int _UpdatedByUserId;
		
		private System.DateTime _UpdatedDateTime;
		
		private EntitySet<tblApplicant> _tblApplicants;
		
		private EntityRef<tblUser> _tblUser;
		
		private EntityRef<tblUser> _tblUser1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCivilStatusChanging(string value);
    partial void OnCivilStatusChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnUpdatedByUserIdChanging(int value);
    partial void OnUpdatedByUserIdChanged();
    partial void OnUpdatedDateTimeChanging(System.DateTime value);
    partial void OnUpdatedDateTimeChanged();
    #endregion
		
		public tblCivilStatus()
		{
			this._tblApplicants = new EntitySet<tblApplicant>(new Action<tblApplicant>(this.attach_tblApplicants), new Action<tblApplicant>(this.detach_tblApplicants));
			this._tblUser = default(EntityRef<tblUser>);
			this._tblUser1 = default(EntityRef<tblUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CivilStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CivilStatus
		{
			get
			{
				return this._CivilStatus;
			}
			set
			{
				if ((this._CivilStatus != value))
				{
					this.OnCivilStatusChanging(value);
					this.SendPropertyChanging();
					this._CivilStatus = value;
					this.SendPropertyChanged("CivilStatus");
					this.OnCivilStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._tblUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedByUserId", DbType="Int NOT NULL")]
		public int UpdatedByUserId
		{
			get
			{
				return this._UpdatedByUserId;
			}
			set
			{
				if ((this._UpdatedByUserId != value))
				{
					if (this._tblUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUpdatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._UpdatedByUserId = value;
					this.SendPropertyChanged("UpdatedByUserId");
					this.OnUpdatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDateTime
		{
			get
			{
				return this._UpdatedDateTime;
			}
			set
			{
				if ((this._UpdatedDateTime != value))
				{
					this.OnUpdatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDateTime = value;
					this.SendPropertyChanged("UpdatedDateTime");
					this.OnUpdatedDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCivilStatus_tblApplicant", Storage="_tblApplicants", ThisKey="Id", OtherKey="CivilStatusId")]
		public EntitySet<tblApplicant> tblApplicants
		{
			get
			{
				return this._tblApplicants;
			}
			set
			{
				this._tblApplicants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblCivilStatus", Storage="_tblUser", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public tblUser tblUser
		{
			get
			{
				return this._tblUser.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser.Entity;
				if (((previousValue != value) 
							|| (this._tblUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser.Entity = null;
						previousValue.tblCivilStatus.Remove(this);
					}
					this._tblUser.Entity = value;
					if ((value != null))
					{
						value.tblCivilStatus.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("tblUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblCivilStatus1", Storage="_tblUser1", ThisKey="UpdatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public tblUser tblUser1
		{
			get
			{
				return this._tblUser1.Entity;
			}
			set
			{
				tblUser previousValue = this._tblUser1.Entity;
				if (((previousValue != value) 
							|| (this._tblUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblUser1.Entity = null;
						previousValue.tblCivilStatus1.Remove(this);
					}
					this._tblUser1.Entity = value;
					if ((value != null))
					{
						value.tblCivilStatus1.Add(this);
						this._UpdatedByUserId = value.Id;
					}
					else
					{
						this._UpdatedByUserId = default(int);
					}
					this.SendPropertyChanged("tblUser1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblApplicants(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblCivilStatus = this;
		}
		
		private void detach_tblApplicants(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblCivilStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AspUserId;
		
		private string _Username;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _BirthDate;
		
		private string _JobTitle;
		
		private string _AboutMe;
		
		private string _AddressStreet;
		
		private string _AddressCity;
		
		private string _AddressZip;
		
		private string _AddressCountry;
		
		private string _ContactNumber;
		
		private string _EmailAddress;
		
		private System.DateTime _CreatedDate;
		
		private System.DateTime _UpdatedDate;
		
		private EntitySet<tblResidenceType> _tblResidenceTypes;
		
		private EntitySet<tblResidenceType> _tblResidenceTypes1;
		
		private EntitySet<tblApplicant> _tblApplicants;
		
		private EntitySet<tblApplicant> _tblApplicants1;
		
		private EntitySet<tblCivilStatus> _tblCivilStatus;
		
		private EntitySet<tblCivilStatus> _tblCivilStatus1;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAspUserIdChanging(string value);
    partial void OnAspUserIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnBirthDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthDateChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnAboutMeChanging(string value);
    partial void OnAboutMeChanged();
    partial void OnAddressStreetChanging(string value);
    partial void OnAddressStreetChanged();
    partial void OnAddressCityChanging(string value);
    partial void OnAddressCityChanged();
    partial void OnAddressZipChanging(string value);
    partial void OnAddressZipChanged();
    partial void OnAddressCountryChanging(string value);
    partial void OnAddressCountryChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnUpdatedDateChanging(System.DateTime value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public tblUser()
		{
			this._tblResidenceTypes = new EntitySet<tblResidenceType>(new Action<tblResidenceType>(this.attach_tblResidenceTypes), new Action<tblResidenceType>(this.detach_tblResidenceTypes));
			this._tblResidenceTypes1 = new EntitySet<tblResidenceType>(new Action<tblResidenceType>(this.attach_tblResidenceTypes1), new Action<tblResidenceType>(this.detach_tblResidenceTypes1));
			this._tblApplicants = new EntitySet<tblApplicant>(new Action<tblApplicant>(this.attach_tblApplicants), new Action<tblApplicant>(this.detach_tblApplicants));
			this._tblApplicants1 = new EntitySet<tblApplicant>(new Action<tblApplicant>(this.attach_tblApplicants1), new Action<tblApplicant>(this.detach_tblApplicants1));
			this._tblCivilStatus = new EntitySet<tblCivilStatus>(new Action<tblCivilStatus>(this.attach_tblCivilStatus), new Action<tblCivilStatus>(this.detach_tblCivilStatus));
			this._tblCivilStatus1 = new EntitySet<tblCivilStatus>(new Action<tblCivilStatus>(this.attach_tblCivilStatus1), new Action<tblCivilStatus>(this.detach_tblCivilStatus1));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AspUserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string AspUserId
		{
			get
			{
				return this._AspUserId;
			}
			set
			{
				if ((this._AspUserId != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAspUserIdChanging(value);
					this.SendPropertyChanging();
					this._AspUserId = value;
					this.SendPropertyChanged("AspUserId");
					this.OnAspUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BirthDate", DbType="Date")]
		public System.Nullable<System.DateTime> BirthDate
		{
			get
			{
				return this._BirthDate;
			}
			set
			{
				if ((this._BirthDate != value))
				{
					this.OnBirthDateChanging(value);
					this.SendPropertyChanging();
					this._BirthDate = value;
					this.SendPropertyChanged("BirthDate");
					this.OnBirthDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(100)")]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AboutMe", DbType="NVarChar(MAX)")]
		public string AboutMe
		{
			get
			{
				return this._AboutMe;
			}
			set
			{
				if ((this._AboutMe != value))
				{
					this.OnAboutMeChanging(value);
					this.SendPropertyChanging();
					this._AboutMe = value;
					this.SendPropertyChanged("AboutMe");
					this.OnAboutMeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressStreet", DbType="NVarChar(MAX)")]
		public string AddressStreet
		{
			get
			{
				return this._AddressStreet;
			}
			set
			{
				if ((this._AddressStreet != value))
				{
					this.OnAddressStreetChanging(value);
					this.SendPropertyChanging();
					this._AddressStreet = value;
					this.SendPropertyChanged("AddressStreet");
					this.OnAddressStreetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressCity", DbType="NVarChar(MAX)")]
		public string AddressCity
		{
			get
			{
				return this._AddressCity;
			}
			set
			{
				if ((this._AddressCity != value))
				{
					this.OnAddressCityChanging(value);
					this.SendPropertyChanging();
					this._AddressCity = value;
					this.SendPropertyChanged("AddressCity");
					this.OnAddressCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressZip", DbType="NVarChar(MAX)")]
		public string AddressZip
		{
			get
			{
				return this._AddressZip;
			}
			set
			{
				if ((this._AddressZip != value))
				{
					this.OnAddressZipChanging(value);
					this.SendPropertyChanging();
					this._AddressZip = value;
					this.SendPropertyChanged("AddressZip");
					this.OnAddressZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressCountry", DbType="NVarChar(MAX)")]
		public string AddressCountry
		{
			get
			{
				return this._AddressCountry;
			}
			set
			{
				if ((this._AddressCountry != value))
				{
					this.OnAddressCountryChanging(value);
					this.SendPropertyChanging();
					this._AddressCountry = value;
					this.SendPropertyChanged("AddressCountry");
					this.OnAddressCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50)")]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblResidenceType", Storage="_tblResidenceTypes", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<tblResidenceType> tblResidenceTypes
		{
			get
			{
				return this._tblResidenceTypes;
			}
			set
			{
				this._tblResidenceTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblResidenceType1", Storage="_tblResidenceTypes1", ThisKey="Id", OtherKey="UpdatedByUserId")]
		public EntitySet<tblResidenceType> tblResidenceTypes1
		{
			get
			{
				return this._tblResidenceTypes1;
			}
			set
			{
				this._tblResidenceTypes1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblApplicant", Storage="_tblApplicants", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<tblApplicant> tblApplicants
		{
			get
			{
				return this._tblApplicants;
			}
			set
			{
				this._tblApplicants.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblApplicant1", Storage="_tblApplicants1", ThisKey="Id", OtherKey="UpdatedByUserId")]
		public EntitySet<tblApplicant> tblApplicants1
		{
			get
			{
				return this._tblApplicants1;
			}
			set
			{
				this._tblApplicants1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblCivilStatus", Storage="_tblCivilStatus", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<tblCivilStatus> tblCivilStatus
		{
			get
			{
				return this._tblCivilStatus;
			}
			set
			{
				this._tblCivilStatus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblUser_tblCivilStatus1", Storage="_tblCivilStatus1", ThisKey="Id", OtherKey="UpdatedByUserId")]
		public EntitySet<tblCivilStatus> tblCivilStatus1
		{
			get
			{
				return this._tblCivilStatus1;
			}
			set
			{
				this._tblCivilStatus1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_tblUser", Storage="_AspNetUser", ThisKey="AspUserId", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._AspUserId = value.Id;
					}
					else
					{
						this._AspUserId = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblResidenceTypes(tblResidenceType entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblResidenceTypes(tblResidenceType entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblResidenceTypes1(tblResidenceType entity)
		{
			this.SendPropertyChanging();
			entity.tblUser1 = this;
		}
		
		private void detach_tblResidenceTypes1(tblResidenceType entity)
		{
			this.SendPropertyChanging();
			entity.tblUser1 = null;
		}
		
		private void attach_tblApplicants(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblApplicants(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblApplicants1(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblUser1 = this;
		}
		
		private void detach_tblApplicants1(tblApplicant entity)
		{
			this.SendPropertyChanging();
			entity.tblUser1 = null;
		}
		
		private void attach_tblCivilStatus(tblCivilStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = this;
		}
		
		private void detach_tblCivilStatus(tblCivilStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblUser = null;
		}
		
		private void attach_tblCivilStatus1(tblCivilStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblUser1 = this;
		}
		
		private void detach_tblCivilStatus1(tblCivilStatus entity)
		{
			this.SendPropertyChanging();
			entity.tblUser1 = null;
		}
	}
}
#pragma warning restore 1591
